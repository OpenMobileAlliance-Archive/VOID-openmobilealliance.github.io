{"input":{"cteatedAt":"2021-02-17T22:10:13.763Z","url":"http://www.openmobilealliance.org/release/EFI/V1_1-20040609-C/","host":"www.openmobilealliance.org"},"result":{"data":[{"url":"http://www.openmobilealliance.org/release/EFI/V1_1-20040609-C/OMA-EFI-V1_1-20040609-C.zip","file":"OMA-EFI-V1_1-20040609-C.zip","status":"Candidate","version":"V1.1","date":"2004-06-09","contentMediaType":"application/zip"},{"url":"http://www.openmobilealliance.org/release/EFI/V1_1-20040609-C/OMA-ERELD-EFI-V1_1-20040609-C.pdf","file":"OMA-ERELD-EFI-V1_1-20040609-C.pdf","status":"Candidate","version":"V1.1","date":"2004-06-09","contentMediaType":"application/pdf","description":"The scope of this document is limited to the Enabler Release Definition  (ERELD) of Extenal Functionality Interface V1.1 [EFI] according to OMA Release process and the Enabler Release specification baseline listed in section 5."},{"url":"http://www.openmobilealliance.org/release/EFI/V1_1-20040609-C/OMA-WAP-EFI-V1_1-20040609-C.pdf","file":"OMA-WAP-EFI-V1_1-20040609-C.pdf","status":"Candidate","version":"V1.1","date":"2004-06-09","contentMediaType":"application/pdf","description":"The Wireless Application Protocol (WAP) is a result of continuous work to define an industry-wide specification for developing applications that operate over wireless communication networks. The scope for the Open Mobile Alliance is to define a set of specifications to be used by services and applications. The wireless market is growing very quickly, and reaching new customers and services. To enable operators and manufacturers to meet the challenges in advanced services, differentiation and fast/flexible service creation the Open Mobile Alliance defines a set of protocols for the transport, security, transaction, session and application layers. For additional information on the WAP architecture, please refer to “Wireless Application Protocol Architecture Specification” [WAPARCH]. Current trends in telecommunications enable new kinds of functionality in a wireless terminal; either through the integration of new features into the mobile terminal or by allowing new types of devices to be connected to the mobile terminal. Supporting this development in OMA standards will strengthen OMA’s position as a platform for advanced wireless data services by providing access to new capabilities. External Functionality (EF) is a general term for components or entities with embedded applications that execute outside of the Wireless Application Environment (WAE) or other user agent, and conform to the EF requirements. The External Functionality can be built-in or connected to a mobile terminal. This connection can be permanent or temporary. An application environment of WAP is the place within the terminal where applications are executed, either in the form of markup pages or in the form of scripts or both. The most convenient way to facilitate the connection between the application and new functionality of the terminal is to specify new standard services that can be accessed by an application that is being executed in WAP application environment. The External Functionality Interface supports the notion of classes, conceptual groups of functions that pertain to the same application areas.  The External Functionality Interface (EFI) specifications in WAP provide methods enabling applications to access External Functionality in a uniform way through the EFI Application Interface (EFI AI). The EFI specifications consists of the Framework, the Process specification and a set of Class Specifications, each one specific to the given application area.  EFI Framework defines the general behaviour of EFI implementation in the WAP terminal while detailed requirements for the class are provided in individual Class Specification documents. The Process specification facilitates the development of Class Specifications by defining steps that should be taken in order to achieve the quality Class Specification. The EFI Application Interface (EFI AI) is a high level interface that shall suit a number of different applications. Various external functions are grouped in classes that offer common functionality across different makes and versions of terminals and external functionality entities. The EFI Framework provides an extensible set of interfaces that can support services, including the ability to query for the particular service as well as the ability to capture the functionality that is specific to the given device or software installed. However, there is no functionality to dynamically add new services so there is no general service discovery mechanism. This document defines the EFI Framework. The document starts with the requirements and principles that the EFI Framework is built upon. Next, the conceptual architecture of EFI is presented and the terminology is introduced. The definition of the Framework follows, addressing issues such as naming convention and version control. The following chapters show how the Framework can be accessed via a markup language (WML and XHTML Mobile Profile) and scripting language (WMLScript or ECMAScript). The Framework requires the mobile client to support both the scripting and markup languages specified by the Wireless Application Environment [WAE]."},{"url":"http://www.openmobilealliance.org/release/EFI/V1_1-20040609-C/OMA-WAP-EFICDP-V1_1-20040609-C.pdf","file":"OMA-WAP-EFICDP-V1_1-20040609-C.pdf","status":"Candidate","version":"V1.1","date":"2004-06-09","contentMediaType":"application/pdf","description":"Wireless Application Protocol (WAP), as part of Open Mobile Alliance (OMA), is a result of continuous work to define an industry wide specification for developing applications that operate over wireless communication networks. The scope for OMA is to define a set of specifications to be used by service applications. The wireless market is growing very quickly and reaching new customers and providing new services. To enable operators and manufacturers to meet the challenges in advanced services, differentiation, and fast/flexible service creation, WAP defines a set of protocols in transport, session and application layers. For additional information on the WAP architecture, refer to “Wireless Application Protocol Architecture Specification” [WAPARCH].   Current trends in telecommunications enable new kinds of functionality in a wireless terminal; either through the integration of new features into the terminal or by allowing new types of devices to be connected to the terminal. Supporting this development in OMA standards will strengthen OMA’s position as a platform for advanced wireless data services by providing access to new capabilities. External Functionality (EF) is a general term for components or entities with embedded applications that execute outside of the Wireless Application Environment (WAE) or other user agent, and conform to the EF requirements. The External Functionality can be built-in or connected to a mobile terminal. This connection can be permanent or temporary. An application environment of WAP is the place within the terminal where applications are executed, either in the form of markup pages or in the form of scripts or both. The most convenient way to facilitate the connection between the application and new functionality of the terminal is to specify new standard services that can be accessed by an application that is being executed in WAP application environment. The External Functionality Interface supports the notion of classes, conceptual groups of functions that pertain to the same application areas.  The External Functionality Interface (EFI) specifications in WAP provide methods enabling applications to access External Functionality in a uniform way through the EFI Application Interface (EFI AI). The EFI specifications consists of the Framework, the Process specification and a set of Class Specifications, each one specific to the given application area.  EFI Framework defines the general behaviour of EFI implementation in the mobile terminal while detailed requirements for the class are provided in individual Class Specification documents. The Process specification facilitates the development of Class Specifications by defining steps that should be taken in order to achieve the quality Class Specification. This document shall enable the reader to produce a Class Specification even though he does not intend to introduce it as a well-known standard specification within OMA but to fulfil requirements for interoperability to that extend needed in the special case."},{"url":"http://www.openmobilealliance.org/release/EFI/V1_1-20040609-C/OMA-WAP-EFIMAC-V1_1-20040609-C.pdf","file":"OMA-WAP-EFIMAC-V1_1-20040609-C.pdf","status":"Candidate","version":"V1.1","date":"2004-06-09","contentMediaType":"application/pdf","description":"The Wireless Application Protocol (WAP) is a result of continuous work to define an industry-wide specification for developing applications that operate over wireless communication networks. The scope for the Open Mobile AllianceTM is to define a set of specifications to be used by service applications. The wireless market is growing very quickly, and reaching new customers and services. To enable operators and manufacturers to meet the challenges in advanced services, differentiation and fast/flexible service creation the Open Mobile Alliance defines a set of protocols for the transport, security, transaction, session and application layers. For additional information on the WAP architecture, please refer to “Wireless Application Protocol Architecture Specification” [WAPARCH]. External Functionality (EF) is a general term for components or entities with embedded applications that execute outside of the Wireless Application Environment (WAE) or other user agent, and conform to the EFI requirements. The External Functionality can be built-in or connected to a mobile terminal. This connection can be permanent or temporary. The Wireless Application Environment is the place within the terminal where applications are executed, either in the form of markup, scripts, or both. The most convenient way to facilitate the connection between the application and new functionality of the terminal is to specify new standard services that can be accessed by an application that is being executed in the Wireless Application Environment. EFI supports the notion of classes, conceptual groups of functions that pertain to the same application areas.  The External Functionality Interface (EFI) specifications provide methods enabling applications to access External Functionality in a uniform way through the EFI Application Interface (EFI AI). The EFI specifications consists of the Framework, the Process specification and a set of Class Specifications, each one specific to the given application area.  EFI Framework defines the general behaviour of EFI implementation in the mobile terminal while detailed requirements for the class are provided in individual Class Specification documents. The Process specification facilitates the development of Class Specifications by defining steps that should be taken in order to achieve the quality Class Specification. The EFI Application Interface (EFI AI) is a high level interface that shall suit a number of different applications. Various external functions are grouped in classes that offer common functionality across different makes and versions of terminals and external functionality entities. The EFI Framework provides an extensible set of interfaces that can support services, including the ability to query for the particular service as well as the ability to capture the functionality that is specific to the given device or software installed. However, there is no functionality to dynamically add new services so there is no general service discovery mechanism. This document provides a class for the management of applications running in application environments outside of the Wireless Application Environment [WAE] and Wireless Telephony Application [WTA]. It is designed to allow WAP applications executing within WAE to start, stop and control external applications and to discover what applications are available to it. The EFI Manage Application Class is used to manage general applications. It is not designed to replace the access to specific classes of functionality offered through other EFI classes.  The class is restricted to managing external applications, that is, applications running outside of WAE or WTA.   This document also provides instructions for implementing the class for the GSM SIM Application toolkit as defined in GSM 11.14 [GSM1114] and 3G TS 31.111 [3G31.111]."},{"url":"http://www.openmobilealliance.org/release/EFI/V1_1-20040609-C/OMA-WAP-EFITEST-V1_1-20040609-C.pdf","file":"OMA-WAP-EFITEST-V1_1-20040609-C.pdf","status":"Candidate","version":"V1.1","date":"2004-06-09","contentMediaType":"application/pdf","description":"The Wireless Application Protocol (WAP) is a result of continuous work to define an industry-wide specification for developing applications that operate over wireless communication networks. The scope for the Open Mobile AllianceM is to define a set of specifications to be used by service applications. The wireless market is growing very quickly, and reaching new customers and services. To enable operators and manufacturers to meet the challenges in advanced services, differentiation and fast/flexible service creation the Open Mobile Alliance defines a set of protocols for the transport, security, transaction, session and application layers. For additional information on the WAP architecture, please refer to “Wireless Application Protocol Architecture Specification” [WAPARCH]. External Functionality (EF) is a general term for components or entities with embedded applications that execute outside of the Wireless Application Environment (WAE) or other user agent, and conform to the EFI requirements. The External Functionality can be built-in or connected to a mobile terminal. This connection can be permanent or temporary. This document defines the EFI test class. The basic idea of this test class is to allow the testing and certification of the EFI framework with a minimum set of functions. These functions should be accessible from WAP applications during the certification tests. The functions of the test class and the corresponding attributes and properties (the test class) should be implemented in a mobile terminal undergoing EFI interoperability testing.  This will allow the development of an EFI interoperability test suite that is the same for every mobile terminal under test."}]}}