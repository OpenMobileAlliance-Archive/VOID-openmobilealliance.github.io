{"input":{"cteatedAt":"2021-02-17T22:06:37.953Z","url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/","host":"www.openmobilealliance.org"},"result":{"data":[{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-AD-DS-V2_0-20090212-C.pdf","file":"OMA-AD-DS-V2_0-20090212-C.pdf","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"The scope of this document is to define the architecture for the OMA DS Enabler.  This document details the functional description and architecture for data synchronization within OMA specifications. This document fulfils the functional capabilities needed to support this service enabler as described in the DS 2.0 Requirements document [DS-RD]."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-ERELD-DS-V2_0-20090212-C.pdf","file":"OMA-ERELD-DS-V2_0-20090212-C.pdf","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"The scope of this document is limited to the Enabler Release Definition of Data Synchronization according to OMA Release process and the Enabler Release specification baseline listed in section 5."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-ERP-DS-V2_0-20090212-C.zip","file":"OMA-ERP-DS-V2_0-20090212-C.zip","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/zip"},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-ETR-DS-V2_0-20090212-C.pdf","file":"OMA-ETR-DS-V2_0-20090212-C.pdf","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"The Enabler Test Requirements (ETR) document for the Enabler under consideration is created and maintained by the Technical Working Group (TWG) responsible for the technical specifications for the corresponding Enabler. The ETR document is intended to cover at least those requirements collected in the Requirements Document (RD) and the Architecture Document (AD) in addition to any other items the TWG has identified as important enough to warrant attention from interoperability perspective and identify any technical functionalities that should be covered by testing."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-RD-DS-V2_0-20070418-C.pdf","file":"OMA-RD-DS-V2_0-20070418-C.pdf","status":"Candidate","version":"V2.0","date":"2007-04-18","contentMediaType":"application/pdf","description":"This document contains use-cases and high level requirements for improved data synchronization enabler which are needed to supply the core data synchronization service. This document contains information applicable to Network Operators, terminal and network manufacturers, enterprises, independent software vendors, and service providers."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-SUP-MO_DS-V1_0-20090212-C.txt","file":"OMA-SUP-MO_DS-V1_0-20090212-C.txt","status":"Candidate","version":"V1.0","date":"2009-02-12","contentMediaType":"text/plain"},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-SUP-XSD_DS_DevInf_Schema-V2_0-20090212-C.xsd","file":"OMA-SUP-XSD_DS_DevInf_Schema-V2_0-20090212-C.xsd","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/xml"},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-SUP-XSD_DS_Syntax_Schema-V2_0-20090212-C.xsd","file":"OMA-SUP-XSD_DS_Syntax_Schema-V2_0-20090212-C.xsd","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/xml"},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-DS_Concepts-V2_0-20090212-C.pdf","file":"OMA-TS-DS_Concepts-V2_0-20090212-C.pdf","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"This document specifies the overall concepts, references, and definitions of OMA DS."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-DS_DevInf-V2_0-20090212-C.pdf","file":"OMA-TS-DS_DevInf-V2_0-20090212-C.pdf","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"This document specifies the device information syntax and semantics used by the OMA data synchronization protocol. Please refer to [DSCONCEPTS] for further information on the OMA DS organization and history."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-DS_MO-V1_0-20090212-C.pdf","file":"OMA-TS-DS_MO-V1_0-20090212-C.pdf","status":"Candidate","version":"V1.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"This document defines the DS Management Object, which offers a standardized way to represent data sync settings within a device’s OMA Device Management tree. The DS Management Object is defined using the OMA DM Device Description Framework (DDF) and the DS Management Object has standardized points of extension to permit implementation-specific parameters to accompany the standardized parameters. This added flexibility is intended to encourage the use of the standardized object while not unnecessarily restricting individual vendor innovations."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-DS_Notification-V2_0-20090212-C.pdf","file":"OMA-TS-DS_Notification-V2_0-20090212-C.pdf","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"This document describes how a DS Server may notify a DS Client to initiate a synchronization session. Please refer to [DSCONCEPTS] for further information on the OMA DS organization and history."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-DS_Protocol-V2_0-20090212-C.pdf","file":"OMA-TS-DS_Protocol-V2_0-20090212-C.pdf","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"This document specifies the message flows between data synchronization client and server in order to ensure an inter-operable solution across all devices.  Please refer to [DSCONCEPTS] for further information on the OMA DS organization and history.  Page 7 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 2.  References 2.1     Normative References [AES] \"Specification for the Advanced Encryption Standard (AES)\", National Institute of Standards and Technology, FIPS 197.  November 26, 2001.                                                              URL:http://www.nist.gov [DEVINF] “OMA DS Device Information ”, Open Mobile Alliance, OMA-TS-DS-DevInf-V2_0, URL:http://www.openmobilealliance.org/ [DM_ERELD] “OMA Device Management”, Version 1.2, Open Mobile Alliance, OMA-DM-V1_2, URL: http://www.openmobilealliance.org [DS_MO] “OMA DS Management Object”, Open Mobile Alliance, OMA-TS-DS_MO-V1_0, URL:http://www.openmobilealliance.org/ [DSCONCEPTS] “Data Synchronization Concepts and Definitions”, Open Mobile Alliance, OMA-TS-DS_Concepts-V2_0,                                                                                                    URL:http://www.openmobilealliance.org/ [DSHISTORY] “OMA DS Standards Change History”, Open Mobile Alliance, OMA-WP-SyncML_ChangeHistory,                               URL:http://www.openmobilealliance.org/ [DSHTTPBINDING] “SyncML HTTP Binding Specification”, Version 1.2.1, Open Mobile Alliance, OMA-TS-SyncML_HTTPBinding-V1_2_1,                                                       URL:http://www.openmobilealliance.org/ [DSOBEXBINDING] “OMA DS OBEX Binding Specification”, Version 1.2, Open Mobile Alliance, OMA-TS-SyncML_OBEXBinding_V1_2,                                                       URL:http://www.openmobilealliance.org/ [DSSYNTAX] “Data Synchronization Syntax”, Open Mobile Alliance, OMA-TS-DS_Syntax-V2_0, URL:http://www.openmobilealliance.org/ [DSWSPBINDING] “OMA DS OBEX Binding Specification”, Version 1.2, Open Mobile Alliance, OMA-TS-SyncML_WSPBinding-V1_2,                                                           URL:http://www.openmobilealliance.org/ [IMCVCAL] “vCalendar – The electronic calendaring and scheduling exchange format – Version 1.0”, URL:http://www.imc.org/pdi/vcal-10.doc [IMCVCARD] “vCard - The electronic business card - Version 2.1”,                              URL:http://www.imc.org/pdi/vcard-21.doc [IMEI] “Digital cellular telecommunications system (Phase 2+) (GSM); Universal Mobile Telecommunications System (UMTS); Numbering, addressing and identification” (3G TS 23.003 Version 3.4.0 Release 1999), URL:http://webapp.etsi.org/action/PU/20000523/ts_123003v030400p.pdf [RFC2045] “Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies”. N. Borenstein, N. Freed, November 1996.                                               URL:http://www.ietf.org/rfc/rfc2045.txt [RFC2104] “HMAC: Keyed-Hashing for Message Authentication”. H. Krawczyk, M. Bellare, R. Canetti, February 1997.                                                                                                    URL:http://www.ietf.org/rfc/rfc2104.txt [RFC2119] “Key words for use in RFCs to Indicate Requirement Levels”, S. Bradner,  March 1997, URL:http://www.ietf.org/rfc/rfc2119.txt [RFC2234] “Augmented BNF for Syntax Specifications: ABNF”,  D. Crocker, Ed., P. Overell,  November 1997,                                                                                        URL:http://www.ietf.org/rfc/rfc2234.txt [RFC2279] “UTF-8, a transformation format of ISO 10646”,   F. Yergeau,  January 1998, URL:http://www.ietf.org/rfc/rfc2279.txt [RFC2396] “Uniform Resource Identifiers (URI): Generic Syntax”, T. Berners-Lee, et al., August 1998,  Page 8 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] URL:http://www.ietf.org/rfc/rfc2396.txt [RFC2426] “vCard MIME Directory Profile”, F. Dawson,  T. Howes, September, 1998, URL:http://www.ietf.org/rfc/rfc2426.txt [RFC2437] “RSA Cryptography Specifications Version 2.0”. B. Kaliski, J. Staddon, October 1998. URL:http://www.ietf.org/rfc/rfc2437.txt [RFC2445] “Internet Calendaring and Scheduling Core Object Specification (iCalendar)”,  F. Dawson, D. Stenerson, November 1998,                                                                                    URL:http://www.ietf.org/rfc/rfc2445.txt [RFC2616] “Hypertext Transfer Protocol -- HTTP/1.1”.  R. Fielding, UC Irvine, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, T. Berners-Lee, June 1999.                                   URL:http://www.ietf.org/rfc/rfc2616.txt [RFC4825] “The Extensible Markup Language (XML) Configuration Access Protocol (XCAP)”, J. Rosenberg.  May, 2007,                                                                                                URL:http://www.ietf.org/rfc/rfc4825.txt  2.2     Informative References None.  Please refer to [DSCONCEPTS] for the other Informative References.   Page 9 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 3.  Terminology and Conventions 3.1     Conventions The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in [RFC2119]. All sections and appendixes, except \"Scope\" and \"Introduction\", are normative, unless they are explicitly indicated to be informative. Any reference to components of the Data Synchronization XML Schema or XML snippets is specified in this typeface.  3.2     Definitions Please refer to the [DSCONCEPTS] document.  3.3     Abbreviations Please refer to the [DSCONCEPTS] document.   Page 10 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 4.  Introduction This specification defines a synchronization protocol between the DS Client and DS Server.  4.1     Version History For a detailed change history of OMA-DS, refer to [DSHISTORY].  Specific Protocol Document changes include: 4.1.1 Version 1.0.1 This was the initial definition of the SyncML Protocol, between a client device and a server device. 4.1.2 Version 1.1.x The protocol was enhanced to support Large Objects, indicate UTC support, Maximum object size supported, and convey the Number of Changes. The Core specifications were split into SyncML Common, SyncML DS, and SyncML DM. With the release of 1.1.2, SyncML was renamed OMA-DS. 4.1.3 Version 1.2.x Suspend and Resume functionality was added, Server Alerted Notification was extensively redone, Data Sync Record and Field Level filtering was added, Synchronization of hierarchical data objects, and field level replace was implemented.  Additionally, information specific to particular data formats was moved into separate data object definition specifications. 4.1.4 Version 2.0 Version 2.0 re-designed the syntax and semantics, using XML Schema, simpler syntax, and much stronger type checking. A variety of things were done to reduce traffic. Meta Information was re-integrated into the core specifications, generally as attributes modifying existing elements (See [DSSYNTAX]).  Sync Types were replaced with a specific SyncAlert, which allowed for “Fingerprints” (see section 5.2) to be exchanged for a number of cases that used to result in Slow Syncs, to improve sync interruption recovery. Device information was allowed to be returned partially, rather than always required to be fully returned (See section 5.10.5.2).  Synchronzation of sub-parts was enabled (See Sections 5.9, 5.10 and 5.16).  Security was enhanced with addition encryption capabilities for the data being synchronized (See Encryption related items in [DSSYNTAX]).  Continuous Sync was created (See Section 6.2).  Page 11 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 5.  Protocol Fundamentals 5.1     Sync Type Negotiation Parameters Prior to the data synchronization process, the DS Client and DS Server MUST negotiate the data synchronization mechanisms. The negotiation process aims to determine the synchronization direction, synchronization behavior, and to identify what part of data needs to be sent.  In the sync mechanism negotiation process, the DS Client or DS Server sends data synchronization negotiation parameters to the other side. The parameters are shown below. 5.1.1 Direction  This indicates which sides will send data. The possible values are “fromClient”, “fromServer”, “twoWay” or “NoWay”. “NoWay” means that the direction is not specified. If “NoWay” is specified for the “Direction”, the “Behavior” parameter will have no meaning. During the “NoWay” synchronization, the server or the client can exchange data freely and without the restriction of the sync type. The server or the client can send data items to the other side or retrieve data items or retrieve hierarchy information from the other side. Direction may only be modified to subtract from the requested data transfer.  For example, if both sides are sending data, it may be negotiated so that only one side will send data.  If only one side is sending data, then it cannot be forced for the other side to send data.  The allowed transitions are thus from “twoWay” to “fromServer”, “twoWay” to “fromClient”, or to keep the requested value. The detailed transition rules are listed in the table below:  From \\ To twoWay fromClient fromServer NoWay twoWay Allowed Allowed Allowed Allowed fromClient Not allowed Allowed Not allowed Allowed fromServer Not allowed Not allowed Allowed Allowed NoWay Not allowed Not allowed Not allowed  Allowed 5.1.2 Behavior This indicates what behavior is expected to occur with existing data.  The possible values are “Refresh” or “Preserve”.   OMA DS provides the capability for refreshing the entire data on the DS Client with the equivalent synchronization data on the DS Server. This could be necessary if the DS Client and the DS Server versions are no longer \"in sync\" with each other due to hardware or power failure in the mobile device, or if the version on the DS Client has become corrupted or erased from memory. This capability is provided by the DS Client issuing a \"refresh\" Behaviour attribute value in SyncAlert command to the DS Server. Behavior may only be modified to reduce the amount of data being preserved.  For example, if the client is clearing its data store, the server may not request that the client keep its data store.  The allowed transitions are thus from “Preserve” to “Refresh”, or to keep the requested value. The detailed transition rules are listed in the table below:  From \\ To Preserve Refresh Preserve Allowed Allowed Refresh Not allowed Allowed The Behavior parameter will be used with Direction parameter. If Direction is “fromServer” and Behavior is “Refresh”, it would indicate that the client is to operate as if it has cleared its data store prior to further data being transferred, such as when reloading the client data stores.  If Direction is “fromClient” and Behavior is “Refresh”, it would indicate the same for the server, such as the client performing a backup  Page 12 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] operation.  Note that there is no need to be able to specify refreshing both sides – the requester could clear its own data, and just request the other side to clear its data.   Also note that this does not require the actual clearing of data before the sync – in many instances, knowledge of what data is presently available can prevent having to transfer that data again.  Any data identified during the sync would not be deleted. The detailed combination rules for Direction and Behavior are listed in the table below:  Combination Refresh Preserve twoWay Not allowed Allowed fromClient Allowed Allowed fromServer Allowed Allowed NoWay Not allowed Allowed 5.1.3 IDValidity   This indicates whether the IDs of data objects can be trusted.  The possible values are “true” or “false”. “False” indicates that some kind of reset or renumbering operation has occurred, or a loss of mapping information has occurred. IDValidity may only be reduced.  The only allowed transition is from “true” to “false”, which could occur if the initiator of the sync had valid IDs, but the recipient did not. The detailed transition rules are listed in the table below:  From \\ To true false true Allowed Allowed false Not allowed Allowed 5.1.4 ChangeLogValidity This indicates whether accurate knowledge of what has changed is available. The possible values are “true” or “false”.  The value “false” indicates that some kind of reset or loss of change data, or a loss of an accurate starting point for changes (such as a sync anchor mismatch) has occurred.  Without accurate information about what data has changed since a particular point in time, some information about all data objects will generally need to be transferred.  This also applies for a very first sync, since all data objects will have to be examined. Note that as soon as one data object has been successfully transferred, ChangeLogValidity of subsequent syncs could theoretically be considered “true”, but since the sync anchors are not referring to the same point in time it must stay “false” until valid sync anchors are available. Note that if IDValidity is “false”, then even if ChangeLogValidity is “true”, the change log information.cannot be trusted by the other side. ChangeLogValidity is only applicable for parties sending data.  E.g. if the Behavior parameter is “Refresh” and the Direction is “fromServer”, then only the ChangeLogValidity of the server is relevant. ChangeLogValidity may only be reduced.  The only allowed transition is from “true” to “false”, which could occur if the initiator of the sync has valid change log data, but the recipient does not. The detailed transition rules are listed in the table below:  From \\ To true false true Allowed Allowed false Not allowed Allowed 5.2     Fingerprint Introduction Fingerprints are values associated with particular data item contents.  They may be specified in a number of different methods, but they must change if any part of a data item changes. Fingerprint size should not exceed the data item size. It may be desirable to have the fingerprint size a predefined length, such as 4 bytes. If the data item size is smaller than the predefined fingerprint size, it is not desirable to create fingerprints for the data item.  Page 13 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Fingerprints are compared to detect if particular data items have changed, and may contain additional information, such as details of what has changed. Both the DS Client and the DS Server MUST support fingerprints. The sending of fingerprints is optional. During the synchronization, the DS Client MAY send fingerprints to the DS Server for data item comparison purpose, and the DS Client MAY send the data items directly. Fingerprints are always transmitted as paired values – ID and fingerprint.   5.2.1 Fingerprint Generation Method Basically, there are two ways to generate fingerprints. The first, the client generates fingerprints for the data item contents and sends them to the server. The second, both the client and server generate the fingerprints for the data item contents separately. How to choose a specific method is based on the fingerprint characteristic information. Client generated fingerprints SHOULD be used. For a particular data object, if part of the data item content is unique and can be used as fingerprints for comparison purpose, mutually generated fingerprints MAY be used. 5.2.1.1 Client Generated Fingerprints In this case, fingerprints are defined in a client specific fashion.  The client can store the fingerprints with the data item contents or the client can generate the fingerprints in real time, that is, just before the client determines to send fingerprints to the server.  The associated fingerprints MUST be re-generated if the data item contents are modified on the client side. After receiving the client generated fingerprints, the server SHOULD store the received fingerprints with the data items. Once the server modifies (Add / Update / Delete) some data items, the associated fingerprints MUST be treated as opaque values by the server, and the associated fingerprints can be deleted or marked as “invalid” or reset. If the server reset the fingerprints, the reset value MUST be unique and does not conflict with other valid fingerprint values. If the server marks the fingerprints as “invalid”, the server SHOULD keep the old values of the fingerprints. The server can compare each received fingerprint sent by client for a particular data item with the stored fingerprint on server side to determine if the data item has been changed. If the fingerprints are unique, then the received fingerprints MAY be compared agaist all the available fingerprints as a form of duplicate detection in case the data item identifiers are not valid (IDValidity). In case that the server marks the fingerprints as “invalid” and keeps the old values of the fingerprints: \u0001\u0001\u0001\u0001 If the client sends an unchanged fingerprint for one data item, the server can identify that the client has not changed the item, but the server has, and thus the server does not need to receive the data item from the client. \u0001\u0001\u0001\u0001 If the client sends a new fingerprint for one data item, the server can identify that the client has changed the item since the last time it was in sync, and the server has changed it, and thus the server needs to receive the data item from the client to be able to merge the changes.  5.2.1.2 Mutually Generated Fingerprints  In some situations, usually specific to a particular data object type, part of the data item content can be used as fingerprints. For example, a zip file already contains a CRC (Cyclic Redundancy Check) for each file within it, so it is easy to retrieve / generate a consistent value. In this case, the fingerprints can be generated by the client and by the server with the same result. If the client or server modified the data item, the client or server MUST re-generate the fingerprint.  It is expected that this method will only apply if it is fully specified in a data object definition. 5.2.2 Fingerprint Generation Algorithm                                        (Informative) The DS Client and DS Server MAY choose the fingerprint generation algorithm according to the predefined local policy.   Page 14 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Some possible fingerprint generation algorithm choices are shown below. 5.2.2.1 Changed Flag Clients may choose to implement their fingerprint calculation as a simple changed (or dirty) flag.  In this case, the fingerprint would be a constant value (such as 0), to indicate that the data item has not changed since the last sync.  If the data item changes, the fingerprint would be changed (perhaps to another constant value, such as 1).  When the fingerprint of a data item is compared with its previous value, the fact that it has changed can be detected, allowing that particular data item to be transferred during a sync session. Advantages include that it is simple to calculate, and requires minimal client storage. Drawbacks include that flags must be maintained per server, or else when syncing to a different server, the changed state will be unknown, and thus all data items must be transferred.  Preserving the accuracy of the flag across device resets (that do not wipe data) may also be an issue.  Additionally, software changes may be required to properly record when changes occur. 5.2.2.2 Changed Count Clients may choose to implement their fingerprint calculation as a simple count of how many times a data item has changed.  Each time a data item is changed, the count can be incremented.  When the fingerprint of a data item is compared with the value from a previous sync, that fact that it has changed can be detected, allowing that particular data item to be transferred during a sync session. Advantages include that it is simple to calculate, and requires minimal client storage. Drawbacks include slightly larger storage requirements than a simple flag, and that preserving the accuracy of the value across device resets (that do not wipe data) may also be an issue.  Additionally, software changes may be required to properly record when changes occur. 5.2.2.3 Hash Clients may choose to implement their fingerprint calculation as some kind of hash function.  When the fingerprint of a data item is compared with the value from a previous sync, that fact that it has changed can be detected, allowing that particular data item to be transferred during a sync session. Advantages include that it is specific to the data item, and thus is not affected by device reset.  It also may be calculated as needed if detection of changes when they occur is not feasible.  Clients typically support at least an MD5 hash already. Drawbacks include slightly larger storage requirements than a simple flag, and that it is likely to be more computationally intensive than simpler methods. 5.2.2.4 Sub-Item specific Clients may choose to implement their fingerprint calculation in a manner to allow detection of what pieces of a data item has changed, such as a flag per field (or other sub-item).  When the fingerprint of a data item is compared with the value from a previous sync, that fact that it has changed can be detected, as well as what sub-items have changed.  This allows field level updates to be performed, rather than requiring the entire record to be transferred. Note that because the fingerprint is only generated by the client, the client will only be able to detect if the entire data item has changed on the server.  This may lead to certain inefficiencies, such as situations where the data on the server will override the data on the client, and the client will not be able to determine if the changes on the client will be relevant. Advantages include that field level updates may be used. Drawbacks include slightly larger storage requirements than a simple flag, and that it is likely to be more computationally intensive than simpler methods.  It may also have some of the drawbacks of simpler functions, in that there may be requirements to record when changes occur, and issues across device reset.  Page 15 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 5.3     Change Log Information This protocol requires that DS Client and DS Server are able to keep tracks of changes that have happened between two sync processes for one datastore. i.e., they are responsible for maintaining the change log information about the modifications associated with data items of a datastore. The types of the modifications can be e.g., replace, addition, and deletion. This protocol does not specify in which format this change log information is maintained. However, when synchronization is started, the DS Client or DS Server MUST be able to specify, which data items have changed. To specify the changed data items, the unique identifiers are used. To indicate the type of a modification, the different sync commands (e.g., Replace) MUST be used. 5.4     Multiple devices If a device synchronizes data items with multiple devices, the change log information MUST be able to indicate all modifications since a previous synchronization with each device. This allows the data items in different devices to be kept up-to-date. When synchronizing multiple DS Clients with the same DS Server, the DS Server MUST maintain different ID mapping tables for different DS Clients. If the DS Server stores only one set of data items for different DS Clients, the GUIDs of the data items on the DS Server for each DS Client MAY or MAY not be the same. If the DS Server uses different GUIDs for the same data item to different DS Clients, the DS Server MUST be able to know that the different GUIDs refer to the same data item. For the client generated fingerprints, the DS Server SHOULD store fingerprints of the data items separately for each DS Client if the fingerprint generation algorithms of multiple DS Clients are different. In the case that the same fingerprint generation algorithm is used and the fingerprints generated for the same data item are the same, the DS Server MAY store only one set of fingerprints for different DS Clients. The DS Server MAY use the stored fingerprints received from one DS Client to compare with the fingerprints received from an other DS Client in subsequent synchronizations with different DS Clients. If the received fingerprint from the DS Client for the same data item is detected to be the same as the stored fingerprint on the DS Server, then the data item and the associated fingerprint does not need to be sent by the DS Client.  For mutually generated fingerprints, the DS Server SHOULD use the same set of fingerprints to all DS Clients in the multiple devices synchronization environment if the fingerprint generation algorithms of multiple DS Clients are the same.  For both client and mutually generated fingerprints, the DS Server may have knowledge of the fingerprint generation algorithms of multiple DS Clients, but the mechanism is out of scope of OMA DS enabler.  5.5     Usage of Sync Anchors 5.5.1 Sync Anchors for Datastores To enable sanity checks of synchronization, this protocol uses sync anchors (See Definitions) associated with datastores (e.g., a calendar datastore). There are two sync anchors, Last and Next (See [DSSyntax]), which are always sent at the initialization of sync. The Last sync anchor describes the last event (e.g., time) when the datastore was synchronized from the point of sending device and the Next sync anchor describes the current event of sync from the point of sending device. Thus, both the DS Client and the DS Server send their own anchors to each other. The sync anchors are sent within the SyncAlert operation by using the Syntax Schema as defined by the DS Syntax specification. The receiving device MUST echo the Next sync anchor back to the transmitting device in the Status for the SyncAlert command. The utilization of sync anchors is implementation specific but in order to enable the utilization, the Next sync anchor of the other device needs to be stored until the next synchronization. The DS Server MUST store the Next sync anchor sent by the DS Client to enable this utilization. If the device stores the Next sync anchor, it is able to compare during the next synchronization whether the sync anchor is the same as the Last sync anchor sent by another device. If they are matching, the device is able to conclude that no failures  Page 16 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] have happened since last sync. If they are not matching, the device can request a special action from another device (e.g., recovery sync). The stored sync anchors MUST NOT be updated before the synchronization process is finished. The synchronization process is finished after a device has finished the last step, that is, Pkg #5 for the DS Client or Pkg #6 for the DS Server, and the synchronization was successful on the Sync command level (i.e. no other than 200-class statuses has been returned for Sync commands). Also if the session is ended, the transport level (directly under SyncML level) communication has to be properly ended before synchronization can be seen as finished. If the communication between synchronizing devices is not ended properly according to transport level specification, devices MUST NOT update their sync anchors.  5.5.1.1 Example of Datastore Sync Anchor Usage In this example, a sync client and server synchronize twice (sync process #1 and #2) with each other. After the sync process #1, the persistent memory of the sync client is reset. Because of that, the datastore anchors do not match at the sync process #2, the sync server notifies this, and it initiates the slow sync with the client. The sync process #1 is started at 10:10:10 AM on the 10th of October 2001. The previous synchronization (before the sync process #1) was started at 09:09:09 AM on the 9th of September 2001. At this synchronization process, the recovery sync is not initiated because the sync anchors match. I.e., the sync server has the sync event (09:09:09 AM on the 9th of September, 2001). The sync process #2 is started at 11:11:11 AM on the 11th of November 2001. Because the memory of the sync client was reset after the sync process #2, the sync server initiates the recovery sync. In the figure below, both the sync processes are depicted. Only the initialization phases and the client sync anchors are shown in the figure.  Page 17 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]  OMA DS Client OMA DS Server Pkg #1: Last (2001-09-09T09:09:09Z), Next(2001-10-10T10:10:10Z) Pkg #2: OK Sync Process #1 The Sync Server has stored the client sync event (09:09:09 AM, 9/9/2001). ... Sync Process #1 completed, the sync server updates the sync anchor. The Sync Server has stored the client sync event (10:10:10 AM, 10/10/2001). The persistent storage of the client is reset. Sync Process #2 Pkg #1: Last (0000-00-00T00:00:00Z), Next(2001-11-11T11:11:11Z) Pkg #2: Refresh required ('508') ... The sent and the stored anchors do not match.  Figure 1 - Example of Sync Anchor Usage 5.5.2 Sync Anchors for Data Items This protocol does not specify the functionality to transfer the sync anchors associated with individual data items.   5.6     ID Mapping of Data Items This protocol is based on the principle that the DS Client and the DS Server can have their own IDs for data items in their datastores. These IDs MAY or MAY NOT match with each other. The DS Client uses local unique identifier (LUID) to identify data items, and the DS Server uses globally unique identifier (GUID) to identify data items. Usually, GUID is larger than LUID. Because the IDs can be different, the DS Server MUST maintain the ID mapping table for data items. That is, the DS Server knows which LUID and which GUID points to the same data item. Figure 2 shows an example of an ID mapping table after synchronization. In this example the mapping table in the DS Server is depicted as a separate from the actual datastore.  Page 18 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]    Client Device    Client Database: LUID Data 11 Car 22 Bike 33 Truck 44 Shoes           Server Device  Server Database: GUID Data 1010101 Car 2121212 Bike 3232323 Truck 4343434 Shoes  Server Mapping Table: GUID LUID 1010101 11 2121212 22 3232323 33 4343434 44    Figure 2 - Example: ID Mapping of Data Items The LUIDs MUST be assigned by the DS Client. This means that even if the DS Server adds an item to the DS Client, the DS Client assigns a LUID for this item. In this case, the DS Client returns the LUID of the new item to the DS Server. The Map operation is used for this. After the Map operation is sent by the DS Client, the DS Server is able to update its mapping table with the client LUID. When a DS Server is adding a new item to a DS Client, it MUST NOT send its actual GUID if the size of the actual GUID is exceeding the maximum size of the temporary GUID defined by the DS Client. If the actual GUID size exceeds the maximum size, the DS Server MUST use a smaller temporary GUID when adding an item to the client. The maximum size of the temporary GUID is defined in the device information document of the DS Client. If the DS Server has modified an existing item (i.e., an item which is on both the devices), the DS Server MUST identify the item by using the client LUID for this item, when the modification (e.g., replace or deletion) is synchronized with the DS Client. In the case of the client modifications, items are also identified with LUIDs, when the modifications are sent to the DS Server. The DS Server can map a LUID to its own GUID by utilizing the mapping table. 5.6.1 Caching of Map Operations After a DS Server has requested one or more additions to be done by the DS Client, and the DS Client has completed these additions to its datastore and allocated LUIDs for them, the DS Client MAY cache the Map operations associated with these LUIDs. The DS Client MAY cache the Map operations, if the DS Server has explicitly indicated that it does not require a response to its sync message. However, the DS Client is always allowed to send the Map operations back to the DS Server immediately after adding the items to the DS Client datastore. This is the case even if the DS Server has indicated that it does not require a response. If the map items are cached, the Map operations are sent back to the DS Server at the beginning of a subsequent synchronization session (in Pkg #3 from the DS Client to the DS Server). That is, the DS Server MUST receive the Map operations before it is able to process any client updates related to the items with which the Map operations are associated. If the DS Server has the control of a transport protocol (e.g., acting as an OBEX client), it MUST always request a response to the Sync command, which it has sent to the DS Client. Thus, the DS Server MUST NOT disconnect before it has got a response to the Sync command from the DS Client.  Page 19 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 5.7     Conflict Resolution Conflicts happen because of modifications on the same items on the server and the client datastores. (For example the same calendar item has been manually updated on the both sides.) In general, the client sends the conflict detection data to the server, and the server performs the conflict detection and resolution according to the pre-configured conflict resolution policy. After conflict resolution, the server sends back the Status command to the client to indicate the conflict resolution result. After that, the server and the client can synchronize the conflicted data according to the conflict resolution result. There are multiple policies to resolve the conflicts and the DS Syntax protocol provides the status codes (See \"Response Status Codes\" chapter in [DSSYNTAX]) for some common policies. The table below shows four common policies and the corresponding server and client behaviors: Policy Server behavior Server wins Server sends back the server side modified data item to the client. Client wins Server replaces the server side data item with the received client data item. Merge Server merges the client and server instances of the data item. In addition, server will send a Replace command to the client with the merged data. Duplicate Server creates in the server datastore a duplication of the client data item. In addition, server will send an Add command to the client with the duplicate data item. The example below depicts a case that the server sends a status to the client. <Status CmdID=\"1\" MsgRef=\"1\" CmdRef=\"2\" Cmd=\"Replace\" Code=\"208\"/> <!-- Conflict, originator wins --> Although the server is in general assumed to include the conflict resolution functionality, the possibility that the client would also provide the conflict resolution functionality is not excluded (See Section 10.10). If the client desires, the DS Client MAY retrieve the data items from the DS Server and perform conflict resolution. This will be left to the implementation of the DS Client. The administration, and how the conflict resolution policy is configured, is out of the scope of this protocol and the DS Syntax protocol. 5.8     Identifiers Identifiers in OMA DS, such as in the Source or Target elements, can be a combination of URI as defined by [RFC2396], URN as defined by [RFC2396] or UID. UID is the unique identifier for the data item. For the DS Client, UID is the LUID (Local Unique Identifier) and for the DS Server, UID is the GUID (Global Unique Identifier). In OMA DS, all URI and URN values are specified as parsable character in elements or attributes. If URI scheme or URN scheme is used, the DS Client and DS Server MUST specify a valid URI or URN value using the appropriate URI scheme or URN scheme. The addressing scheme on the transport level (e.g. HTTP) is independent from the addressing scheme used at the data sync protocol layer and the two schemes do not need to match. For further information about URI and URN, please refer to [RFC2396].  The following is a list of common URI schemes: URI Scheme Type Description HTTP Hypertext Transfer Protocol OBEX IrDA Object Exchange Protocol WSP Wireless Session Protocol Table 1 – Common URI Schemes The following is a list of common URN schemes: URI Scheme Type Description IMEI International  Mobile  Equipment  Identifier  [IMEI].  The  IMEI  URN  specifies  a  valid,  15  digit  Page 20 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] IMEI. The format is ‘IMEI: ###############’ ESN Electronic Serial Number. The ESN URN specifies a valid, 8 digit ESN.  The format is ‘ESN: ########’ MEID Mobile  Equipment  Identity.  The  MEID  URN  specifies  a  valid,  15  digit  MEID.  The  format  is ‘MEID: ###############’ Table 2 – Common URN Schemes Other URI or URN schemes MAY be used as well. 5.9     Hierarchical URI Construction This section illustrates the URI construction syntax. The following figure shows an example of hierarchy.   Figure 3 - Example of hierarchy In hierarchical manner, all the nodes MUST be uniquely addressed with an URI. A node can be a datastore name or a data item identifier. For datastore node, the datastore name is the client datastore name and it MUST be unique in the device. For data items, the node identifiers constructed in URI MUST be the UID (Unique Identifier). For both client and server, the UID is LUID (Local Unique Identifier). Any data object without a LUID can not be addressed. URI used in OMA DS SHOULD be treated and interpreted as case sensitive. The URI for a node is constructed by starting at the device root and can be addressed using absolute URI or relative URI. Within the absolute URI for a node, the root node MUST be ‘.’ and the datastore node name MUST follow the root node and be delimited by ‘/’ from the root node. There MUST be only one datastore node in the URI.  The absolute URI for a node MUST be constructed by starting at the root and, as the tree is traversed down to the node in sequence, each node name is appended to the previous ones using “/” as the delimiting character. If the Base URI is presented in the context, the relative URI SHOULD be used for convenience. For the MP3 folder and M1 data item in the tree above, a DS Client or DS Server would present the addresses as ‘./Macy/02’ and ‘./Macy/02/08’ respectively.  There are two kinds of nodes: interior node and leaf node. The interior node is a container. A container could be a datastore, data item or logical folder which contains other containers or leaf nodes.  The following restrictions on URI syntax are intended to simplify the parsing of URI. • A URI MUST NOT end with the delimiter \"/\". Note that this implies that the root node MUST be denoted as \".\" and not \"./\". • A URI MUST NOT be constructed using the character sequence \"../\". The character sequence \"./\" MUST NOT be used anywhere else but in the beginning of a URI. • A node identifier in the URI MUST escape the reserved characters described in [RFC2396].  Page 21 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]  5.9.1 Hierarchical Structure Exchange In order to effectively fulfil data store partial sync, the DS Client or Server should be able to retrieve relevant parts of the hierarchical structure of a datastore in the other side. With knowledge of the hierarchical structure, the DS Client or Server would be able to specify a particular node as the start point on both sides and hence effectively perform data store partial sync.  5.9.1.1 Request for hierarchical structure information The DS Client or Server can use the Get command with an attribute appending in the URI to retrieve the hierarchical structure information. The attribute is added to the URI specified in the Item element inside the Get command. There are three kinds of attributes: All_Nodes, Direct_Child_Nodes, Interior_Nodes. The following table shows the formats and meanings for the Get command and the URI in it with the different attributes:  Format Meaning GET <URI>?list= All_Nodes Retrieve the hierarchical structure information for all the nodes under the specified URI GET <URI>?list= Direct_Child _Nodes Retrieve the hierarchical structure information for all the direct child nodes under the specified URI GET <URI>?list= Interior _Nodes Retrieve the hierarchical structure information for all the interior nodes under the specified URI The example below depicts a case that the server retrieves the client’s hierarchical structure information for all the nodes: <Get CmdID=\"4\"> <Item> <TargetClientURI>./Macy/02?List=All_Nodes</TargetClientURI> </Item> </Get> 5.9.1.2 Response carrying hierarchical structure information The recipient side of DS Server or Client MUST send the hierarchical structure information related to the URI specified by the sender. The recipient SHALL return only the URIs of the requested nodes, without the content of the nodes. Requested information from the node (URI in the Get command with Struct attribute) is embedded into an Item inside a Results command. Meta MUST be used to indicate the Type and Format of the node, unless the Type and Format have the default values. The SourceClientURI/TargetClientURI MUST indicate the URI of the node.  The hierarchical structure information from the requested node can be included into multiple Item elements inside a Results command or there can be multiple Results commands with single Item.  According to Figure 3, the partial data store specified by URI ‘./Macy/02’ is as the following:   Page 22 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]  Figure 4 - Example of hierarchy According to the above structure, for the retrieval request example, specified in the above section, DS Client returns the hierarchical structure corresponding to the specified URI in Results element as the following: <Results CmdID=\"5\" CmdRef=\"4 \"> ... <Item>  <SourceClientURI>./Macy/02</SourceClientURI> <Meta Format=\"xml\" Type=\"application/vnd.omads-folder\"/> </Item> <Item> <SourceClientURI>./Macy/02/08</SourceClientURI> <Meta Format=\"xml\" Type=\"application/vnd.omads-file\"/>       </Item> <Item> <SourceClientURI>./Macy/02/09</SourceClientURI>     <Meta Format=\"xml\" Type=\"application/vnd.omads-file\"/> </Item> </Results>  For each Item element: 1) The SourceClientURI/TargetClientURI element specifies the node’s absolute URI; 2) The Type attribute specifies the node’s MIME type.  5.10   Addressing There are five types of addressing which is illustrated by the following figure and further described by the following sections:  Page 23 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]  Figure 5 - Addressing Types Illustration 5.10.1    DS Client and DS Server Addressing The DS Client MUST be addressed either using absolute URI or an URN. The DS Server MUST be addressed using absolute URI. The appropriate URI scheme or URN scheme MUST be used and the URI or URN MUST be valid to correctly address the DS Client or Server. Example 1: DS Server Addressing using URI <SourceServerURI>http://www.openmobilealliance.org/sync-server</SourceServerURI>  Example 2: DS Client Addressing using URN <SourceClientURI>IMEI:493005100592800</SourceClientURI>      5.10.2    Usage of RespURI and Re-direction Status Codes The DS Client MUST support receiving the RespURI element as specified in [DSSYNTAX]. After receiving it, the DS Client MUST send all subsequent messages against the address specified in RespURI element.  The support of the re-direction related status codes is OPTIONAL.  5.10.3    Datastore Addressing The datastore within DS Client or Server MUST be addressed using datastore URI.  The datastore URI SHOULD be represented using a textual name. The character ‘/’ SHOULD NOT be used in the datastore name. The datastore itself MUST NOT have hierarchy structure.  For example, in the URI ‘./ContactDB/101’, the ‘./ContactDB’ will be considered as the datastore URI. Example 1: Contact Datastore Addressing using URI: <Sync>    ......    <TargetClientURI>./ContactDB</TargetClientURI>    ...... </Sync>   Page 24 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 5.10.4    Interior Node or Leaf Node Addressing The interior node or leaf node is the data item or logical folder which MUST be addressed either using the relative URI or the absolute URI as described in section 5.8. Example 1: Interior Node or Leaf Node Addressing using UID <Item>    ......    <SourceClientURI>101</SourceClientURI>    ...... </Item> Example 2: Interior Node or Leaf Node Addressing using URI <Sync>     .....     <TargetClientURI>./Macy/101</TargetClientURI>     ...... </Sync>  5.10.5    Device Information Addressing 5.10.5.1 External Device Information Addressing If the device information is stored in an external storage, the device information MUST be specified and retrieved based on absolute external URI. The external URI can be stored as the value of DevInf/ExtURI element [DEVINF]. The sender can send the external URI as the value of DevInf/ExtURI element, and the recipient can retrieve the external device information document based on the external URI received in DevInf/ExtURI element. The appropriate URI scheme MUST be used for the external device information URI and the URI MUST be valid to correctly address the external device information document. Note: The retrieval mechanism can be XCAP [RFC4825] or others, and this is out of scope of OMA DS enabler.  Example 1: Device Information Addressing using URI <Put CmdID=\"2\">    <Meta Type=\"application/vnd.syncml-devinf+xml\"/>    <Item>      <SourceClientURI>./devinf20</SourceClientURI>      <Data><![CDATA[        <DevInf xmlns=’syncml:devinf’> <ExtURI>http://www.vendorwebsite.example.com/deviceinfo/model.xml</ExtURI> <DevCap> ... </DevCap> <DataStore> ... </DataStore> </DevInf>]]> </Data>    </Item> </Put> 5.10.5.2 Internal Device Information Addressing If the device information is stored in the DS Client or DS Server, it MUST be addressed using absolute URI. The absolute URI MUST start from the device information datastore URI, and the absolute URI for an Element MUST be constructed by starting at the root Element specified in [DEVINF] specification.  For example, in the specified URI, ‘./devinfo20/DevInf/DataStore/CTCap/Property/PropParam’, ‘./devinfo20’ is the device information datastore URI, and ‘/DevInf’ is the root Element of the device information, and ‘/DataStore/CTCap/Property/PropParam’ is the URI relative to the root Element.  Page 25 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] The DS Client or Server should be able to retrieve parts of the device information in the other side. The URI can be used to indicate one Element or Attribute specified in [DEVINF] specification. If the URI is appointed to one Element within the Get command, all the sub-Elements and Attributes belonging to the specified Element MUST be returned.  In case that there are multiple Elements or Attributes with the same name, the condition matching expression can be used to select the specified one. If no condition matching expression is present, all the Elements or Attributes with the same name will be returned. The Get command and the URI in it have the following format:  GET <URI>[Element=’Element_Value’]  Then the URI is addressed with the condition that whose sub-Element has the specified element value. Example 1: Retrieve the selected DataStore information whose SourceRef is ‘./contacts’ <Get>     ......     <TargetClientURI> ./devinfo20/DevInf/Datastore[SourceRef=’./contacts’] </TargetClientURI>     ...... </Get>  Example 2: Retrieve the selected Property information whose DataStore/SourceRef is ‘./Contacts’ and the PropName is ‘PHOTO’ <Get>     ......     <TargetClientURI> ./devinfo20/DevInf/Datastore[SourceRef=’./Contacts’]/CTCap/Property[PropName=’PHOTO’]  </TargetClientURI>     ...... </Get>  5.11   Sync Scope Indication The synchronization scope is specified by the target and source address within the SyncAlert element. The target and source address could point to a node as described in section 5.10.  If multiple target and source addresses need to be synchronized within one session, the DS Client or DS Server MUST use SyncAlert command for each target and source pair to negotiate the sync types. Accordingly the DS Client or Server MUST use Sync command for each target and source pair to convey the synchronization data. Example 1: Initiate to synchronize a datastore <SyncAlert CmdID=\"1\"> <Anchor Last=\"234\" Next=\"276\" /> <Cred>.........</Cred> <TargetServerURI>./ServerMacy</TargetServerURI> <SourceClientURI>./ClientMacy</SourceClientURI> <SyncType Direction=\"fromClient\" Behaviour=\"Preserve\"/>     </SyncAlert> Example 2: Initiate to synchronize a part of a datastore <SyncAlert CmdID=\"1\"> <Anchor Last=\"234\" Next=\"276\" /> <Cred>.........</Cred> <TargetServerURI>./ServerMacy/1000002</TargetServerURI> <SourceClientURI>./ClientMacy/02</SourceClientURI> <SyncType Direction=\"fromClient\" Behaviour=\"Preserve\"/>      Page 26 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] </SyncAlert>  5.12   Exchange of Device Information This protocol provides the functionality to exchange the device information during the initialization of a data synchronization session (See Chapter 8) or during a separate device information exchange session. The exchange can be requested by the DS Client or the DS Server. During a separate device information exchange session, the DS Client or the DS Server can exchange their device information without performing data synchronization. During a data synchronization session or device information exchange session, the DS Client or the DS Server can use the Put command to send its device information to the other side and use the Get command to retrieve the other side’s device information.  The DS Client or Server MAY store their device information externally (see Section 5.9.5.1). If DS Client or DS Server stores their device information externally, they MUST also provide default device information internally. If there is no active session, the DS Server can initiate a DS Notification message to the DS Client, indicating the DS Client to initiate a session to send all or updated device information. Also, the DS Server can use a DS Notification message to indicate the DS Client to initiate an empty session, and the DS Server can use the Get command to retrieve the device information from the DS Client. The DS Client MUST send its device information to the server during the first synchronization session or the first device information exchange session.The DS Client SHOULD send the updated device information when the device information has been updated in the DS Client since the last session. The DS Client MUST also be able to transmit its device information if it is asked by the Server. The DS Client SHOULD also support the receiving of the Server device information. The DS Server MUST be able to send its device information if requested by the DS Client. The DS Server MUST support the functionality of receiving and processing the Client device information when sent by the DS Client or requested by the DS Server itself. Implementation consideration. The exchange of the device information can require that a quite large amount of data is transferred over the air. Thus, the devices SHOULD avoid requesting the exchange at every time when sync is initialized. In addition, the devices SHOULD consider whether they need to send all device specific data if it is clear that another device cannot utilize it. E.g., if the client indicates that it does not support the vCard 3.0 content format, the server SHOULD NOT send the supported properties of vCard 3.0 if it supports it. 5.13   Device Memory Management This protocol with the Device Information Schema provides possibility to specify the dynamic memory capabilities for datastores of a device or for persistent storage on a device. The capabilities specify how much memory there is left for usage. The dynamic capabilities can be specified every time when the synchronization is done. The static memory capabilities are exchanged when the sync initialization is done (See Chapter 5.12 and Chapter 8). Although the sending of persistent memory capabilities is optional for both DS Clients and DS Servers, DS Clients SHOULD send them and DS Servers MAY send them. The usage of different types of memory capabilities is dependent on the persistent storage model on a device. Below there is an example how the dynamic memory capabilities of a calendar datastore on a device are represented, when the Sync command is sent. <Sync CmdID=\"1\" FreeID=\"81\" FreeMem=\"8100\" >    <TargetServerURI>./calendar/james_bond</TargetServerURI>    <SourceClientURI>./dev-calendar</SourceClientURI>     <Replace>       ...    </Replace>    ... </Sync>  Page 27 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] The datastore-specific FreeID and FreeMem attributes in the Sync command MUST be associated with the source datastore specified in the SourceClientURI / SourceServerURI element of the Sync command.  5.14   Multiple Messages in Package This protocol provides the functionality to transfer one SyncML package in multiple SyncML messages. This might be necessary if one SyncML package is too large to be transferred in one SyncML message. This limitation might be caused e.g., by the transport protocol or by the limitations of a small footprint device. If a SyncML package is transferred in multiple SyncML messages, the last message in the package MUST include the Final element (See [DSSYNTAX]).  Other messages belonging to the package MUST NOT include the Final element.  The Final element can only be included when all necessary commands belonging to a specific package have been sent.  The Final element MUST NOT be included if the other end has not closed the preceding package. E.g., if the server is still sending the package #4 to the client, the client MUST NOT close the package #5 prior to receiving the last message belonging to the package #4. The exclusion of the Final element is not to be used to indicate that a logical phase is not completed if an error occurs. If a device receives a message in which the Final flag is missing and a Sync element for a datastore is included, the device MUST be able to handle the case that in the next message, there is another Sync element for the same datastore. The device, which receives the SyncML package containing multiple messages, MUST be able to ask more messages. This happens by sending an Alert command with a specific alert code, 222 back to the originator of the package, or if there are other SyncML commands to be sent as a response, the Alert command with the 222 alert code MAY be omitted. After receiving the message containing the Final element, the Alert command MUST NOT be used anymore. More messages are not desirable if errors, which prevent the continuation of synchronization, have occurred. The recipient of a package MAY start to send its next package at the same time when asking more messages from the originator if this makes sense. Thus, in Chapters 9 - 11, it is specified which commands or elements are allowed to be sent before receiving the final message belonging to a package. Below, there is depicted an example that the client is sending Package #3 in multiple messages (2 messages) and the server also sends Package #4 in multiple messages (2 messages).  Page 28 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]  OMA DS Client OMA DS Server Pkg #3, Msg #1: Status for Init, Some of client modifications Pkg #4, Msg #1: Status for client mod's, Alert for next msg Pkg #3, Msg #2: Rest of client mod's, Alert for next msg, Final Pkg #4, Msg #2: Status for client mod's, Server mod's, Final Pkg #5, Msg #1: Status for server mod's, (Map operation) ... ...  Figure 6 : Example of Sending Multiple Messages in a Package 5.15   Large Object Handling While synchronizing, object reception can be limited by two factors: the maximum message size the target device can receive (declared in MaxMsgSize attribute), and the maximum object size the target device can receive (declared in MaxObjSize attribute). This feature provides a means to synchronize an object whose size exceeds that which can be transmitted within one message (e.g. the maximum message size – declared in MaxMsgSize attribute – that the target device can receive). This is achieved by splitting the object into chunks that will each fit within one message and by sending them contiguously. The first chunk of data is sent with the overall size of the object and a <MoreData/> signaling that more chunks will be sent. Every subsequent chunk is sent with a <MoreData/> tag, except from the last one: the final chunk is sent with no <MoreData/> tag. The target device, having received the final chunk, has to re-construct the object and consequently acts as it had received it in one piece (e.g. apply the requested command).  The appropriate status MUST then be sent to the originator. A command on a chunked object MUST implicitly be treated as atomic, i.e. the recipient can only commit the object once all chunks have been successfully received and reassembled.  Note: This mechanism does not allow sending multiple large objects in the same time. A new data object MUST NOT be added by a sender to any message until the previous data object has been completed. If a data object is chunked across multiple messages, the chunks MUST be sent in contiguous messages. New Sync commands (i.e. Add, Replace, Delete or Copy) or new Items MUST NOT be placed between chunks of a data object.   5.15.1    Conformance statements: Clients SHOULD support receiving Large Objects and servers MUST support receiving Large Objects. Supporting Sending Large Objects is optional for both clients and servers. A client supporting receiving Large Object MUST declare the <SupportLargeObjs/> tag in its DevInf.  Supporting receiving or sending Large Objects implies conformance constraints for several tags.  TAGS:   Page 29 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] - SupportLargObjs  [DEVINF]  - MaxObjSize  [DSSYNTAX]  - MaxMsgSize [DSSYNTAX]  - Size [DSSYNTAX]    - MoreData [DSSYNTAX]  STATUS CODES AND ALERTS: - Status 213    Chunked item accepted and buffered [DSSYNTAX] - Alert 222   Next Message  [DSSYNTAX]  - Alert 223 End of Data for chunked object not received  [DSSYNTAX]  - Status 424  Size Mismatch [DSSYNTAX]  - Status 416 Request entity too large [DSSYNTAX] - Status 411 Size Required [DSSYNTAX]  If a device supports receiving Large Objects it MUST declare the maximum size of object (MaxObjSize attribute) it is capable of receiving as information within the SyncAlert or Sync command, as specified in [DSSYNTAX].  The device MUST also declare and fill the MaxMsgSize tag. This tag, also declared in SyncHdr element, specifies the maximum byte size of any response message to a given request. Knowledge of both MaxObjSize and MaxMsgSize allows to compute appropriate data chunk size.   5.15.2    Large Object exchange sequence: This section illustrates and details the process of Large Object Handling. The following figure depicts a normal flow when handling Large Objects between 2 entities: the \"Sending Large Object Device\" and the \"Receiving Large Object Device\". Note that these 2 entities can represent a Client or a Server: a Client can send Large Objects to a Server, but a Server can send also Large Objects to a Client.  Page 30 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Sending LO DeviceReceiving LO DeviceInitializationMsg #1: Sending LO Device sends its first chunk of data(contains <Size> and <MoreData/>)(Receiving LO Device Pkg contains <SupportLargeObjs/>, <MaxMsgSize> and <MaxObjSize>)Resp #1: Receiving LO Device ACK(Status 213 – « Chunked item accepted and buffered » and Alert 222 – « Next Message »)Msg #2: Sending LO Device sends its 2nd chunk of data(contains <MoreData/>)Resp #2: Receiving LO Device ACKSending of other chunks: same exchanges as Msg #2 / Resp #2Msg #n: Sending LO Device sends its last chunk of data(DOES NOT contain <MoreData/>)Resp #n: Receiving LO Device ACK(Appropriate Status)<Size> analysis<Size> comparison(Status 213 – « Chunked item accepted and buffered » and Alert 222 – « Next Message ») Figure 7 - Example of Sending a Large Object (normal case) Note 1: In the previous diagram, LO means \"Large Object\". Note 2: Please refer to the section 5.14 for the use of the Alert 222. Exchange of a Large Object can be summarized with the following sequence: 1. During initialization: 1.1. On the sending device side 1.1.1. Sending device SHOULD use knowledge of the recipient’s MaxMsgSize to determine at what size segmentation occurs.  1.2. On the receiving device side 1.2.1. Receiving device MUST NOT have specified SupportLargeObjs=\"false\" in its DevInf. It MUST also specify the value of its MaxMsgSize and its MaxObjSize. 2. When the first chunk of data is transmitted: 2.1. On the sending device side (Msg #1)  Page 31 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 2.1.1.  The sender MUST declare in the command element (e.g. Add, Replace) the overall size of the data element content that is going to be sent, using the Size attribute of a Meta element.  Note: The Size attribute MUST only be specified for the first chunk of data. 2.1.2. A <MoreData/> empty element MUST be added after the <Data> element. 2.2. On the receiving device side (Resp #1) 2.2.1. On receipt of a data chunk with the <MoreData/> element, the recipient MUST respond with a “Status 213 – Chunked item accepted and buffered” and ask for the next message using the Alert 222 mechanism as defined in section 6.9 Error case behavior: 1- If the Size exceeds the MaxObjSize of the recipient, the recipient MUST respond with a \"Status 416 - Requested size too big\" (the request failed because the specified byte size in the request was too big). The recipient MUST NOT commit the command.  2- If the recipient gets the first chunk with a <MoreData/> element, but no Size attribute, or non filled Size attribute, it MUST respond with a \"Status 411 - Size required\". The recipient MUST NOT commit the command. The sender MAY attempt to retransmit the entire data object. 3. When extra chunks of data are transmitted: 3.1. On the sending device side (Msg #2) 3.1.1. Meta and Item information SHOULD be repeated on each subsequent message containing chunks of the same data object.  3.1.2. A <MoreData/> empty element MUST be added after the Data element. 3.2. On the receiving device side (Resp #2) 3.2.1. On receipt of a data chunk with the <MoreData/> element, the recipient MUST respond with a “Status 213 – Chunked item accepted and buffered” and ask for the next message using the Alert 222 mechanism as defined in section 6.9 Error Case Behavior: If the recipient detects a new data object or command before the previous item has been completed (by the chunk without the <MoreData/> Element), the recipient MUST respond with an \"Alert 223 – End of Data for chunked object not received”. The Alert SHOULD contain the complete source and/or target information from the original command to enable the sender to identify the failed command. Note: a Status would not suffice here because there would not necessarily be a command ID to refer to. The recipient MUST NOT commit the new and original commands. The sender MAY attempt to retransmit the entire original data object. 4. When the last chunk of data is transmitted: 4.1. On the sending device side (Msg #n) 4.1.1. The last chunk of data MUST NOT be followed with <MoreData/> element. 4.2. On the receiving device side (Resp #n) 4.2.1. On receipt of the last chunk of the data object, the recipient reconstructs the data object from its constituent chunks. It MUST validate that the size of re-constituted object matches the object Size supplied in the Meta information by the sender, then apply the requested command. The appropriate status MUST then be sent to the originator.  Page 32 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Error case behavior: If the sizes do not match then a \"Status 424 – Size mismatch” MUST be sent and the recipient MUST NOT commit the command. The sender MAY attempt to retransmit the entire data object.  5.15.3    Large Object exchange sequence example: In this example the client sends a large object (for addition) to the server. The server has declared supporting Large Objects handling in its DevInf. Client initializes a sync session   <SyncML Version=\"2.0\">       <SyncHdr SessionID=\"272244708\" MsgID=\"1\" MaxMsgSize=\"3000\" >             <TargetServerURI>http://Syncserver.com/sync</TargetServerURI>             <SourceClientURI>IMEI_number</SourceClientURI>             <Cred>                   <Meta Format=\"b64\" Type=\"syncml:auth-basic\" />                   <Data>dGVzdDp0ZXN0cHc=</Data>             </Cred>       </SyncHdr>       <SyncBody>             <SyncAlert CmdID=\"1\" MaxObjSize=\"10000000\" >                   <!-- ... -->             </SyncAlert>             <Final/>       </SyncBody> </SyncML>  Server Response  <SyncML Version=\"2.0\">    <SyncHdr SessionID=\"272244708\" MsgID=\"1\" MaxMsgSize=\"30000\">             <TargetClientURI>IMEI_number</TargetClientURI>             <SourceServerURI>http://Syncserver.com/sync </SourceServerURI>    </SyncHdr>    <SyncBody>             <Status CmdID=\"1\" MsgRef=\"1\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"212\">                   <ServerURI> http://Syncserver.com/sync </ServerURI>                   <ClientURI>IMEI_number</ClientURI>             </Status>             <Status CmdID=\"2\" MsgRef=\"1\" CmdRef=\"1\" Cmd=\"SyncAlert\" Code=\"200\">                   <!-- ... -->             </Status>                                               <SyncAlert CmdID=\"3\" MaxObjSize=\"10000000\"> <!-- ... -->             </SyncAlert>             <Final/>    </SyncBody> </SyncML>  The client begins to send a large object  <SyncML Version=\"2.0\">       <SyncHdr SessionID=\"272244708\" MsgID=\"2\" MaxMsgSize=\"3000\"> <!-- ... -->       </SyncHdr>       <SyncBody>  Page 33 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]             <Status CmdID=\"1\" MsgRef=\"1\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"200\"> <!-- ... -->           </Status>             <Status CmdID=\"2\" MsgRef=\"1\" CmdRef=\"3\" Cmd=\"SyncAlert\" Code=\"200\"> <!-- ... -->             </Status>            <Sync CmdID=\"3\" >                 <!-- ... -->                   <Add CmdID=\"4\" >                         <Meta Type=\"application/vnd.omads-file+xml\" Size=\"2304\"/>                         <Item>                               <SourceClientURI>1001</SourceClientURI>                               <Data>                                  <!-- -->                                  <!-- Big Block Of Data Takes Place Here -->                                  <!-- -->                               </Data>                               <MoreData/>                         </Item>                   </Add>             </Sync>       </SyncBody> </SyncML>  Server response: Data chunk is accepted  <SyncML Version=\"2.0\">       <SyncHdr SessionID=\"272244708\" MsgID=\"2\">  <!-- ... -->       </SyncHdr>       <SyncBody>             <Status CmdID=\"1\" MsgRef=\"2\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"200\">                 <!-- ... -->             </Status>             <Status CmdID=\"2\" MsgRef=\"2\" CmdRef=\"3\" Cmd=\"Sync\" Code=\"200\">                   <!-- ... -->             </Status>             <Status CmdID=\"3\" MsgRef=\"2\" CmdRef=\"4\" Cmd=\"Add\" Code=\"213\">                   <!-- ... -->             </Status>             <Alert CmdID=\"4\" Code=\"222\">                   <Item>                         <Data>Next Message Please</Data>                   </Item>             </Alert>       </SyncBody> </SyncML>  Client sends the last chunk of the large object  <SyncML Version=\"2.0\">       <SyncHdr SessionID=\"272244708\" MsgID=\"3\" MaxMsgSize=\"3000\">             <!-- ... -->       </SyncHdr>       <SyncBody>             <Status CmdID=\"1\" MsgRef=\"2\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"200\">                   <!-- ... -->             </Status>             <Status CmdID=\"2\" MsgRef=\"2\" CmdRef=\"4\" Cmd=\"Alert\" Code=\"200\">                   <!-- ... -->             </Status>             <Sync CmdID=\"3\">  Page 34 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]                   <!-- ... -->                   <Add CmdID=\"4\">                         <Meta Type=\"application/vnd.omads-file+xml\"/>                         <Item>                               <SourceClientURI>1001</SourceClientURI>                               <Data>                                   <!-- -->                                   <!-- Large Object Ends Here -->                                   <!-- -->                               </Data>                         </Item>                   </Add>             </Sync>             <Final/>       </SyncBody> </SyncML>  Further interactions continue here and the examples are omitted.  5.16   Hierarchical synchronization Hierarchical synchronization consists in synchronizing a hierarchical data structure on a server and its equivalent on the client. A hierarchical data structure can be compared to a tree structure that is composed of: o Branches that are links between a node and its children o Nodes that contain the information : There are three kind of nodes :  - the root node which has no parent - interior node which has a unique parent  - leaf node which has no children  One of the most known tree structure is the filesystem where folders act as nodes and files as leaves Regarding OMA-DS protocol, hierarchical synchronization mechanism is based on the use of TargetClientParentURI, SourceClientParentURI or SourceServerParentURI element. The client uses SourceClientParentURI  to specify the LUID for the parent of the client's side item. Depending on the existence of the parent item on the client, the server will use TargetClientParentURI or SourceServerParentURI: - If the parent exists on the client , the server  MUST use the TargetClientParentURI tag that will contain the client's LUID for the parent of the server side's item - If the parent item doesn't exist on the client, the server MUST use the SourceServerParentURI tag that  will  contain  a  temporary  GUID  for  the  parent  of  the  server  side's  item.  This  case  occurs  when  the server send items that the client has not mapped yet (e.g. moving a file into a newly created folder) As an example we propose in the following a possible filesystem synchronization scenario We suppose the client and server are synchronized. Items mapping table is  Client's LUID Server's GUID Object name  Page 35 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 990  ABCD990 Urgent 995  ABCD995 Work 1000  ABCD1000 Image1.jpg 1001  ABCD1001 Pictures 1002  ABCD1002 Friends  After the last synchronization the following modifications were made on the client: - The folder \"NewFolder\" has been created at the root of the filesystem. - A file named \"NewDocument.doc\" has been created in the \"NewFolder\" folder - The file \"Image1.jpg\" has been moved to the \"Pictures\" folder  Regarding the server modifications made are: - A new folder \"ToBeDone\" has been created in the folder \"Work\" - A file \"ToDoList.doc\" has been created in the folder \"ToBeDone\" - Subfolder \"Urgent\" has been moved to \"ToBeDone\"  For those new resources the partial mapping table can be expressed as:  Client's LUID Server's GUID Object name  ABCD997 ToBeDone  ABCD998 ToDoList.doc 1003   NewFolder 1004   NewDocument.doc  A subsequent synchronization will produce the following package snippets: Package 3 : Client modifications <Sync CmdID=\"7\" >    <TargetServerURI>./FileSystem</TargetServerURI>    <SourceClientURI>./Files</SourceClientURI>    <Add CmdID=\"8\" >            <Meta Type=\"application/vnd.omads-folder+xml\"/>                        <Item>          <SourceClientURI>1003</SourceClientURI>          <SourceClientParentURI>/</SourceClientParentURI>          <Data> Data containing DataObjFolder should be placed here </Data>       </Item>    </Add>    <Add CmdID=\"9\">       <Meta Type=\"application/vnd.omads-file+xml\"/>         <Item>  Page 36 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]          <SourceClientURI>1004</SourceClientURI>          <SourceClientParentURI>1003</SourceClientParentURI>          <Data>Data containing DataObjFile should be placed here</Data>       </Item>    </Add>    <Move CmdID=\"10\">       <Meta Type=\"application/vnd.omads-file+xml\"/>       <Item>          <SourceClientURI>1000</SourceClientURI>          <SourceClientParentURI>1001</SourceClientParentURI>       </Item>    </Move> </Sync>  The client modification package contains: - An Add  command  with SourceClientParentURI  containing \"/\"  and SourceClientURI  \"1003\"  (creation of \"NewFolder\" at the root) - An Add  command  with SourceClientParentURI  containing  \"1003\"  and SourceClientURI  \"1004\" (creation of \"NewDocument.doc\" in the \"NewFolder\" folder) - A Move  command  with SourceClientParentURI  containing  \"1001\"  and SourceClientURI  \"1000\" (Moving of \"image1.jpg\" in \"Pictures\")  Package 4: server modifications  <Sync CmdID=\"17\">    <TargetClientURI>./Files</TargetClientURI>    <SourceServerURI>./FileSystem </SourceServerURI>    <Add CmdID=\"18\">       <Meta Type=\"application/vnd.omads-folder+xml\"/>       <Item>          <SourceServerURI>ABCD997</SourceServerURI>          <TargetClientParentURI>995</TargetClientParentURI>          <Data> Data containing DataObjFolder should be placed here </Data>       </Item>    </Add>    <Add CmdID=\"19\">       <Meta Type=\"application/vnd.omads-file+xml\"/>       <Item>          <SourceServerURI>ABCD998</SourceServerURI>          <SourceServerParentURI>ABCD997</SourceServerParentURI>          <Data> Data containing DataObjFile should be placed here </Data>       </Item>    </Add>    <Move CmdID=\"20\">       <Meta Type=\"application/vnd.omads-folder+xml\"/>       <Item>          <TargetClientURI>990</TargetClientURI>          <SourceServerParentURI>ABCD997</SourceServerParentURI>       </Item>    </Move> </Sync>  The server modifications package contains:  Page 37 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] - An Add command with TargetClientParentURI containing \"995\" (the client's LUID for the parent of the \"ToBeDone\" item) - An Add command with SourceServerParentURI containing \"ABCD997\" (Since the client has not mapped \"ToBeDone\" yet we use SourceServerParentURI and the server side's parent GUID of \"ToDoList.doc\") - A Move command with SourceServerParentURI containing \"ABCD997\" and TargetClientURI containing 990 (Moving \"Urgent\" to \"ToBeDone\")  5.17   Suspend and Resume of synchronization session Interruption can occur in two different ways: 1. User initiated interruption/Pause (Can also be viewed as an intentional pause):  This kind of interruption occurs when user requests to pause the current session and thereby resulting into a negotiation phase between client and server to pause the session.  In order to interrupt the sync session, the client MAY send a message containing ‘Interrupt Sync Session’ with no client side data items and MAY contain statuses to server’s data items. This message can be sent before receiving the complete package from the server.   2. Loss of network coverage or phone malfunction (Can also be viewed as an unintentional pause):  This kind of interruption can be due to loss of network coverage or phone malfunction or for other unknown reasons that lead to an immediate interruption of the sync session and thus not needing a special alert code for interruption.  The interruption MAY occur during any of the synchronization phases - initialization, or during synchronization, or during mapping phase. In case that the session is interrupted, the DS Client or DS Server SHOULD initiate recovery sync. 5.18   Busy Signaling If the server is able to receive the data from the client but it is not able to process the request(s) at a reasonable time after receiving the modifications from the client, the server SHOULD send information about that to the client. Note that this processing time is dependent e.g. on the transport protocol transferring SyncML messages. This happens by sending the Busy Status package back to the client. After the client has received a busy signal from the server, the client MAY ask for the sync results later or start the synchronization from the beginning. If the client starts the synchronization from the beginning its Last sync anchor MUST NOT be updated.  If the server has sent the busy status to the client and it does not get a request from the client (i.e., Result Alert), the server MUST assume that the client has stopped the synchronization and start the synchronization from the beginning. The server MUST NOT update its Last sync nor the client Next sync anchors. 5.18.1    Busy Status from Server Informing the client that the server is busy happens by sending the Busy Status package to the client. This can be sent before any package is completely received. The Busy Status package MUST NOT be used to return status information related to any individual data items or command which are in SyncBody of the client request. The requirements for the elements within the Busy Status package are:  Page 38 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 1. Mandatory elements within the SyncHdr element. 2. The Status element for the SyncHdr MUST be included in SyncBody. - The status code (101, in progress) MUST be returned within the Status for the SyncHdr command sent by the client.  3. The Final element MUST NOT be used for the message. Example of Busy Status package:  <SyncML Version=\"2.0\">    <SyncHdr SessionID=\"1\" MsgID=\"2\">       <TargetClientURI>IMEI:493005100592800</TargetClientURI>       <SourceServerURI>http://www.syncml.org/sync-server</SourceServerURI>    </SyncHdr>    <SyncBody>       <Status CmdID=\"1\" MsgRef=\"2\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"101\">          <!--Status code for Busy-->          <ServerURI>http://www.syncml.org/sync-server</ServerURI>          <ClientURI>IMEI:493005100592800</ClientURI>       </Status>    </SyncBody> </SyncML>  5.18.2    Result Alert from Client The result alert is sent to ask results to the last message which was sent to the server. This is done by sending a Result Alert package from the client to the server. A message within this package has the following requirements. 1. Mandatory elements within the SyncHdr element. 2. The Alert element MUST be included in SyncBody. There are the following requirements for this Alert element. - CmdID MUST be used. - The Item element is used to specify the server and the client device. - The Code attribute is used to include the Alert code. The alert code is ‘221’ (See [DSSYNTAX]). 3. The Final element MUST NOT be used for the message. If the server is still busy, when it receives this Result Alert from the client, it MUST again return the Busy Status with the ‘101’ status code back to client. The status code is associated with the SyncHdr and the Alert command sent by the client. Example of Result Alert package:  <SyncML Version=\"2.0\">    <SyncHdr SessionID=\"1\" MsgID=\"3\">       <TargetServerURI>http://www.syncml.org/sync-server</TargetServerURI>       <SourceClientURI>IMEI:493005100592800</SourceClientURI>    </SyncHdr>    <SyncBody> <!--Status for SyncHdr is omited here-->       <Alert CmdID=\"1\" Code=\"221\">          <Item>             <TargetServerURI>http://www.syncml.org/sync-server</TargetServerURI>             <SourceClientURI>IMEI:493005100592800</SourceClientURI>          </Item>       </Alert>  Page 39 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]    </SyncBody> </SyncML>  5.19   OMA DS Data Formats OMA DS not only provides for a common set of commands, but also identifies a small set of common data formats. The data formats provide a common set of media types for exchanging common accepted information, such as contacts, calendars and messages. Support for these data formats is mandatory for conformance to this specification. In addition to these common formats, OMA DS allows for the identification of any other registered format. OMA DS utilizes the MIME content type framework for identifying data formats, called MIME media types. 5.19.1    MIME Usage There are two MIME content types for the OMA Data Synchronization Message. The MIME content type of application/vnd.syncml+xml identifies the clear-text XML representation for the SyncML Message. The MIME content type of application/vnd.syncml+wbxml identifies the WBXML binary representation for the SyncML Message. Section 8 of this specification specifies the MIME content type registration for these two MIME media types. One of these two MIME content types MUST be used for identifying OMA Data Synchronization Messages within transport and session level protocols that support MIME content types. 5.20   Soft and Hard Data Deletion The SyncML Delete command provides the capability for a SyncML request to delete data from the recipient's data store. Two forms of deletion are supported. Normally, when a Delete command is specified, it conveys a request to completely delete the specified data from the recipient's data store. The deleted data SHOULD no longer be associated with the originator's synchronization data. This is the semantics of a \"Hard Delete\". In addition, SyncML provides support for a \"Soft Delete\" command.  The rationale for a \"Soft Delete\" is based on the possibility of limited storage resources in a client device. The data is deleted to free-up storage for other, higher priority data on the client device. After sending/receiving the \"Soft Delete\" command to/from the DS Server, the DS Client MUST delete the data items on the DS Client side according to the specified LUIDs and free up storage resources, and the DS Server MUST maintain the “Soft Deleted” data items. The LUIDs associated with the “Soft Deleted” data items MUST be maintained by the DS Client so that the DS Client MAY request the “Soft Deleted” data items later or the DS Server MAY send the stored data items to the DS Client later. The operation of “Soft Delete” is defined in the SftDel chapter (see [DSSYNTAX]). On occasions, an exception can occur when the DS Client specifies \"Soft Delete\" for a data element that has already been \"Hard Deleted\" on the DS Server. This condition will cause a \"Soft-Delete Conflict\" for that event when a two-way synchronization is attempted. This version of OMA DS does not specify how to negotiate the resolution of such \"Soft-Delete Conflicts\". However, it does provide status codes to identify Soft-Delete Conflict conditions and to also identify how the conflict might have been resolved. Note that the DS Server should internally note the \"Soft Deleted\" data items to avoid synchronization these data items from the DS Server to the DS Client. When the DS Server receives the “Soft Deletion” request from the DS Client, the DS Server SHOULD mark the requested data items as “Soft Deleted” according to the specified LUIDs. The \"Soft Deleted\" data items SHOULD be considered outside of the sync scope during a normal synchronization, except that the DS Client specifies the LUIDs for the \"Soft Deleted\" data items on the DS Server side. After receiving the retrieval request for the “Soft Deleted” LUIDs from the DS Client, the DS Server sends the requested “Soft Deleted” data items to the DS Client according to the LUIDs. 5.21   Replacing Data The SyncML Replace command provides the capability for the originator to replace existing data. The command can also be the cause for an \"Update Conflict\".  Page 40 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 5.21.1    Field-level Replace  The SyncML Replace command also provides the capability for the originator to send an update to the recipient without having to transfer the entire item. This technique is also called Field-level changes. This feature is extremely useful for the data types in which relatively concise attributes (for example the \"read\" status of the e-mail) are more likely to change, than substantially larger attributes like the body of the message or the attachments. Not all data types are equally suited for being used with Field-level replace. It is the responsibility of the sender to compose the partial items in the corresponding data format in such a manner that they are unambiguously interpreted by the receiver.  Also it is the responsibility of the sender to compose the partial items in the corresponding data format ensuring that the format remains valid. If the sender cannot meet these criteria then it MUST send a replace for the entire item instead of a field-level replace.  Example: It is ambiguous to send the field-level change containing the following vCard BEGIN:VCARD VERSION:2.1 N:Doe;John;;; TEL;HOME:(321) 654-987 END:VCARD In this case if the receiving side supports more than one HOME phone number, it will have an ambiguity understanding which one was changed. Example 2: It is improper to send the field-level change containing the following vCard BEGIN:VCARD TITLE:Worker END:VCARD The vCard format mandates the VERSION and N attributes to be present within the item. On occasions, an exception can occur where the same data element on both the OMA DS client and the OMA DS server have been updated or replaced. For example, the start and end date/time for the same event might have been changed to different values on the OMA DS client compared to the description on the OMA DS server. This condition will cause an \"Update Conflict\" for that event when a two-way synchronization is attempted. This version of OMA DS does not specify how to negotiate the resolution of such Update Conflicts. However, it does provide status codes to identify Update Conflict conditions and to also identify how the conflict might have been resolved. 5.22   Data Sync Record and Field Level Filtering Server data stores frequently contain much more data than can fit into small devices. Other aspects of the protocol enable clients and servers to indicate data store capacity and therefore avoid data overflow conditions, however it is often the case that small devices only want to synchronize a particular, prioritised subset of the data that resides in the server’s data store (referred to from this point forth as record filtering). Devices could also allow users to override the level of support for certain properties previously defined in the device info structure (referred to from this point forth as field filtering).  Support for receiving filters MUST be indicated in the device info for each data store. Support MUST be indicated by the inclusion of the Filter-Rx element within the Datastore element. The Filter-Rx element MUST contain a CTType and a VerCT element. The CTType element specifies the filtering grammar supported. For every Filter-Rx element a corresponding FilterCap element MUST be included in the Datastore element specifying any keywords or property names that can be filtered on.  Page 41 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] A filter is specified by including the Filter element for the target data store in a SyncAlert command. The recipient stores the specified filter criteria, and performs synchronization based on the filter criteria. The specified filter criteria will be applicable only for this data store sync within this synchronization session.  When a Filter element is present, the Filter Meta Type attribute MUST be included and MUST correspond to the MIME type the filter applies to. Within the Filter element, the Record, Field element and FilterType attribute MAY be included and all MAY be present. The Record element MUST contain an Item containing a Meta Type attribute representing the filter type used, and one Data element representing the query data. The Data element MUST be a logical expression whereby the expression MUST only contain values defined in the FilterCap element. The Field element MUST contain an Item containing a Meta Type attribute representing the device information MIME type and one Data element containing one or more Property elements. The mark-up characters of the Data element content MUST be properly escaped according to [XML] specification rules or the CDATA sections MUST be used. The Property elements override the corresponding property in the CTCap element for the current synchronisation session. Only the properties that differ from the properties specified in the CTCap element MAY be specified. If WBXML encoding is used, no more than one property MAY be specified in the Data element. Specifying more than one property in WBXML document violates the rules for well-formed WBXML documents. The FilterType attribute MUST contain a keyword that indicates the type of behavior that the sender is requesting. If the FilterType attribute is not present, then the FilterType value of “EXCLUSIVE” MUST be assumed.  If an implementation receives a filter record request for a data store that does not support filtering, a status code of 406 (OPTIONAL feature not supported) MUST be returned for the command containing the Filter element. If a filter record request specifying a filter type that is not supported by the data store is received, a status code 415 (unsupported media type or format) MUST be returned for the command containing the Filter element. If a filter record request is received which is syntactically incorrect or contains a query that is not supported then a status code of 422 (bad CGI or filter query) MUST be returned for the command containing the Filter element. If any of those error conditions occur, the sender of the filter MAY attempt to resend a new query.  If the second query fails as well, a sender SHOULD either remove the filter query or terminate the synchronization. If an implementation received a filter field request for a data store containing properties not previously defined in the corresponding CTCap element, then a status code of 400 (bad request) SHOULD be returned. Otherwise, the recipient of the filter field request MUST override any properties previously retrieved in the CTCap element in the device info with the properties present in the filter field request. The properties MUST only be overridden for the current synchronization session only. 5.22.1    Filter Behavior Definition Filtering allows an implementation (most often a client) to constrain the set of items in a data store it wishes to synchronize against and to further constrain the data returned. The filter only applies to the recipient, that is, an implementation that sends a filter for a synchronisation session is not constrained in the set of items it might send. Using a Filter will allow synchronization with a subset of the data in the data store.  When a Filter is being used during a Sync, the set of data that is defined by the Filter MUST be fully synchronized during a normal synchronization operation. If a subsequent SyncAlert command is sent for the same datastore but with a different Filter command, the set of data that is defined by the new Filter command MUST be fully synchronized during a normal synchronization operation. The recipient of the Filter command MUST no longer send items that were part of the previous filter if those items are no longer part of the new filter. A recipient MAY choose how to insure that this expectation is met. For example, it might require requesting a slow sync, or it might require re-sending records that have been previously synchronized with a different set of fields.  Page 42 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 5.22.2    Filter Query Syntax    The filter query is a logical expression contained in the Filter Record element and is applied to each item in the recipient’s datastore. Often, the values of properties in the data items are compared to literal values supplied by the requestor. Items for which the expression evaluates to true are the set of items for that synchronization session. The filter query is expressed according to a particular grammar. The Record Item Meta Type indicates the grammar of the filter query supplied in the Data element. This enables the protocol to support additional filter grammars without sacrificing interoperability. The list of grammar types an implementation is capable of receiving MUST be indicated through the use of the device info Filter-Rx element.  Comparison items MUST be valid property names or keywords specified in the FilterCap element for the particular filter query grammar being used and all comparison operators MUST be supported for each comparison item. Literal values used in comparisons MUST be valid for the property or keyword according to the content type being used for the query. Comparisons are performed using the character encoding specified in the content type, where appropriate. A grammar MAY provide logical operators for conjoining sub-expressions (e.g. AND, OR, NOT) to create arbitrarily complex expressions. A grammar MAY provide mechanisms for selecting items based on the presence of properties.  5.22.2.1 Content type requirements If an implementation supports receiving filters on a given data store, all expressions that test the values of certain base media object properties for that data store, regardless of the query grammar used, are OPTIONAL.  If the expression is unsupported by the recipient, one of the previously listed status codes MUST be returned to the sender. The sender SHOULD then modify the expression based on the device info obtained from the recipient. If no expression can be agreed upon between the sender and the recipient then it is up to the sender to determine if the synchronization can be sent without any Filter element or if the synchronization SHOULD be aborted. Filtering for all contents types is OPTIONAL and MAY be supported. 5.22.2.1.1 Contacts Media Object Filter Filtering for vCard 2.1 [IMCVCARD] and vCard 3.0 [RFC2426] objects can be specified using both Record and Field elements. In the case of Record elements, the set of recommended keywords to support are as follows: ct-filter-keyword = “CATEGORIES” | “GROUP”  If one chooses to filter based on a property name, some properties like Name (“N”) might  have several fields. Individual fields could be indicated using a subscript notation. Thus, “N[1]” refers to the family name and “N[2]” refers to the given name.  5.22.2.1.2 Calendar Media Object Filter Filtering for vCalendar 1.0 [IMCVCAL] and iCalendar 2.0 [RFC2445] objects can be specified using both Record and Field elements. In the case of Record elements, the set of recommended keywords to support are as follows: ct-filter-keyword = “SINCE” | “BEFORE” | “STATUS” The format of the “SINCE” and “BEFORE” keywords MUST be a date-time or date format as specified below. date-time     = date \"T\" time date          = date-value date-value    = date-fullyear date-month date-mday date-fullyear = 4DIGIT date-month    = 2DIGIT ;01-12 date-mday     = 2DIGIT ;01-28, 01-29, 01-30, 01-31 (based on month/year) time          = time-hour time-minute time-second time-utc  Page 43 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] time-hour     = 2DIGIT        ;00-23 time-minute   = 2DIGIT        ;00-59 time-second   = 2DIGIT        ;00-59 time-utc      = \"Z\"  The “SINCE” keyword represents items that are within or later than the specified date while the “BEFORE” keyword represents items that are earlier than the specified date. Implementations that support receiving filters for calendar media objects are responsible for expanding recurrence rules (“RRULE” properties) to determine if any instances match the filter conditions. Also, when specifying a date-time format, the use of UTC MUST be used in order to avoid time zone ambiguities. Implementations that cannot provide a UTC date-time value MUST provide a date value instead.  5.22.2.2 CGI Syntax This section specifies a CGI-like filtering syntax. When using this syntax, the Filter Item Meta Type element MUST be ‘syncml:filtertype-cgi’. All implementations that support receiving filter requests MUST support the “syncml:filtertype-cgi” grammar. The format for the CGI scripting is defined here in an ABNF notation [RFC2234] and the grammar defined here is largely the same as the grammar defined in the OMA DS 1.1.2 and OMA DS 1.2.1 specification.    If the CGI syntax is supported for a data store, then all of the logical CGI scripting primitives in the following table MUST be supported.  CGI syntax queries may contain at most 1 type of logical separator, but they MAY contain several logical separators of the same type. For example, they MAY contain several “&OR;” logical operators but a query cannot contain both an “&AND;” and an “&OR;” logical operator in the same expression.  The SPACE character MUST be specified by the hexadecimal encoding as stated by the format specification for Uniform Resource Identifiers.  Since the use of lexographic comparison operators is locale specific (for example the use of the “&LT;” operator), devices SHOULD NOT use these operators when specifying a filter for free form text properties. Instead, the following logical operators SHOULD be used in place: “&EQ;”, “&iEQ;”, “&NE;”, “&iNE;”, “&CON;”, “&iCON;”. Queries using value-based properties (properties that may only contain specific pre-defined values) SHOULD only use the following operators: “&EQ;”, “&iEQ;”, “&NE;”, “&iNE;”.   VCHAR = %x20-7E   ;Visible latin characters within UTF-8 or SPACE character string-value = 1*VCHAR  ;Case sensitive string value log-equalitycomp = \"&EQ;\"  ;Equal To (case sensitive) /                  \"&iEQ;\" ;Equal To (case insensitive) /                  \"&NE;\"  ;Not Equal To (case sensitive) /                  \"&iNE;\" ;Not Equal To (case insensitive)  log-op = log-equalitycomp / \"&GT;\"                ;Greater Than (case sensitive) / \"&iGT;\"               ;Greater Than (case insensitive) / \"&GE;\"                ;Greater Than Or Equal To (case sensitive)  Page 44 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] / \"&iGE;\"               ;Greater Than Or Equal To (case insensitive) / \"&LT;\"                ;Less Than (case sensitive) / \"&iLT;\"               ;Less Than (case insensitive) / \"&LE;\"                ;Less Than Or Equal To (case sensitive) / \"&iLE;\"               ;Less Than Or Equal To (case insensitive) / \"&CON;                ;Contains the value (case sensitive) / \"&iCON;               ;Contains the value (case insensitive) / \"&NCON;               ;Does Not Contain the value (case sensitive) / \"&iNCON;              ;Does Not Contain the value (case insensitive)  log-sep = \"&OR;\"        ;Logical OR /         \"&AND;\"       ;Logical AND luid-expression = \"&LUID;\" log-equalitycomp string-value ct-no-value = “&NULL;”   ; No property value for the item ct-filter-keyword = string-value   ; Valid content-type specific filter keywords ct-filter-value = string-value  ; Valid content-type specific property value ct-expression = ct-filter-keyword (log-op ct-filter-value | log-equalitycomp ct-no-value) filter-expression =  ct-expression | luid-expression filter-query = filter-expression *(log-sep filter-expression)  5.22.3    Indicating Filter Support Implementations that support filtering MUST indicate their support in the device info. For each data store, a device indicates the list of filter grammars it is capable of receiving in the Filter-Rx element.  5.22.3.1 Minimum Requirements for Filtering support Implementations that support filtering MUST support receiving the “syncml:filtertype-cgi” grammar. Specifically, they MUST include at least one Filter-Rx element specifying the receiving of the “syncml:filtertype-cgi” grammar.  5.22.4    Handling Data Outside Filter Criteria The following outlines how to handle synchronizing data outside the filter criteria 1. When using an exclusive filter type, the DS Server not only sends all of its changes to the client, but the DS Server MUST also send Delete commands for all client items that are outside the filter criteria.  If the DS Client supports the OPTIONAL Soft Delete, the DS Server MAY send Soft Deletes; otherwise, the DS Server MUST send Hard Deletes. 2. When using an inclusive filter type, before the DS Client sends any of its changes to the DS Server, the DS Client MAY choose to send Soft Deletes for all items that were outside the filter criteria after the previous synchronization.  Page 45 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Note that if the data items about to be Soft Deletes have never been sent to the DS Server, the DS Client SHOULD send them prior to issuing the Soft Deletes.  Note that if a DS Client chooses to delete the items outside of the filter query instead of archiving them, it SHOULD do so immediately after a synchronization in order to prevent the user from modifying the items between synchronizations and thus potentially losing changes made by users. 3. When both the DS Client and DS Server support equivalent filter queries, the DS Client and DS Server exchange only the data within the filter criteria.  5.22.5    Examples The following examples are provided to further illustrate the usage of filtering in OMA DS 2.0.  5.22.5.1 Contact Media Objects 5.22.5.1.1 Example 1 In this scenario, the client wishes to sync only Contact items that fall into the “business” or “personal” group. 1. During the initial sync, the client and server exchange their device info.  2. The client analyses the server’s device info, and the client notes that the server supports receiving filters on the Contacts data store for queries using the “syncml:filtertype-cgi” grammar. a. The server includes in its device info the Filter-Rx and FilterCap elements that it supports.  b. The client doesn’t require filtering on any additional fields, so it determines that this server supports the filter it wishes to send. <DataStore DisplayName=\"Contacts DB\" >    <SourceRef>./contacts</SourceRef>                        ...    <RxTx-CT>       ...    </RxTx-CT>    <CTCap>       ...    </CTCap>    <SyncCap FPUnique=\"true\"/>    <Filter-Rx>       <CTType>syncml:filtertype-cgi</CTType>       <VerCT>1.0</VerCT>    </Filter-Rx>    <FilterCap>       <CTType>syncml:filtertype-cgi</CTType>       <VerCT>1.0</VerCT>       <FilterKeyword>GROUP</FilterKeyword>       <PropName>CATEGORIES</PropName>    </FilterCap> </DataStore> 3. The client sends a SyncAlert for the Contacts data store with a filter. a. It includes the Filter Meta Type attribute to indicate the content type desired (vCard in this example). b. It includes a Filter Record element with a Meta Type value of “syncml:filtertype-cgi” to indicate the grammar being used. c. The filter query in the Item Data element contains a value of “GROUP&iCON;business&OR; GROUP &iCON;personal” to constrain the items synchronized to those that fall into the “business” or “personal” group (case insensitive).  Page 46 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] <SyncAlert CmdID=\"5\">    <!--  -->  <Filter>          <Meta Type=\"text/x-vcard\" /> <Record>                <Item>                   <Meta Type=\"syncml:filtertype-cgi\" />                   <Data> GROUP&iCON;business&OR;GROUP&iCON;personal</Data>                </Item>          </Record>   </Filter> </SyncAlert> 4. The server receives the SyncAlert with the Filter Record element. a. It determines that it supports the filter operation for the data store, content type, filter grammar, and properties. b. It replies with a status code of 200 for the SyncAlert, indicating that it can satisfy the request to sync with filtering. 5. The synchronization process continues normally. a. The client sends all of its changes to the server (the filter constraint is not imposed on it in this scenario). b. The server sends changes only for items that satisfy the filter query.  5.22.5.1.2 Example 2 In this scenario, the client wishes to sync only Contact items that fall into the “business” or “personal” group. Additionally the client has indicated in its device info that it supports the PHOTO property, but it does not wish to receive the PHOTO property from the server for this synchronization request. 1. During the initial sync, the client and server exchange their device info.  2. The client analyses the server’s device info, and the client notes that the server supports receiving filters on the Contacts data store for queries using the “syncml:filtertype-cgi” grammar. a. The server includes in its device info the Filter-Rx and FilterCap elements that it supports.  b. The client does not require filtering on any additional fields, so it determines that this server supports the filter it wishes to send. 3. The client sends a SyncAlert for the Contacts data store with a filter. a. It includes the Filter Meta Type element to indicate the content type desired (vCard in this example). b. It includes a Filter Record element with a Meta Type value of “syncml:filtertype-cgi” to indicate the grammar being used. c. The filter query in the Item Data element contains a value of “GROUP&iCON;business&OR;GROUP&iCON;personal” to constrain the items synchronized to those that fall into the “business” or “personal” group (case insensitive). d. It includes a Filter Field element containing a Property element set to “PHOTO” containing a MaxSize element set to 0 (zero). <SyncAlert CmdID=\"5\">    <!--    -->      <Filter>       <Meta Type=\"text/x-vcard\" />  Page 47 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]       <Field>             <Item>                   <Meta Type=\"application/vnd.syncml-devinf+xml\" />                   <Data>                      <![CDATA[                         <Property>                            <PropName>PHOTO</PropName>                            <MaxSize Truncate=\"false\">0</MaxSize>                         </Property>                      ]]>                   </Data>                </Item>       </Field>       <Record>             <Item>                   <Meta Type=\"syncml:filtertype-cgi\" />                   <Data><![CDATA[GROUP&iCON;business&OR;GROUP&iCON;personal]]></Data>             </Item>       </Record>    </Filter> </SyncAlert> 4. The server receives the SyncAlert with the Filter Record and Field elements. a. It determines that it supports the filter operations for the data store, content type, filter grammar, and properties. b. It replies with a status code of 200 for the SyncAlert, indicating that it can satisfy the request to sync with filtering. 5. The synchronization process continues normally. a. The client sends all of its changes to the server (the filter constraint is not imposed on it in this scenario). b. The server sends changes only for items that satisfy the filter query. The server does not send any PHOTO properties since the client has requested that it wishes to receive only 0 bytes of this property for this synchronization request and the value SHOULD not be truncated.  5.22.5.2 Calendar Media Objects 5.22.5.2.1 Example 1 In this scenario, the client wishes to synchronize calendar items that fall within a two week window of time (starting with the current date). 1. During the initial sync, the client and server exchange their device info.  2. The client analyses the server’s device info, and the client notes that the server supports receiving filters on the Calendar data store for queries using the “syncml:filtertype-cgi” grammar. a. The server includes in its device info the Filter-Rx and FilterCap elements that it supports. This includes the SINCE and BEFORE keywords. b. The client doesn’t require filtering on any additional fields, so it determines that this server supports the filter it wishes to send. <DataStore DisplayName=\"Calendar Agenda DB\">    <SourceRef>./calendar/events</SourceRef>              ...    <CTCap>       ...    </CTCap>    <SyncCap FPUnique=\"true\"/>  Page 48 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]    <Filter-Rx>       <CTType>syncml:filtertype-cgi</CTType>       <VerCT>1.0</VerCT>    </Filter-Rx>    <FilterCap>       <CTType>syncml:filtertype-cgi</CTType>       <VerCT>1.0</VerCT>       <FilterKeyword>BEFORE</FilterKeyword>       <FilterKeyword>SINCE</FilterKeyword>    </FilterCap> </DataStore> 3. The client sends a SyncAlert for the Calendar data store with a filter. a. It includes the Filter Meta Type element to indicate the content type desired (iCalendar in this example). b. It includes a Filter Record element with a Meta Type value of “syncml:filtertype-cgi” to indicate the grammar being used. c. The filter query in the Item Data element contains a value of “SINCE&EQ;20030606T000000Z&AND;BEFORE&EQ;20030620T000000Z” to constrain the items synchronized to those that occur between June 6, 2003 and June 19, 2003 inclusive, using the “SINCE” and “BEFORE” keywords. <SyncAlert>    <!--   -->    <Filter>       <Meta Type=\"text/x-vcalendar\"/>       <Record>          <Item>             <Meta Type=\"syncml:filtertype-cgi\" />             <Data><![CDATA[SINCE&EQ;20020707T000000Z&AND;BEFORE&EQ;20020728T000000Z]]></Data>          </Item>       </Record>    </Filter> </SyncAlert> 4. The server receives the SyncAlert with the Filter Record element. a. It determines that it supports the filter operation for the data store, content type, filter grammar, and properties. b. It replies with a status code of 200 for the SyncAlert, indicating that it can satisfy the request to sync with filtering. 5. The synchronization process continues normally. a. The client sends all of its changes to the server (the filter constraint is not imposed on it in this scenario). b. The server sends changes only for items that satisfy the filter query.  5.22.5.2.2 Example 2 In this scenario, the client wishes to synchronize task items (iCalendar vTODO components) that have not been completed and are due within the next 2 weeks (using the DUE iCalendar property). The client also wishes to limit the size of the DESCRIPTION property to 100 bytes and only receive ATTACH properties that are less than 1000 bytes. 1. During the initial sync, the client and server exchange their device info.  2. The client analyses the server’s device info, and the client notes that the server supports receiving filters on the Calendar data store for queries using the “syncml:filtertype-cgi” grammar.  Page 49 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] a. The server includes in its device info the Filter-Rx and FilterCap elements that it supports. This includes the STATUS and DUE keywords. b. The client doesn’t require filtering on any additional fields, so it determines that this server supports the filter it wishes to send. <DataStore DisplayName=\"Task DB\">    <SourceRef>./calendar/tasks</SourceRef>                  ...    <CTCap>       ...    </CTCap>    <SyncCap FPUnique=\"true\"/>    <Filter-Rx>       <CTType>syncml:filtertype-cgi</CTType>       <VerCT>1.0</VerCT>    </Filter-Rx>    <FilterCap>       <CTType>syncml:filtertype-cgi</CTType>       <VerCT>1.0</VerCT>       <PropName>DUE</PropName>       <PropName>STATUS</PropName>    </FilterCap> </DataStore> 3. The client sends a SyncAlert for the Calendar data store with a filter. a. It includes the Filter Meta Type element to indicate the content type desired (iCalendar in this example). b. It includes a Filter Record element with a Meta Type value of “syncml:filtertype-cgi” to indicate the grammar being used. c. The filter query in the Item Data element contains a value of “DUE&LE;20030620T000000Z&AND;STATUS&NE;COMPLETED” to constrain the items synchronized to those that are due before June 20, 2003 and have not been completed. d. It includes a Filter Field element containing a Property element set to “DESCRIPTION” containing a MaxSize element set to 100 and a second property element set to “ATTACH” containing a MaxSize of 1000 with the Truncate flag set to false. <SyncAlert>    <!--   -->    <Filter>       <Meta Type=\"text/x-vcalendar\" />       <Field>          <Item>             <Meta Type=\"application/vnd.syncml-devinf+xml\" />             <Data>                      <![CDATA[                         <Property>                            <PropName>DESCRIPTION</PropName>                            <PropInfo> <MaxSize>100</MaxSize> </PropInfo>                         </Property>                         <Property>                            <PropName>ATTACH</PropName>                            <PropInfo> <MaxSize Truncate=\"false\">1000</MaxSize>                         </PropInfo>                         </Property>                      ]]>             </Data>  Page 50 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]          </Item>       </Field>       <Record>          <Item>             <Meta Type=\"syncml:filtertype-cgi\" />             <Data><![CDATA[DUE&LE;20030728T000000Z&AND;STATUS&NE;COMPLETED]]></Data>          </Item>       </Record>    </Filter> </SyncAlert> 4. The server receives the SyncAlert with the Filter Record element. a. It determines that it supports the filter operation for the data store, content type, filter grammar, and properties. b. It replies with a status code of 200 for the SyncAlert, indicating that it can satisfy the request to sync with filtering. 5. The synchronization process continues normally. a. The client sends all of its changes to the server (the filter constraint is not imposed on it in this scenario). b. The server sends changes only for items that satisfy the filter query. The server has truncated the DESCRIPTION properties to 100 bytes and has also not sent any ATTACH properties that are larger than 1000 bytes.   Page 51 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 6.  Overall Data Synchronization Flow 6.1     Overview  One data synchronization process is a complete one-time data exchange process between the DS Client and DS Server. It includes sync initialization phase (Pkg #1 and Pkg#2), data exchange phase (Pkg #3 and Pkg #4) and mapping phase (Pkg #5 and Pkg#6). Detailed procedures of the sync process are described in section 7. During one data synchronization session, the DS Client and DS Server can perform one or more data synchronization processes. After one complete sync process, the DS Client and DS Server can maintain the session and perform data synchronization continuously. This is called continuous sync. DS Client and DS Server MUST support continuous sync functionality.  With this functionality, the DS Client and DS Server can perform data synchronization continuously. This will be very helpful in some circumstances, for example, the data items are changed frequently, real time sync is required, or the DS Client and DS Server are connected through cables, not OTA. And this can avoid the effort to initiate a session frequently. The overall sync flow is depicted in the figure below.   OMA DS Client OMA DS Server      Sync Process 1 Session Maitenance ...  ... ... Request to end the session Agree to end the session      Sync Process 2 Session Maitenance ...   Figure 8: Overall Sync Flow Between different sync processes, the DS Client or DS Server MUST send session maintenance commands (Alert 212 or Alert 213) to the other side to maintain the session. For the sync process after session maintenance, the requirements for the sync flow are the same as the first sync process during the session. The sync type parameters negotiation is needed, but the device information negotiation SHOULD be omitted. The DS Client or DS Server SHOULD send session end command (Alert 211) to the other side to end the session, or the session can be ended unintentionally, for example, loss of network coverage or phone malfunctions. The session maintenance commands and the session end command SHOULD be sent in the last package of the sync process. That is, Pkg #5 for the DS Client or Pkg #6 for the DS Server. It is recommended that DS Server opens the session and waits for the DS Client to end the session.   Page 52 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 6.2     Session Maintenance There are two possible ways to maintain the session. They are called “Alert Poll” and “Alert Idle”. The DS Client and DS Server MUST support both of them. The DS Client and DS Server MAY choose to use either Alert Poll or Alert Idle to maintain the session. During one session, the same one SHOULD be used. Either the DS Client or the DS Server can send session maintenance commands to the other side to request to maintain the session. The recipient SHOULD agree to continue the session. But the recipient MAY choose to refuse and end the session. During the session maintenance period, either DS Client or DS Server MAY send new SyncML commands to perform data synchronization.  The session maintenance request message and response message MUST include SyncML element and the corresponding required elements according to the DS Syntax specification. For security reason, the authentication information SHOULD be included in session maintenance messages.  6.2.1 Alert Poll The alert code for Alert Poll is 212.  The session maintenance flow using Alert Poll is depicted in the figure below.   OMA DS Client OMA DS Server      Alert 212 (Alert Poll) Wait for the timeout or new SyncML commands Return Status to specify the waiting time      Repeat the procedures above  Figure 9: Alert Poll The requestor sends Alert 212 command to the recipient, and the recipient responds with the expected waiting time in Status/Item/Data. The waiting time is specified in seconds. The requestor waits for the timeout or new SyncML commands. If the requestor does not receive any SyncML commands from the other side and the requestor has no new SyncML commands to send during the waiting time, after the timeout, the requestor SHOULD send the next Alert 212 command. And the procedures will repeat until either side has new SyncML commands to send or either side determines to end the session. Examples: Alert poll request from client: <Alert CmdID=\"2\" Code=\"212\" />               <!--Alert Poll-->  Page 53 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Alert poll response from server: <Status CmdID=\"2\" MsgRef=\"12\" CmdRef=\"2\" Cmd=\"Alert\" Code=\"200\">       <!--Agree to maintain-->    <Item>        <Meta Format=\"int\" />        <Data>120</Data>    <!--Waiting time, specified in seconds-->    </Item> </Status>  6.2.2 Alert Idle The alert code for Alert Idle is 213.  The session maintenance flow using Alert Idle is depicted in the figure below.   OMA DS Client OMA DS Server      Alert 213 (Alert Idle) to specify the waiting time Wait for the timeout or new SyncML commands Return Status      Repeat the procedures above  Figure 10: Alert Idle The requestor sends Alert 213 command to specify the waiting time to the recipient. The expected waiting time is specified in Status/Item/Data. And the waiting time is specified in seconds. The recipient waits for the timeout or new SyncML commands. If the recipient does not receive any SyncML commands from the other side and the recipient has no new SyncML commands to send during the waiting time, after the timeout, the recipient sends back the Status command.   The requestor sends Alert 213 again. And the procedures will repeat until either side has new SyncML commands to send or either side determines to end the session. Examples: Alert idle request from client: <Alert CmdID=\"2\" Code=\"213\">               <!--Alert idle-->    <Item>        <Meta Format=\"int\" />        <Data>120</Data>                    <!--Waiting time, specified in seconds-->    </Item> </Alert> Alert idle response from server: <Status CmdID=\"2\" MsgRef=\"13\" CmdRef=\"2\" Cmd=\"Alert\" Code=\"200\" />   <!--Agree to maintain-->  Page 54 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]  6.3     Session End Either the DS Client or the DS Server MAY send session end commands to the other side to request to end the session. The recipient MUST agree to end the session. If the recipient wants to continue the session, the recipient MAY initiate a new session. The requestor MAY specify the NoStatus attribute in the Alert command, then no response will be sent by the recipient. Examples: Session end request from client: <Alert CmdID=\"2\" Code=\"211\" />               <!--Session end--> Session end response from server: <Status CmdID=\"2\" MsgRef=\"14\" CmdRef=\"2\" Cmd=\"Alert\" Code=\"200\" /> <!--Agree to end session-->  6.4     Error Cases If the recipient refuses to continue the session, status code “(518) refuse to continue the session” is created by the session maintenance commands.     Page 55 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 7.  Data Synchronization Flow for Single Sync Process 7.1     Overview Individual data synchronization processes occur within the scope of an active data synchronization session (See Chapter 6, and Figure 8.  While a DS Session is open and not already in a Sync process, a Sync Process may be initiated by either the DS Client or the DS Server by sending a SyncAlert command. Historically, the steps during synchronization were broken up into packages, numbered Pkg #0 through Pkg #6.  Since Continuous Sync allows for these steps to be repeated, as well as split up slightly differently, text descriptions will be used here along with the former package number.  Also note that Pkg #1 formerly included authentication, whereas with Continuous Sync that may occur at any time prior to or during the current sync process. For ease of implementation, all sync processes have the same core logical flow, shown in Figure 11.  A single sync process is allowed to synchronize multiple data stores, but all data stores MUST proceed through packages in unison – e.g. there is a single Pkg #1 containing the SyncAlerts for all data stores sent by the DS Client, and so on. Note that packages are a logical concept, and actual message flow may overlap.  E.g. the first message of a session may include authentication, SyncAlert from Client (Pkg #1), and Sync Package from Client (Pkg #3), where each piece assumes the prior pieces were successful, or additional sync processes may be started in Pkg #6.  Additionally, Sync Packages that require more than one message will typically receive statuses immediately (Pkg #4 partially overlapping with Pkg #5, and Pkg #5 partially overlapping with Pkg #6). Beyond the implicit order requirements, such as being unable to send a status for a command that has not yet been sent, there is an explicit requirement that the Sync Package from the server for each data store MUST NOT be sent before the corresponding Sync Package from the client for that data store has been completed.  The typical sync flow for a single sync process is depicted in the figure below.   OMA DS Client OMA DS Server Pkg #3: Sync Package from Client Pkg #4: Status and Sync Package from Server Pkg #5: Status of Sync Package from Server Pkg #6: Status (of SyncHdr) Pkg #1: SyncAlert from Client Pkg #2: Status and SyncAlert from Server Session is initiated (typically includes authentication) Session Continues (or End Session)  Figure 11: Typical Sync Flow for Single Sync Process  Page 56 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]  Descriptions for the above sync flows are as follows: Pkg #1: The DS Client sends the SyncAlert command with the client requested sync type parameters to the DS Server. If this is the first sync process in the session, Pkg #1 typically also includes authentication information and possibly device information. Optionally, the SyncAlert will include fingerprints of the data items in the case of a recovery sync. (See section 8) Pkg #2: The DS Server responds and sends statuses for the Pkg #1 commands, and a SyncAlert command with server specified sync type parameters to the DS Client. It also may include authentication information or device information. Optionally, the SyncAlert will include the data item identifiers that the client should send in the case of a recovery sync. (See section 8) Pkg #3: The DS Client sends statuses for the Pkg #2 commands, and sends the sync package with the modified or specified data items and the associated fingerprints to the DS Server.  Pkg #4: The DS Server sends statuses for the Pkg #3 commands and sends back the server side modified data items to the DS Client. Pkg #5: The DS Client sends statuses for the Pkg #4 commands. Optionally, the DS Client sends mapping information and/or fingerprints. Pkg #6: The DS Server sends back the status for the client sent package (Pkg #5). Then the whole sync process completes. The session MAY be closed or continued according to the session maintenance commands or session end command. Note that the contents of the sync packages may be different or absent according to the different sync type parameters.  7.2     Sync Flows While there are many possible specific combinations of things that can be done, there are three general sync flows: normal sync, client initiated recovery sync and server initiated recovery sync, show below. Specific packages have the following requirements: A sync process initiated by a DS Client starts with the DS Client sending a SyncAlert to the DS Server (Pkg #1).  This MAY contain an IDContainer containing SourceClientURIs (LUIDs) with FP Attributes.  The DS Server responds with a status for the DS Client’s SyncAlert, and if the DS Server agrees to perform the requested sync, a SyncAlert after the status for the DS Client’s SyncAlert (Pkg #2).  A SyncAlert from the DS Server MAY contain an IDContainer, in which case the listed SourceClientURIs are to be used as the set of data for the DS Client to send to the DS Server.  If no IDContainer is sent, then the set of data for the DS Client to send will be based upon the DS Client’s change log. If the status indicates that a recovery sync is required, the client SHOULD request a new sync (and thus a new Pkg #1), including an IDContainer containing SourceClientURIs (LUIDs) with FP Attributes. A sync process initiated by a DS Server starts with the DS Server sending a SyncAlert to the DS Client (No previous package identifier).  This SHOULD trigger the DS Client to initiate a sync process as shown above, with the DS Server specified sync parameters. After the server has sent the SyncAlert, and if the client does not agree with the sync anchor in that SyncAlert, then the Client MUST start a recovery sync. This is done by sending back a Status on that SyncAlert with ‘Recovery Required’ (508). In this same message, the client SHOULD start the recovery sync with a new SyncAlert containing an IDContainer. In this case, this package can be considered as a repeated Pkg #1.  Note that it is not necessary for the client to compare the sync anchor from the server, and an extended exchange of SyncAlerts is not recommended due to the possibility of looping. Once initialization is complete, if the sync parameters specify that client data should be sent, the DS Client would begin sending data to the DS Server.  This is called the Sync Package from Client (Pkg #3).  The last message containing DS Client data items from the specified datastore MUST include the Final flag.  Note that the statuses for these commands were previously considered part of Pkg #4. If the sync parameters specify that server data should be sent, the DS Server would  Page 57 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] then send its data to the DS Client.  This is called the Sync Package from Server (Pkg #4).  The DS Server data items MUST NOT be sent before the Final flag is received from the client, if the client was to send any data items.  The last message containing DS Server data items from the specified datastore MUST include the Final flag.  The statuses from the DS Client (which may include new client identifiers and FPs) are considered Pkg #5.  The statuses from the DS Server of messages containing Pkg #5 information are considered Pkg #6. Once the DS Server has received and sent statuses for all the data it expects from the DS Client (e.g. Pkg #3 and Pkg #4, if the sync parameters specify the client should send data), and sends all the data it expects to send and receives matching statuses (e.g. Pkg #4 and Pkg #5), it should update its sync anchors, and consider the sync process as complete.  Once the DS Client has sent and received statuses for all the data it expects to send (e.g. Pkg #3 and Pkg #4, if the sync parameters specify the client should send data), and receives all the data it expects from the DS Server (e.g. Pkg #4, if the sync parameters specify the server should send data), sends matching statuses (Pkg #5), and receives a status for the last message (Pkg #6), it should update its sync anchors, thus completing the sync process.   7.2.1 Normal Sync 7.2.1.1 Overview When both sides have no problems, that is, the change log is valid (ChangeLogValidity set as “true”), the sync anchors match, and the item identifiers and mapping table are valid (IDValidity set as “true”), the DS Client and DS Server can exchange the changed data items directly.  The  two-way  preserve  sync  flow  (Direction  set  as  “twoWay”, Behavior  set  as  “Preserve”)  is  depicted  in  the  figure below.  OMA DS Client OMA DS Server Pkg #3: Changed data and FPs from Client Pkg #4: Status and changed data from Server Pkg #5: Status Mapping Package from Client Pkg #6: Status (of SyncHdr) from Server Pkg #1: SyncAlert from Client Pkg #2: Status and SyncAlert from Server Session is initiated (typically includes authentication) Session Continues (or End Session)  Figure 12: Normal Sync Flow Descriptions and examples for the above sync flows are as the follows: Pkg #1: The DS Client requests a sync process using the SyncAlert command.  Pkg #2: The DS Server compares the received Last anchor with the stored anchor value and sends back the Next Anchor. The DS Server sends back the response to indicate the sync type parameters using the SyncAlert command.   Page 58 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] The sync type parameters MUST conform to the sync type transition rules specified in section 5.1.  To avoid round trips, after receiving the sync type parameters from the DS Server, the DS Client SHOULD accept the parameters. Otherwise, the DS Client SHOULD initiate another sync process.   Pkg #3: The DS Client sends the changed data items and the associated fingerprints to the DS Server.  Pkg #4: The DS Server returns status for the data items the client sent and sends the server side changed data items to the DS Client.  Note that the DS Server does not include fingerprints with its data items, because fingerprints are generated by the DS Client. Even if it is mutually generated fingerprints, the server does not need to send them back to the client. Pkg #5: The DS Client returns status for the server modifications. The DS Client returns fingerprints for the server added or modified data items, and returns new assigned client identifiers for the server added data items.  Pkg #6: The DS Server returns statuses for the messages in Pkg #5.  Detailed requirements for Pkg #3, Pkg #4, Pkg #5 and Pkg #6 are specified in the following sections. Note that if the direction is one way, that is, fromClient or fromServer, some packages can be simplified or omitted. If the direction is one way from client, the server does not need to send back the server modifications. If it is one way from server, the client does not need to send client modifications to the server.  Packages not sent require no statuses.   7.2.1.2 Client Modifications to Server To enable sync, the client needs to inform the server about all client data modifications, which have happened since the previous sync package with modifications has been sent from the client to the server. These modifications include also modifications which have happened during the previous sync process after the client has sent its modifications to the server. Any client modification, which is done after sending this package, MUST be reported to the server during the next sync process. It is not allowed to put them inside subsequent messages of the same sync process from the client to the server.  The requirements for the sync package from the DS Client to the DS Server are described as the following: 1. The Sync element MUST be included in SyncBody with the following clarifications. NoStatus SHOULD NOT be specified with the Sync command. The FreeMem attribute SHOULD be specified on the Sync element. If supplied this information MUST be sent in the first message of this package. NumberOfChanges MAY be used to indicate the number of changes in the source node. 2. If there are modifications in the client, the operational elements (e.g., Add, Copy, Delete, Move, and Replace)  have the following requirements. NoStatus SHOULD NOT be specified with all these operations. The SourceClientURI element MUST be included to indicate the LUID of the data item within the Item element. If the fingerprint generation method is client generated fingerprint, the fingerprint of the data item MUST be included in the FP attribute of the SourceClientURI element within Replace and Add commands. The Type attribute MUST be included in the Meta element of items containing data to indicate the type of the data item (E.g., MIME type). The Meta element inside an operation or inside an item can be used. 3. The Final element MUST be used for the message, which is the last in this package. After the server has received the final message of the package, it can complete the sync analysis and send its modifications back to client.   Page 59 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 7.2.1.3 Server Modifications to Client The sync package (Refer Pkg #4) from the DS Server to the DS Client has the following purposes: - To inform the client about the results of sync analysis. - To inform about all data modifications, which have happened in the server since the previous sync process. Any server modifications, which are done after sending this package, MUST be reported to the client during the next sync process. It is not allowed to put them inside subsequent messages of the same sync process from the server to the client. The requirements for messages within this sync package are following. 1. The Status element for the Sync element received from the client is used to indicate the general status of the sync analysis and the status information related to data items sent by the client (e.g., a conflict has happened.). Status information for data items MAY be sent before Pkg #3 is completely received. 2. The Sync element MUST be included in SyncBody, if earlier there were no occurred errors, which could prevent the server to process the sync analysis and to send its modifications back to the client. For the Sync element the following clarifications apply: NoStatus SHOULD NOT be specified for the Sync command. NumberOfChanges MUST be used to indicate the number of changes in the server node if the client has indicated that it supports NumberOfChanges. 3. If there are modifications in the server, the operational elements (e.g., Add, Copy, Delete, Move, and Replace) have the following requirements NoStatus SHOULD NOT be specified with all these operations. The Type attribute MUST be included in the Meta element of items containing data to indicate the type of the data item (E.g., MIME type). The Meta element inside an operation or inside an item MAY be used. 4. The Final element MUST be used for the message, which is the last in this package.  7.2.1.4 Data Mapping Status from Client The data mapping status package from the client to the server is needed to transport the information about the result of the data update on the client side. In addition, it is used to indicate the LUID’s of the new data items, which have been added in the client, i.e., the Status including mapping LUID’s and temporary GUID’s is sent to the server. This package SHOULD be sent if the server has added or modified data items. The messages in this package have the following requirements. 1. The Status element for the Sync element received from the server is used to indicate the results of data update in the client and the status information related to the individual data items is transferred to the server. The status information for data items MAY be sent before Package #4 is completely received. 2. The Status elements for the operational elements (e.g., Add, Copy, Delete, Move, and Replace) received from the server have the following requirements StatusItem MUST be included in the Status element for each item of the original command if the client has new client identifiers for any of the data items, or the client has changed client generated fingerprints for any of the data items, or the client has different result codes for any of the data items. If the fingerprint generation method is client generated fingerprint, the FP attribute MUST be included in the ClientURI element in StatusItem element for the server added or modified data items.  Page 60 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] If there are new client identifiers for any data items, the new LUID MUST be included in the ClientURI element of the StatusItem element. 3. The Final element MUST be used for the message, which is the last in this package.  7.2.1.5 Status Package from Server The status package from the server to the client is needed to inform the client that the server has received the status information of the data items. This status package is sent back to the client even if there were no mapping operations in last package from the client to the server. The Final element MUST be used for the message, which is the last in this package.  7.2.1.6 Examples  The normal sync examples are described as below. Note that the examples are informative and some elements (for example, SyncHdr) are omitted here for simplicity reason. Pkg #1: The DS Client requests a two-way preserve sync. The client IDs are valid,  he client change log is valid, and the client has sync anchors associated with this server. <SyncBody> <!-- --> <SyncAlert CmdID=\"3\">     <Anchor Last=\"001\" Next=\"002\" />     <TargetServerURI>./contacts</TargetServerURI>     <SourceClientURI>./dev-contacts</SourceClientURI>     <SyncType Behaviour=\"Preserve\" Direction=\"twoWay\"                ChangeLogValidity=\"true\" IDValidity=\"true\"/> </SyncAlert> <Final/> </SyncBody> Pkg #2: The Last anchor matches, the server side change log is valid and the server side mapping table is also valid. The server agrees to sync as requested. <SyncBody> <!-- --> <Status CmdID=\"1\" MsgRef=\"1\" Cmd=\"SyncAlert\" CmdRef=\"3\" Code=\"200\" >   <ServerURI>./contacts</ServerURI>   <ClientURI>./dev-contacts</ClientURI> </Status> <SyncAlert CmdID=\"3\" NoStatus=\"true\">     <Anchor Next=\"002\" />     <TargetClientURI>./dev-contacts</TargetClientURI>     <SourceServerURI>./contacts</SourceServerURI>     <SyncType Behaviour=\"Preserve\" Direction=\"twoWay\"                ChangeLogValidity=\"true\" IDValidity=\"true\"/> </SyncAlert> <Final/> </SyncBody> Pkg #3: The DS Client sends the modifications associated with fingerprints to the server. <SyncBody>   <!-- --> <Sync CmdID=\"3\" NumberOfChanges=\"1\" FreeID=\"81\" FreeMem=\"8100\">          <TargetServerURI>./contacts</TargetServerURI>          <SourceClientURI>./dev-contacts</SourceClientURI>          <Replace CmdID=\"4\" >             <Meta Type=\"text/x-vcard\" />  Page 61 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]             <Item>                <SourceClientURI FP=\"1234\">1012</SourceClientURI>                <Data>                   <!--The vCard data would be placed here.-->                </Data>             </Item>          </Replace>    </Sync>    <Final/> </SyncBody> Pkg #4: The DS Server returns status for client modifications and sends the server modifications to the DS Client. <SyncBody>   <!-- -->   <Status CmdID=\"2\" MsgRef=\"2\" Cmd=\"Sync\" CmdRef=\"3\" Code=\"200\" >       <ServerURI>./contacts</ServerURI>       <ClientURI>./dev-contacts</ClientURI>   </Status> <Status CmdID=\"3\" MsgRef=\"2\" Cmd=\"Replace\" CmdRef=\"4\" Code=\"200\" /> <Sync CmdID=\"4\" NumberOfChanges=\"2\" FreeID=\"81\" FreeMem=\"8100\">          <TargetClientURI>./dev-contacts</TargetClientURI> <SourceServerURI>./contacts</SourceServerURI>                               <Replace CmdID=\"5\" >             <Meta Type=\"text/x-vcard\" />             <Item>                <TargetClientURI>1023</TargetClientURI>                <Data>                   <!--The vCard data would be placed here.-->                </Data>             </Item>          </Replace>          <Add CmdID=\"6\" >           <Meta Type=\"text/x-vcard\" />             <Item>                <SourceServerURI>ABCD12345_1024</SourceServerURI>                <Data>                   <!--The vCard data would be placed here.-->                </Data>             </Item>          </Add>    </Sync>    <Final/> </SyncBody> Pkg #5: The DS Client returns data mapping status for the server modifications to the DS Server. <SyncBody>   <!-- -->   <Status CmdID=\"2\" MsgRef=\"2\" Cmd=\"Sync\" CmdRef=\"4\" Code=\"200\" >       <ServerURI>./contacts</ServerURI>       <ClientURI>./dev-contacts</ClientURI>   </Status> <Status CmdID=\"3\" MsgRef=\"2\" Cmd=\"Replace\" CmdRef=\"5\" Code=\"200\" >    <StatusItem>    <ClientURI FP=\"1234\">1023</ClientURI> </StatusItem> </Status> <Status CmdID=\"4\" MsgRef=\"2\" Cmd=\"Add\" CmdRef=\"6\" Code=\"200\" >    <StatusItem>    <ServerURI>ABCD12345_1024</ServerURI>    <ClientURI FP=\"2345\">1024</ClientURI> </StatusItem> </Status>    <Final/>  Page 62 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] </SyncBody> Pkg #6: The DS Server returns status to the DS Client for the data mapping status package from client. <SyncBody>   <!-- -->   <Status CmdID=\"1\" MsgRef=\"3\" Cmd=\"SyncHdr\" CmdRef=\"1\" Code=\"200\" >     <!-- -->     </Status>    <Final/> </SyncBody>   7.2.2 Client Initiated Recovery Sync 7.2.2.1 Overview The recovery sync can be desired for many reasons, e.g., the client or the server has lost its change log information, the LUID’s have wrapped around in the client, the GUID’s have wrapped around in the server, the mapping table has problem in the server, or the sync anchors mismatch.  The recovery sync is a form of synchronization in which fingerprints and data item identifiers of the data items in one or more datastores are sent by the DS Client to the DS Server, and the received fingerprints are compared with the stored fingerprints by the DS Server to determine the data items that the DS Client should send. After fingerprints comparison and analysis, the DS Server returns either a list of identifiers of data items for the client to send to the server, or a SyncAlert without an IDContainer of data item identifiers to indicate the client should send all the data items referred to in the client’s SyncAlert.  Either the DS Client or the DS Server may indicate a need for a recovery sync. If the DS Client receives a 508 (‘Recovery required’) to a previous SyncAlert, or detects another problem in data returned from the DS Server (such as SyncAlert parameters, or sync anchors), the DS Client SHOULD return the appropriate statuses, and initiate a recovery sync.  If the DS Client has a problem, that is, the data item identifiers are invalid, the change log is invalid, or there is no last anchor, the DS Client SHOULD initiate a recovery sync. The DS Client specifies the sync type parameters in the SyncAlert command. The presence of an IDContainer holding data item identifiers and fingerprints indicates that a sync is a recovery sync. This is called client initiated recovery sync.  If the client’s state information indicates the devices are synchronizing with each other for the first time, a recovery sync MUST be initiated. In this case, the ChangeLogValidity MUST be set as “false”.   IDValidity MAY be set as “true” if the client implementation would not have different data item identifiers if there had been a previous sync with the server, that the client just does not have information about. IDValidity MUST be set as “false” if the client implementation could have had different data item identifiers in a previous sync with the server, that the client just does not have information about.  For example, if uninstalling and reinstalling the client would lose all previous state information, but the data item identifiers were stored with the address book and thus would be unchanged, IDValidity could be set as “true”, whereas if reinstalling the client generates new data item identifiers IDValidity MUST be set as “false”.  7.2.2.2 Flows The two-way preserve sync flow (Direction set as “twoWay”, Behavior set as “Preserve”, IDValidity set as “true”, ChangeLogValidity set as “false”) is depicted in the figure below.  Page 63 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]  OMA DS Client OMA DS Server Pkg #3: Indicated Data Items  and fingerprints from Client Pkg #4: Status and Data Items from Server Pkg #5: Status Mapping Package from Cl ient Pkg #6: Status (of SyncHdr) from Server Pkg #1: SyncAlert Request, i ncluding IDC ontai ner Pkg #2: Status and SyncAlert Response, i ndicating data items Ses sion is initiated (typically i ncludes  authentic ation) Session Continues (or End Session)  Figure 13: Client Initiated Recovery Sync Flow Descriptions and examples for the above sync flows are as the follows: Pkg #1: The DS Client requests a sync process using the SyncAlert command, including an IDContainer to indicate the data item identifiers and fingerprints.  Pkg #2: The DS Server compares the received fingerprints with the stored fingerprints for the data items, and then sends back either a list of identifiers of data items for the client to send to the server, or a SyncAlert without an IDContainer of data item identifiers to indicate the client should send all the data items referred to in the client’s SyncAlert. Note that if the client IDValidity was “false”, indicating the client data item identifiers might not be the same as in a previous sync, the client SHOULD initiate a recovery sync, including sending the new data item identifiers and corresponding fingerprints in the SyncAlert command to the server, and the server MAY use fingerprints to match data items instead of data item identifiers.  For example, if the server has a list of data items and fingerprints, and receives a new list of data items and fingerprints with IDValidity set to “false”, the server only knows that the identifiers may have changed.  If the device information indicates fingerprints are typically unique (FPUnique), an efficient approach to rebuild a mapping table would be to first compare the fingerprint for a given new client identifier with a stored fingerprint for that identifier on the server (if there is one).  If a match is found, the mapping is correct for that identifier.  If the fingerprints do not match, the server could scan through the entire list of fingerprints for data items that the server has for a match.  If there is exactly one match found, then the server may update its mapping table to associate its data item with the new client identifier.  If no match or multiple matches are found, the server would need to send that client identifier back to the client in the server’s SyncAlert to request the client to send the entire data item for further analysis. Pkg #3: the DS Client sends data items and associated fingerprints indicated by the server in Pkg #2. Note that when the client receives a list of identifiers that the server indicates the client to send, the client does not have information as to if those data items are currently on the server or not.  Thus the client should use the Replace command, instead of the Add command. Also note that when given a specific list of items to send, there is no need for the client to send Delete commands. Pkg #4~Pkg #6 are similar to normal sync.  Note that server conflict resolution may encounter the following cases, which have the listed typical behaviors (for two-way sync):  Page 64 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]  If IDValidity is “true” for both the client and the server, and: o The identifiers and fingerprints match, then the mapping has been established, and the data item does not need to be sent by the client. o The client identifier and server identifier match, but the fingerprints do not, then there appears to have been a change in the data, and the server SHOULD request the data item be transferred by the client, unless the server is expected to overwrite or ignore any client changes. o A client identifier does not match any server identifier, then the client appears to have data the server does not, and the server SHOULD request the data item be transferred by the client. o A server identifier does not match any client identifier, then the server appears to have data the client does not, and if this still applies after Pkg #3 and been received and further conflict analysis made, the server would typically Add the data item to the client in Pkg #4 (it could choose to send a Delete if it has information that the client used to have the item, and the item should now be deleted).  If IDValidity was “false” for either the client or the server, and FPUnique was specified, and: o The identifiers and fingerprints match, then a possible mapping has been established.  The server may scan through all the fingerprints it has to check for a rare case of multiple matches (and if found, request the data item), or may use the mapping, and thus not request the data item be transferred by the client. o The client identifier and server identifier match, but the fingerprints do not. The server may scan through the entire list of fingerprints for data items that the server has for a match.  If exactly one match is found, then the server has found a match, and does not need to request the data item be transferred by the client. o A client identifier does not match any server identifier, and the corresponding fingerprint does not match any server fingerprint, then the client appears to have data the server does not, and the server SHOULD request the data item be transferred by the client. o A server identifier does not match any client identifier, or a server fingerprint does not match any client fingerprint, then the server appears to have data the client does not, and if this still applies after Pkg #3 and been received and further conflict analysis made, the server would typically Add the data item to the client in Pkg #4 (it could choose to send a Delete if it has information that the client used to have the item, and the item should now be deleted). If IDValidity was “false” for either the client or the server, but FPUnique was not specified, then the server SHOULD always ask for all data items (typically by not returning an IDContainer)., and all conflict analysis would need to be done after the receipt of Pkg #3.  7.2.2.3 Examples  The client initiated recovery sync examples are described as below. Note that the examples are informative and some elements (for example, SyncHdr) are omitted here for simplicity reason.  Pkg #1: The DS Client requests a two-way preserve recovery sync. The client IDs are valid and the client change log is invalid. <SyncBody> <!-- --> <SyncAlert CmdID=\"3\">     <Anchor Last=\"001\" Next=\"002\" />     <TargetServerURI>./contacts</TargetServerURI>     <SourceClientURI>./dev-contacts</SourceClientURI> <SyncType Behaviour=\"Preserve\" Direction=\"twoWay\"            ChangeLogValidity=\"false\" IDValidity=\"true\"/> <IDContainer>    <ID FP=\"0001\">LUID001</ID>    <ID FP=\"0002\">LUID002</ID>    <ID FP=\"0003\">LUID003</ID>   Page 65 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] </IDContainer> </SyncAlert> </SyncBody> Pkg #2: The Last anchor matches, the server side change log is valid and the server side mapping table is also valid. The server agrees to sync. The server compares the fingerprints and determines the data items the client should send.  In this example, the server includes its last known fingerprint for the data item it desires from the client.  This is optional.  Some clients may be able to take advantage of this information, such as to send a field level replace instead of a full replace.  <SyncBody> <!-- --> <Status CmdID=\"1\" MsgRef=\"1\" Cmd=\"SyncAlert\" CmdRef=\"3\" Code=\"200\" >   <ServerURI>./contacts</ServerURI>   <ClientURI>./dev-contacts</ClientURI> </Status> <SyncAlert CmdID=\"3\" NoStatus=\"true\">     <Anchor Next=\"002\" />     <TargetClientURI>./dev-contacts</TargetClientURI>     <SourceServerURI>./contacts</SourceServerURI> <SyncType Behaviour=\"Preserve\" Direction=\"twoWay\"            ChangeLogValidity=\"true\" IDValidity=\"true\"/> <IDContainer>      <ID FP=\"0012\">LUID002</ID>  </IDContainer> </SyncAlert> <Final/> </SyncBody> Pkg #3: The DS Client sends the modifications associated with fingerprints to the server. <SyncBody>   <!-- --> <Sync CmdID=\"3\" NumberOfChanges=\"1\" FreeID=\"81\" FreeMem=\"8100\">          <TargetServerURI>./contacts</TargetServerURI>          <SourceClientURI>./dev-contacts</SourceClientURI>          <Replace CmdID=\"4\" >             <Meta Type=\"text/x-vcard\" />             <Item>                <SourceClientURI FP=\"0002\">LUID002</SourceClientURI>                <Data>                   <!--The vCard data would be placed here.-->                </Data>             </Item>          </Replace>    </Sync>    <Final/> </SyncBody> Pkg #4: The DS Server returns status for client data items and sends the server side data items to the DS Client. <SyncBody>   <!-- -->   <Status CmdID=\"2\" MsgRef=\"2\" Cmd=\"Sync\" CmdRef=\"3\" Code=\"200\" >     <ServerURI>./contacts</ServerURI>     <ClientURI>./dev-contacts</ClientURI>   </Status> <Status CmdID=\"3\" MsgRef=\"2\" Cmd=\"Replace\" CmdRef=\"4\" Code=\"200\" /> <Sync CmdID=\"4\" NumberOfChanges=\"2\" FreeID=\"81\" FreeMem=\"8100\">          <TargetClientURI>./dev-contacts</TargetClientURI> <SourceServerURI>./contacts</SourceServerURI>                               <Replace CmdID=\"5\" >             <Meta Type=\"text/x-vcard\" />             <Item>                <SourceServerURI> ABCD12345_1023</SourceServerURI>                <Data>  Page 66 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]                   <!--The vCard data would be placed here.-->                </Data>             </Item>          </Replace>          <Add CmdID=\"6\" >           <Meta Type=\"text/x-vcard\" />             <Item>                <SourceServerURI>ABCD12345_1024</SourceServerURI>                <Data>                   <!--The vCard data would be placed here.-->                </Data>             </Item>          </Add>    </Sync>    <Final/> </SyncBody> Pkg #5: The DS Client returns data mapping status for the server modifications to the DS Server. <SyncBody>   <!-- -->   <Status CmdID=\"2\" MsgRef=\"2\" Cmd=\"Sync\" CmdRef=\"4\" Code=\"200\" >     <ServerURI>./contacts</ServerURI>     <ClientURI>./dev-contacts</ClientURI>   </Status> <Status CmdID=\"3\" MsgRef=\"2\" Cmd=\"Replace\" CmdRef=\"5\" Code=\"200\" >    <StatusItem>    <ClientURI FP=\"3456\">LUID1023</ClientURI> </StatusItem> </Status> <Status CmdID=\"4\" MsgRef=\"2\" Cmd=\"Add\" CmdRef=\"6\" Code=\"200\" >    <StatusItem>    <ServerURI>ABCD12345_1024</ServerURI>    <ClientURI FP=\"4567\">LUID1024</ClientURI> </StatusItem> </Status>    <Final/> </SyncBody> Pkg #6: The DS Server returns status to the DS Client for the data mapping status package from client. <SyncBody>   <!-- -->   <Status CmdID=\"1\" MsgRef=\"3\" Cmd=\"SyncHdr\" CmdRef=\"1\" Code=\"200\" >     <!-- -->   </Status>    <Final/> </SyncBody>  7.2.3 Server Initiated Recovery Sync 7.2.3.1 Overview In the case where the DS Client attempts a normal sync, but the DS Server has some issues that require recovery, the DS Server can convert the sync into a Recovery Sync.  Issues that might require this include lost change log information, mismatched anchors, lost mapping information, lost data item identifiers, and so on.  To force a Recovery Sync, the DS Server returns an error status code to the DS Client’s SyncAlert, and sends back the desired server side sync type parameters in a SyncAlert command. The error code which is used in this case MUST be 508 (‘Recovery required’). This is done at the Sync Initialization (Refer Pkg #2).  After the DS Client has received the status and the SyncAlert command for the recovery sync, the DS Client sends a new SyncAlert with an IDContainer including data items identifiers and fingerprints to the DS Server, and this package can be considered as a repeated Pkg #1. The DS Server then sends back either a list of identifiers of data items for the client to send to the server, or a SyncAlert without an IDContainer of data  Page 67 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] item identifiers to indicate the client should send all the data items referred to in the client’s SyncAlert.  This package can be considered as a repeated Pkg #2. Sync can be thought to start when the DS Client sends data items in Pkg #3. Note that if the DS Client had already attempted to start Pkg #3 with the normal sync request, the server could remove any included data items from the list of items for the client to send in subsequent messages. Note that the DS Client could choose to guess which data items to send, and start to send them immediately after the SyncAlert with fingerprints, in the same message.  The server could then return a reduced list of data items for the client to send in subsequent messages. Note that after the first exchange, this is virtually identical to the Client Initiated Recovery Sync.   7.2.3.2 Flows The two-way preserve sync flow (Direction set as “twoWay”, Behavior set as “Preserve”, server IDValidity set as “false”, server ChangeLogValidity set as “true”) is depicted in the figure below.  OMA DS Client OMA DS Server Pkg #1: SyncAlert Request, Including IDContainer Pkg #4: Status and Data Items from Server Pkg #5: Status Mapping Package from Client Pkg #6: Status (of SyncHdr) from Server Pkg #1: SyncAlert Request Pkg #2: Status to indicate probl em, Request Fingerprints Session is initiated (typically includes authentication) Session Continues (o r End Session ) Pkg #2: Agree to sync, Specify data item identifiers Pkg #3: Send data items with fingerprints  Figure 14: Server Initiated Recovery Sync Flow Descriptions and examples for the above sync flows are as the follows: Pkg #1: The DS Client requests a normal sync process using the SyncAlert command.  Pkg #2: The DS Server indicates problem by status code 508 ”Recovery Required”, and sends back the server side sync type parameters by using the SyncAlert command.   Pkg #1: The DS Client requests a recovery sync process using the SyncAlert command, including IDContainer to indicate the data item identifiers and fingerprints.  Pkg #2: The DS Server compares the received fingerprints with the stored fingerprints for the data items, and sends back the status for the SyncAlert command and sends back the IDContainer in SyncAlert command to include data item identifiers to indicate the data items the client should send.    Page 68 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Pkg #3: the DS Client sends data items and associated fingerprints indicated by the server in Pkg #2. Pkg #4~Pkg #6 are similar as the normal sync.   7.2.3.3 Examples  The client initiated recovery sync examples are described as below. Note that the examples are informative and some elements (for example, SyncHdr) are omitted here for simplicity reason.  Pkg #1: The DS Client requests a two-way preserve sync. The client identifiers are valid and the client change log is valid. <SyncBody> <!-- --> <SyncAlert CmdID=\"3\">     <Anchor Last=\"001\" Next=\"002\" />     <TargetServerURI>./contacts</TargetServerURI>     <SourceClientURI>./dev-contacts</SourceClientURI> <SyncType Behaviour=\"Preserve\" Direction=\"twoWay\"            ChangeLogValidity=\"true\" IDValidity=\"true\"/> </SyncAlert> <Final/> </SyncBody> Pkg #2: The Last anchor matches. The server side change log is valid but the server side mapping table is lost. The server indicates the problem, and sends back the SyncAlert with the server side sync type parameters. <SyncBody> <!-- --> <Status CmdID=\"1\" MsgRef=\"1\" Cmd=\"SyncAlert\" CmdRef=\"3\" Code=\"508\" >  <ServerURI>./contacts</ServerURI>  <ClientURI>./dev-contacts</ClientURI> </Status> <SyncAlert CmdID=\"3\">     <Anchor Next=\"002\" />     <TargetClientURI>./dev-contacts</TargetClientURI>     <SourceServerURI>./contacts</SourceServerURI> <SyncType Behaviour=\"Preserve\" Direction=\"twoWay\"            ChangeLogValidity=\"true\" IDValidity=\"false\"/> </SyncAlert> <Final/> </SyncBody> Pkg #1: The DS Client requests a two-way preserve recovery sync, and uses IDContainer to indicate data item identifiers and fingerprints.  <SyncBody> <!-- --> <Status CmdID=\"2\" MsgRef=\"2\" Cmd=\"SyncAlert\" CmdRef=\"3\" Code=\"200\" >  <ServerURI>./contacts</ServerURI>  <ClientURI>./dev-contacts</ClientURI> </Status> <SyncAlert CmdID=\"3\">     <Anchor Last=\"001\" Next=\"002\" />     <TargetServerURI>./contacts</TargetServerURI>     <SourceClientURI>./dev-contacts</SourceClientURI> <SyncType Behaviour=\"Preserve\" Direction=\"twoWay\"            ChangeLogValidity=\"true\" IDValidity=\"false\"/> <IDContainer>    <ID FP=\"1234\">0001</ID>    <ID FP=\"2345\">0002</ID>    <ID FP=\"3456\">0003</ID>  </IDContainer> </SyncAlert> </SyncBody>  Page 69 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Pkg #2: The Last anchor matches, server side change log is valid, and the server side mapping table is invalid. The server agrees to sync. The server compares the fingerprints to recreate its mapping table, and determines the data items the client should send. <SyncBody> <!-- --> <Status CmdID=\"1\" MsgRef=\"1\" Cmd=\"SyncAlert\" CmdRef=\"3\" Code=\"200\" >  <ServerURI>./contacts</ServerURI>  <ClientURI>./dev-contacts</ClientURI> </Status> <SyncAlert CmdID=\"3\" NoStatus=\"true\">     <Anchor Next=\"002\" />     <TargetClientURI>./dev-contacts</TargetClientURI>     <SourceServerURI>./contacts</SourceServerURI> <SyncType Behaviour=\"Preserve\" Direction=\"twoWay\"            ChangeLogValidity=\"true\" IDValidity=\"false\"/> <IDContainer>      <ID>0002</ID>  </IDContainer> </SyncAlert> <Final/> </SyncBody> Pkg #3: The DS Client sends the modifications associated with fingerprints to the server. <SyncBody>   <!-- --> <Sync CmdID=\"3\" NumberOfChanges=\"1\" FreeID=\"81\" FreeMem=\"8100\">          <TargetServerURI>./contacts</TargetServerURI>          <SourceClientURI>./dev-contacts</SourceClientURI>          <Replace CmdID=\"4\" >             <Meta Type=\"text/x-vcard\" />             <Item>                <SourceClientURI FP=\"5678\">0002</SourceClientURI>                <Data>                   <!--The vCard data would be placed here.-->                </Data>             </Item>          </Replace>    </Sync>    <Final/> </SyncBody> Pkg #4: The DS Server returns status for client data items and sends the server side data items to the DS Client. <SyncBody>   <!-- -->   <Status CmdID=\"2\" MsgRef=\"2\" Cmd=\"Sync\" CmdRef=\"3\" Code=\"200\" >     <ServerURI>./contacts</ServerURI>     <ClientURI>./dev-contacts</ClientURI>   </Status> <Status CmdID=\"3\" MsgRef=\"2\" Cmd=\"Replace\" CmdRef=\"4\" Code=\"200\" /> <Sync CmdID=\"4\" NumberOfChanges=\"2\" FreeID=\"81\" FreeMem=\"8100\">          <TargetClientURI>./dev-contacts</TargetClientURI> <SourceServerURI>./contacts</SourceServerURI>                               <Replace CmdID=\"5\" >             <Meta Type=\"text/x-vcard\" />             <Item>                <TargetClientURI>0001</TargetClientURI>                <Data>                   <!--The vCard data would be placed here.-->                </Data>             </Item>          </Replace>          <Add CmdID=\"6\" >  Page 70 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]           <Meta Type=\"text/x-vcard\" />             <Item>                <SourceServerURI>ABCD12345_1024</SourceServerURI>                <Data>                   <!--The vCard data would be placed here.-->                </Data>             </Item>          </Add>    </Sync>    <Final/> </SyncBody> Pkg #5: The DS Client returns data mapping status for the server modifications to the DS Server. <SyncBody>   <!-- -->   <Status CmdID=\"2\" MsgRef=\"2\" Cmd=\"Sync\" CmdRef=\"4\" Code=\"200\" >     <ServerURI>./contacts</ServerURI>     <ClientURI>./dev-contacts</ClientURI>   </Status> <Status CmdID=\"3\" MsgRef=\"2\" Cmd=\"Replace\" CmdRef=\"5\" Code=\"200\" >    <StatusItem>    <ClientURI FP=\"6789\">0001</ClientURI> </StatusItem> </Status> <Status CmdID=\"4\" MsgRef=\"2\" Cmd=\"Add\" CmdRef=\"6\" Code=\"200\" >    <StatusItem>    <ServerURI>ABCD12345_1024</ServerURI>    <ClientURI FP=\"7890\">1024</ClientURI> </StatusItem> </Status>    <Final/> </SyncBody> Pkg #6: The DS Server returns status to the DS Client for the data mapping status package from client. <SyncBody>   <!-- -->   <Status CmdID=\"1\" MsgRef=\"3\" Cmd=\"SyncHdr\" CmdRef=\"1\" Code=\"200\" >     <!-- -->   </Status>    <Final/> </SyncBody>  7.2.4 Error Case Behaviors In this chapter, the recommended behaviors are defined in the cases of different error types. 7.2.4.1 No Packages from Server after Initialization If the client has sent its modifications to the server and it does not get the status associated with those modifications, the client MUST assume that the server has not received those client modifications. At the next time when synchronization is started, the modifications, to which the status was not received, MUST be sent to the server again. In case of one way sync from client, if the client has sent the empty sync command to the server, it does not get any complete response to it (new modifications), the client SHOULD abort this sync process and try to get the modifications later by starting the sync from the beginning. 7.2.4.2 No Data Update Status from Client If the server has sent its modifications to the client and it does not get the status associated with those server modifications, the server MUST assume that the client has not received those server modifications. Thus, at the next time when synchronization is started, the server modifications in addition to new ones MUST be sent to the client.  Page 71 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 7.2.4.3 No Data Map Acknowledge from Server If the client has sent the Status command containing mapping information to the server and it does not get response to this package, the client SHOULD assume that the server has not received the mapping information. Thus, the server SHOULD compare the sync anchors at the next time and indicate recovery sync in case of anchor mismatch. 7.2.4.4 Errors with Defined Error Codes If the device receives a defined error code (see [DSSYNTAX]), it MUST act according to that error type.    Page 72 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 8.  Sync Initialization The sync initialization implies that the actual synchronization (See Chapters 7), i.e., the sync commands, can also be transmitted and processed. Prior to the sync initialization, the DS server MAY send the Notification Package to the DS Client to trigger synchronization with it (See Chapter xx) but this does not remove the need for the initialization. The sync initialization has the following purposes: - To process the authentication between the DS Client and the DS Server on the SyncML level. - To indicate which datastores could be synchronized and which sync type parameters could be used. - To enable the exchange of device information of the DS Client and DS Server. The two first ones MUST be supported by the DS Client and the DS Server. The authentication is done by using the Cred and Chal element of the DS Syntax protocol. The sync type parameters negotiation is done by using the SyncAlert command of the DS Syntax protocol.   The exchange of device information is done by utilizing the Put and Get commands of the DS Syntax protocol and the Device Information Schema (See also Chapter 5.12). The initialization procedure is depicted in the figure below. Some parts of the procedure (some responses) can be included in the actual synchronization messages if it is necessary.  OMA DS Client OMA DS Server Client and server configured properly to enable communication with each other User Sync order Pkg #1: Client Initialization package to server Pkg #2: Server Initialization package to client Sync will continue according for the sync type(s) defined in the Alert commands. Pkg #3: Sync package including the completition of the Sync initialization.  Figure 15 MSC of Synchronization Initialization The arrows in all figures in this document represent SyncML packages, which can include one or more messages. The package flow presented above is one OMA DS session that means that all messages have the same OMA DS session ID. The purpose and the requirements for each of the packages in the figure above are considered in the next sections. 8.1     Initialization Requirements for Client As described in the previous chapter, the DS Client needs to inform the DS Server which datastores or which part of datastores it wants to synchronize and which sync type parameters are desired. The DS Client MAY also include the authentication information and the client device information into this initialization.  Page 73 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] The datastores or part of the datastores, which are desired to be synchronized, are indicated in the separate SyncAlert commands. I.e., for each datastore or part of datastore, a separate SyncAlert command MUST be included in the SyncBody. In addition, the SyncAlert command is used to exchange the sync anchors. The sync type parameters are indicated in the SyncAlert command. See Section 5.1 for sync type negotiation parameters. The authentication information, if it is included, MUST be placed inside the Cred element in the SyncHdr. Either the Basic or the SHA-256 Digest credential type can be used. The device information, if it is included, MUST be sent by using the Put command in the SyncBody element. The device information MUST conform to the Device Information Schema. The DS Client can also ask the device information of the DS Server. The Get command is used for this operation.  The detailed requirements for the sync initialization package (Pkg #1 in Figure 15) from the DS Client to the DS Server are: 1. Requirements for the elements within the SyncML element. - The Version attribute MUST be included to specify the version of the protocol. The value MUST be ‘2.0’ when complying with this specification. 2. Requirements for the elements within the SyncHdr element. - SessionID MUST be included to indicate the ID of a sync session. - MsgID MUST be used to unambiguously identify the message belonging to a sync session and traveling from the DS Client to the DS Server. - The TargetServerURI element MUST be used to identify the DS Server. - The SourceClientURI element MUST be used to identify the DS Client. - The Cred element MUST be included if the authentication is needed. 3. The SyncAlert element(s) for each datastore or part of datastore to be synchronized MUST be included in SyncBody. The requirements for the elements or attributes within the SyncAlert element(s) are described as the following: - CmdID MUST be used. - NoStatus SHOULD NOT be specified within the SyncAlert command. - SyncType element MUST be used to specify the sync type parameters requested by the DS Client. - IDContainer element MAY be used to send the data item identifiers and fingerprints to the DS Server. In case of recovery sync, the DS Client can send the data item identifiers and fingerprints to the DS Server. After comparison, the DS Server can send back the identifiers and fingerprints for the data items that the DS Server requests the DS Client to send. - TargetServerURI MUST be used to specify the address of the DS Server interior node, and it can point to a datastore or a folder. - SourceClientURI MUST be used to specify the address of the DS Client interior node, and it can point to a datastore or a folder. - The sync anchors of the DS Client MAY be included to specify the previous and current (Last and Next) sync anchors (See also Chapter 5.5.1). The sync anchors are carried inside the Anchor element. - Fiter element MAY be used to specify the filtering criteria.  Page 74 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] - Correlator attribute MAY be used to correlate the SyncAlert request sent by the DS Client and the SyncAlert response sent by the DS Server. 4. If the client device information is sent from the DS Client to the DS Server, the following requirements for the Put command in the SyncBody exist. - CmdID MUST be used. - The Type attribute MUST be included in the Meta element of the Put command to indicate that the type of the data is the type of the Device Information Schema. - The SourceClientURI element in the Item element MUST be used to specify the URI of the client device information. - The Data element in the Item element is used to carry the device information data. 5. If the DS Client requests the device information from the DS Server, the following requirements for the Get command in the SyncBody exist. - CmdID MUST be used. - The Type attribute MUST be included in the Meta element of the Get command to indicate that the type of the data is the type of the Device Information Schema. - The TargetServerURI element in the Item element is used to specify the URI of the server device information. 6. The Final element MUST be used for the message, if this message is the last one in this package.  8.1.1 Example of Sync Initialization Package from Client  <SyncML Version=\"2.0\">    <SyncHdr SessionID=\"4\" MsgID=\"1\" MaxMsgSize=\"5000\">       <TargetServerURI>http://www.syncml.org/sync-server</TargetServerURI>       <SourceClientURI>IMEI:493005100592800</SourceClientURI>       <Cred> <!--The authentication is optional.-->          <Meta Type=\"syncml:auth-basic\"/>          <Data>QnJ1Y2UyOk9oQmVoYXZl</Data> <!--base64 formatting of \"userid:password\"--> </Cred>    </SyncHdr> <SyncBody>       <SyncAlert CmdID=\"1\" > <Anchor Last=\"234\" Next=\"276\"/> <TargetServerURI>./contacts/james_bond</TargetServerURI>          <SourceClientURI>./dev-contacts</SourceClientURI>          <SyncType Direction=\"twoWay\" Behaviour=\"Preserve\"                    ChangeLogValidity=\"true\" IDValidity=\"true\"/>       </SyncAlert>       <Put CmdID=\"2\">          <Meta Type=\"application/vnd.syncml-devinf+xml\"/>          <Item>             <SourceClientURI>./devinf20</SourceClientURI>             <Data><![CDATA[                <DevInf xmlns='syncml:devinf20' Version=\"2.0\">                   <DevCap UTC=\"true\" SupportLargeObjs=\"true\" SupportNumberOfChanges=\"true\"> <Man>Big Factory, Ltd.</Man>                     <Model>4119</Model>                     <OEM>Jane’s phones</OEM>                     <FwV>2.0e</FwV>  Page 75 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]                     <SwV>2.0</SwV>                     <HwV>1.22I</HwV>                     <DevID>1218182THD000001-2</DevID>                     <DevType>phone</DevType>                 </DevCap>                   <DataStore DisplayName=\"Phonebook\" MaxGUIDSize=\"32\">                      <SourceRef>./contacts</SourceRef>                                      <RxTx-CT> <Rx-Pref>                         <CTType>text/x-vcard</CTType>                         <VerCT>2.1</VerCT>                       </Rx-Pref>                       <Tx-Pref>                         <CTType>text/x-vcard</CTType>                         <VerCT>2.1</VerCT>                       </Tx-Pref>                    </RxTx-CT>                      <CTCap>                         <CTType>text/x-vcard</CTType>                         <VerCT>2.1</VerCT>                         <Property>                            <PropName>BEGIN</PropName>                            <ValEnum>VCARD</ValEnum>                         </Property>                         <Property>                            <PropName>END</PropName>                            <ValEnum>VCARD</ValEnum>                         </Property>                         <Property>                            <PropName>VERSION</PropName>                            <ValEnum>2.1</ValEnum>                         </Property>                         <Property>                            <PropName>N</PropName>                         </Property>                         <Property>                            <PropName>TEL</PropName>                            <PropInfo> <MaxOccur>5</MaxOccur> </PropInfo>                            <PropParam ParamName=\"TYPE\">                            <ValEnum>VOICE, CELL</ValEnum>                            <ValEnum>VOICE, HOME</ValEnum>                         </PropParam>                      </Property>                      <Property>                         <PropName>NOTE</PropName>                      <PropInfo>                             <MaxOccur>1</MaxOccur>                            <MaxSize Truncate=\"false\">255</MaxSize>                      </PropInfo>                      </Property>                      <Property>                         <PropName>PHOTO</PropName>                         <PropInfo> <MaxOccur>1</MaxOccur>                      </PropInfo>                         <PropParam ParamName=\"TYPE\">                            <ValEnum>JPEG</ValEnum>                         </PropParam>                      </Property>                   </CTCap>                   <SyncCap SupportHierarchicalSync=\"true\"/>                </DataStore>  Page 76 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]                </DevInf>]]>             </Data>          </Item>       </Put>       <Get CmdID=\"3\" >          <Meta Type=\"application/vnd.syncml-devinf+xml\"/>          <Item>             <TargetServerURI>./devinf20</TargetServerURI>          </Item>       </Get>       <Final/>    </SyncBody> </SyncML>  8.2     Initialization Requirements for Server When the DS Server has received the sync initialization package from the DS Client, it completes the initialization phase by responding to the DS Client from the DS Server perspective. To complete the initialization, the DS Server sends its authentication information, sync anchors, and device information back to the client. The DS Server MAY change the client indicated sync type parameters and send the new sync type parameters back to DS Client. The DS Client MAY accept the sync type parameters sent by the DS Server, or the DS Client can initiate another new session. The detailed requirements for the sync initialization package (Pkg #2 in Figure 4) from the server to the client are: 1. Requirements for the elements within the SyncHdr element are the same as the requirements for the SyncHdr element sent by the DS Client, except the message direction. 2. The Status MUST be returned for the SyncAlert command sent by the DS Client if the DS Client requested the response. This can be sent before Package #1 is completely received (See Chapter 5.14). - If the DS Client is not authenticated to use the service, the sync type parameter is not desired (e.g., recovery sync needed), or some other error occurs, the DS Server MUST return an error for that. 3. If the DS Client sent the device information to the DS Server, the DS Server MUST be able to receive it and the Status MUST be returned for the Put command. This can be sent before Package #1 is completely received. 4. If the DS Client requested the device information of the DS Server, the Status element MUST be returned and the Results element MAY be returned. This can be sent before Package #1 is completely received. The requirements for the Results element are described as the following: - The Type attribute MUST be included in the Meta element in the Results element to indicate that the type of the data is the type of the Device Information Schema. - The SourceServerURI element in the Item element is used to specify the URI of the device information of the DS Server. - The Data element in the Item element is used to carry the device information of the DS Server. 5. The SyncAlert element(s) for each datastore to be synchronized MUST be included in SyncBody and the following requirements exist for the SyncAlert command. - CmdID MUST be used. - NoStatus SHOULD NOT be specified within the SyncAlert command. - The SyncType element MUST be used to specify the sync type parameters determined by the DS Server. If the sync type parameters are different than the sync type parameters requested by the DS Client, the DS Client SHOULD follow these new sync type parameters when synchronization is continued.  Page 77 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] - IDContainer element MAY be used to send to the DS Client the identifiers and fingerprints for data items that the DS Server requests the DS Client to send.  - TargetClientURI MUST be used to specify the address of the DS Client interior node, and it can point to a datastore or a folder. - SourceServerURI MUST be used to specify the address of the DS Server interior node, and it can point to a datastore or a folder.. - The sync anchors of the DS Server MAY be included to specify the previous and current (Last and Next) sync anchors of the DS Server (See also Chapter 5.5.1).  - Correlator attribute MUST be used, if the SyncAlert request includes the Correlator attribute. The  Correlator attribute within the SyncAlert response sent by the DS Server MUST be the same as the Correlator attribute within the SyncAlert request sent by the DS Client. 6. If the server device information was not requested by the DS Client, the DS Server MAY send it to the DS Client by using the Put command. The requirements for the Put command in the SyncBody are the same as the requirements for the Put command sent by the DS Client, except the message direction. 7. If the DS Client did not send its device information and the DS Server needs to retrieve them, the DS Server can request those by using the Get command. The requirements for the Get command in the SyncBody are the same as the requirements for the Get command sent by the DS Client, except the message direction. 8. The Final element MUST be used for the message, if this message is the last one in this package. To complete the sync initialization from the client side, the DS Client MUST respond to the commands (SyncAlert, possible Put and Get) sent by the DS Server, if NoStatus attributes are not specified for the commands. The Status elements and the Result element associated with the commands can be returned in the first package occurring in actual synchronization (that is, Package #3). 8.2.1 Example of Sync Initialization Package from Server  <SyncML Version=\"2.0\">    <SyncHdr SessionID=\"4\" MsgID=\"1\" >       <TargetClientURI>IMEI:493005100592800</TargetClientURI>       <SourceServerURI>http://www.syncml.org/sync-server</SourceServerURI>       <Cred> <!--The authentication is optional.-->          <Meta Type=\"syncml:auth-basic\"/>          <Data>QnJ1Y2UyOk9oQmVoYXZl</Data> <!--base64 formatting of \"userid:password\"-->      </Cred>    </SyncHdr>    <SyncBody>       <Status CmdID=\"1\" MsgRef=\"1\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"212\"> <!--Statuscode for OK, authenticated for session-->          <ServerURI>http://www.syncml.org/sync-server</ServerURI>          <ClientURI>IMEI:493005100592800</ClientURI>              </Status>       <Status CmdID=\"2\" MsgRef=\"1\" CmdRef=\"1\" Cmd=\"SyncAlert\" Code=\"200\">          <ServerURI>./contacts/james_bond</ServerURI>          <ClientURI>./dev-contacts</ClientURI>       </Status>       <Status CmdID=\"3\" MsgRef=\"1\" CmdRef=\"2\" Cmd=\"Put\" Code=\"200\" />       <Status CmdID=\"4\" MsgRef=\"1\" CmdRef=\"3\" Cmd=\"Get\" Code=\"200\" />       <Results CmdID=\"5\" MsgRef=\"1\" CmdRef=\"3\">          <Meta Type=\"application/vnd.syncml-devinf+xml\"/>          <Item>             <SourceServerURI>./devinf20</SourceServerURI>             <Data><![CDATA[                <DevInf xmlns='syncml:devinf20' Version=\"2.0\">  Page 78 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]                   <DevCap UTC=\"true\" SupportLargeObjs=\"true\" SupportNumberOfChanges=\"true\">           <Man>Small Factory, Ltd.</Man>                      <Model>Tiny Server</Model>                      <OEM>Tiny Shop</OEM>                      <FwV>1.0.1</FwV>                      <SwV>2.0</SwV>                      <HwV>1.0</HwV>                      <DevID>485749KR</DevID>                      <DevType>Server</DevType>                 </DevCap>                   <DataStore DisplayName=\"Addressbook\">                      <SourceRef>./contacts</SourceRef>                                      <RxTx-CT> <Rx-Pref>                         <CTType>text/x-vcard</CTType>                         <VerCT>2.1</VerCT>                       </Rx-Pref>                       <Rx>                         <CTType>text/vcard </CTType>                         <VerCT>3.0</VerCT>                       </Rx>                       <Tx-Pref>                         <CTType>text/x-vcard</CTType>                         <VerCT>2.1</VerCT>                       </Tx-Pref>                       <Tx>                         <CTType>text/vcard</CTType>                         <VerCT>3.0</VerCT>                       </Tx>                   </RxTx-CT>                      <CTCap>                         <CTType>text/x-vcard</CTType>                         <VerCT>2.1</VerCT>                         <Property>                            <PropName>BEGIN</PropName>                            <ValEnum>VCARD</ValEnum>                         </Property>                         <Property>                            <PropName>END</PropName>                            <ValEnum>VCARD</ValEnum>                         </Property>                         <Property>                            <PropName>VERSION</PropName>                            <ValEnum>2.1</ValEnum>                         </Property>                         <Property>                            <PropName>N</PropName>                         </Property>                         <Property>                            <PropName>TEL</PropName>                            <PropInfo> <MaxOccur>8</MaxOccur>                            </PropInfo>                            <PropParam ParamName=\"TYPE\">                               <ValEnum>VOICE, CELL</ValEnum>                               <ValEnum>VOICE, HOME</ValEnum>                               <ValEnum>FAX, HOME</ValEnum>                            </PropParam>                         </Property>                         <Property>                            <PropName>NOTE</PropName>                            <PropInfo> <MaxOccur>1</MaxOccur>                              <MaxSize Truncate=\"false\">1024</MaxSize>  Page 79 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]                         </PropInfo>                         </Property>                         <Property>                            <PropName>PHOTO</PropName>                            <PropInfo> <MaxOccur>1</MaxOccur>                            </PropInfo>                            <PropParam ParamName=\"TYPE\">                               <ValEnum>JPEG</ValEnum>                               <ValEnum>GIF</ValEnum>                            </PropParam>                         </Property>                      </CTCap>                      <CTCap>                         <CTType>text/vcard</CTType>                         <VerCT>3.0</VerCT>                         <Property>                            <PropName>BEGIN</PropName>                            <ValEnum>VCARD</ValEnum>                         </Property>                         <Property>                            <PropName>END</PropName>                            <ValEnum>VCARD</ValEnum>                         </Property>                         <Property>                            <PropName>VERSION</PropName>                            <ValEnum>3.0</ValEnum>                         </Property>                         <Property>                            <PropName>N</PropName>                         </Property>                         <Property>                            <PropName>TEL</PropName>                            <PropInfo> <MaxOccur>8</MaxOccur> </PropInfo>                            <PropParam ParamName=\"TYPE\">                               <ValEnum>VOICE, CELL</ValEnum>                               <ValEnum>VOICE, HOME</ValEnum>                               <ValEnum>FAX, HOME</ValEnum>                            </PropParam>                         </Property>                         <Property>                            <PropName>NOTE</PropName>                            <PropInfo> <MaxOccur>1</MaxOccur>                               <MaxSize Truncate=\"false\">1024</MaxSize>                         </PropInfo>                         </Property>                         <Property>                            <PropName>PHOTO</PropName>                            <PropInfo> <MaxOccur>1</MaxOccur> </PropInfo>                            <PropParam ParamName=\"TYPE\">                               <ValEnum>JPEG</ValEnum>                               <ValEnum>GIF</ValEnum>                            </PropParam>                         </Property>                      </CTCap>                      <SyncCap/>                   </DataStore>                </DevInf>]]>             </Data>  Page 80 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]          </Item>       </Results>       <SyncAlert CmdID=\"6\"> <Anchor Next=\"276\"/> <TargetClientURI>./dev-contacts</TargetClientURI>          <SourceServerURI>./contacts/james_bond </SourceServerURI>          <SyncType Direction=\"twoWay\" Behaviour=\"Preserve\"                    ChangeLogValidity=\"true\" IDValidity=\"true\"/>       </SyncAlert>       <Final/>    </SyncBody> </SyncML>  8.3     Sync without Separate Initialization Synchronization can be started without a separate initialization (See the initialization in Chapter 8). This means that the initialization is done simultaneously with sync. This can be done to decrease the number of SyncML messages to be sent over the air. The DS Client MAY support the feature \"Sync without separate initialization\". The DS Server MUST support the feature \"Sync without separate initialization\". When the DS Client initiates the synchronization session, it combines the Package #1 within the Package #3. The SyncAlert command(s) (from the DS Client) in Package #1 is sent within Package #3, in which the Sync command(s) are also placed. The DS Server MUST combine Package #2 within Package #4. The SyncAlert command(s) (from DS Server) in Package #2 is sent within Package #4, in which the Sync command(s) are also placed. See the example in 8.3.2. 8.3.1 Robustness and Security Considerations If the DS Client implementation decides to use sync without a separate initialization, the following considerations SHOULD be taken into account: - The DS Client sends its modifications to the DS Server before the DS Server gets the sync anchors from the client. Because of this, the DS Client MAY need to send all data again if the DS Server has a need to request a recovery sync (Section 9.5). - Server sync anchor are not received before sending the client modifications. Thus, if the DS Client needs to request a recovery sync, earlier data, which was sent in Package #3 to the server, was unnecessarily sent and all data needs to be sent to DS Server. - The DS Client sends its modifications to the DS Server before there is any possibility for the DS Server to send its credentials (if requested) to the DS Client. That is, the DS Client cannot be sure whether it is communicating with the correct DS Server. 8.3.2 Example of Sync without Separate Initialization Here is shown an example, how the DS Client starts sync without a separate sync initialization. Only two packages are shown here (combination of Packages #1 and #3 and the combination of Packages #2 and #4). Package #5 and #6 can follow as defined in the specification. Combination of Package #1 and #3 <SyncML Version=\"2.0\">    <SyncHdr SessionID=\"4\" MsgID=\"1\" >       <TargetServerURI>http://www.syncml.org/sync-server</TargetServerURI>       <SourceClientURI>IMEI:493005100592800</SourceClientURI>       <Cred> <!--The authentication is optional.-->          <Meta Type=\"syncml:auth-basic\" Format=\"b64\"/>          <Data>QnJ1Y2UyOk9oQmVoYXZl</Data> <!--base64 formatting of “userid:password”-->       </Cred>  Page 81 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]    </SyncHdr>    <SyncBody>       <SyncAlert CmdID=\"1\" > <Anchor Last=\"234\" Next=\"276\"/> <TargetServerURI>./contacts/james_bond</TargetServerURI>          <SourceClientURI>./dev-contacts</SourceClientURI>          <SyncType Direction=\"twoWay\" Behaviour=\"Preserve\"                      ChangeLogValidity=\"true\" IDValidity=\"true\"/>       </SyncAlert>       <Sync CmdID=\"2\" FreeMem=\"8100\" FreeID=\"81\" NumberOfChanges=\"1\" > <!--Free memory (bytes) in Calendar datastore on a device --> <!--Number of free records in Calendar datastore-->          <TargetServerURI>./contacts/james_bond</TargetServerURI>          <SourceClientURI>./dev-contacts</SourceClientURI>          <Replace CmdID=\"3\" >             <Meta Type=\"text/x-vcard\" />             <Item>                <SourceClientURI>1012</SourceClientURI>                <Data><!--The vCard data would be placed here.--></Data>             </Item>          </Replace>       </Sync>       <Final/>    </SyncBody> </SyncML> Combination of Package #2 and #4 <SyncML Version=\"2.0\">    <SyncHdr SessionID=\"4\" MsgID=\"1\" >       <TargetClientURI>IMEI:493005100592800</TargetClientURI>       <SourceServerURI>http://www.syncml.org/sync-server</SourceServerURI>    </SyncHdr>    <SyncBody>       <Status CmdID=\"1\" MsgRef=\"1\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"212\"> <!--Status code for OK, authenticated for session-->          <ServerURI>http://www.syncml.org/sync-server</ServerURI>          <ClientURI>IMEI:493005100592800</ClientURI>       </Status>       <Status CmdID=\"2\" MsgRef=\"1\" CmdRef=\"1\" Cmd=\"SyncAlert\" Code=\"200\">          <ServerURI>./contacts/james_bond</ServerURI>          <ClientURI>./dev-contacts</ClientURI>       </Status>       <Status CmdID=\"3\" MsgRef=\"1\" CmdRef=\"2\" Cmd=\"Sync\" Code=\"200\"> <!--Status code for Success-->          <ServerURI>./contacts/james_bond</ServerURI>          <ClientURI>./dev-contacts</ClientURI>       </Status>       <Status CmdID=\"4\" MsgRef=\"1\" CmdRef=\"3\" Cmd=\"Replace\" Code=\"200\" />       <SyncAlert CmdID=\"5\" > <Anchor Last=\"234\" Next=\"276\"/>          <TargetClientURI>./dev-contacts</TargetClientURI> <SourceServerURI>./contacts/james_bond</SourceServerURI>          <SyncType Direction=\"twoWay\" Behaviour=\"Preserve\"                      ChangeLogValidity=\"true\" IDValidity=\"true\"/>       </SyncAlert>       <Sync CmdID=\"6\" NumberOfChanges=\"2\" >          <TargetClientURI>./dev-contacts</TargetClientURI>          <SourceServerURI>./contacts/james_bond</SourceServerURI>          <Replace CmdID=\"7\" >             <Meta Type=\"text/x-vcard\" />             <Item>                <TargetClientURI>1023</TargetClientURI>                <Data><!--The vCard data would be placed here.--></Data>             </Item>  Page 82 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]          </Replace>          <Add CmdID=\"8\" >             <Meta Type=\"text/x-vcard\" />             <Item>                <SourceServerURI>10536681</SourceServerURI>                <Data><!--The vCard data would be placed here.--></Data>             </Item>          </Add>       </Sync>       <Final/>    </SyncBody> </SyncML>  8.4     Separate Device Information Negotiation Device information negotiation can be done separately, without performing data synchronization. In case that the device has either been upgraded, or the user has selected additional data sections to synchronize, the DS Client and the DS Server can negotiate their device information without performing data synchronization. Figure X shows the device information negotiation flow:   OMA DS Client OMA DS Server 2: Acknowledgement of client device information and return server device information 1: Send client device information and retrieve server device information Session Ends  Figure 16:  Separate Device Information Negotiation Flow The detailed flow is as the following: Step 1: The DS Client sends its device information to the DS Server, and retrieves the server device information. Step 2: The DS Server sends back acknowledgement of client device information and returns the server device information. Then the session ends. In the separate device information negotiation session, the Alert request and response is not necessary because the DS Client and DS Server don’t need to perform data synchronization on the data stores. In the device information negotiation session request, the Type element MUST be included in the Meta element of the Put command to indicate that the type of the data is the type of the Device Information Schema.  8.5     Error Case Behaviors In this chapter, the recommended behaviors are defined in the cases of different error types, which can occur during the sync initialization.  Page 83 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 8.5.1 No Packages from Server If the client has sent its sync initialization package to the server and it does not get any complete response to it, the client MUST assume that the server has not received the sync initialization package of the client. The client MUST send its sync initialization package again later. 8.5.2 No Initialization Completion from Client If the server has sent its sync initialization package to the client and it does not get any complete response to it (Refer Pkg #3), the server MUST assume that the client has not received the sync initialization package of the server. The server can drop the session and the sync initialization MUST be started from the beginning when synchronization is started at the next time. 8.5.3 Initialization Failure If the initialization fails, a defined error code in [DSSYNTAX] is sent, the devices MUST act according that error type.  Page 84 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 9.  Security 9.1     Credentials Two examples of credentials exchanged between DS Client and DS Server are shown in the following list. 1. Server Identifier (this is a unique ID that identifies the DS Server), a shared secret. 2. User Identifier (this is a unique ID that identifies the DS Client), a shared secret. When the DS Server authenticates the DS Client, the DS Server SHALL use a different shared secret for each DS Client it serves, in order that a DS Client can not pose effectively as this DS Server in a interaction with another DS Client. In order for the DS Client to authenticate with a specific DS Server, the credentials for the DS Server MUST be initially provisioned to the DS Client.  The credentials MAY be managed with the OMA DM enabler [DM_ERELD]. The DS MO specification [DS_MO] documents the use of OMA DS data such as credentials in the OMA DM management tree.  9.2     Authentication In this chapter, the authentication procedures are defined for the any of the hash-function based authentication schemes described in [DSSYNTAX] 9.2.1 Authentication Challenge If the response code to a request is ‘(407) Credential required’, it means that a credential is required for authentication purpose. In this case, the Status command to the request MUST include a Chal element which contains a challenge applicable to the requested resource. The DS Client MAY repeat the request with a suitable credential contained in a Cred element. If the status code to a request is ‘(401) Unauthorized’, it means that authorization has been refused for those credentials. The DS Client need not repeat the request with the same credentials. Both the DS Client and the DS Server can challenge for authentication. If the response code to a request is ‘(212) Authentication accepted’, no further authentication is needed for the remainder of the synchronization session.  If a request includes credentials and the response code to the request is ‘(200) Command completed successfully’, the same credentials MAY be sent within the next request.  In the case of the hash-function based authentication scenario, whether the response code is 212 or 200, the Chal element can be returned. Then, the next nonce in Chal MUST be used for computing the digest when the next sync request is sent. Once authentication has occurred, the authentication scheme for a security layer SHOULD be kept same for the whole session. In case of authentication failure: - The response message indicating the authentication failure on the protocol layer SHOULD contain only Status commands. A Status command MUST be provided for every command received in the request. - If the session is continued, the next message: o SHOULD contain the proper credentials.  o MUST contain a Status for the SyncHdr of the message indicating the authentication failure. o MUST have the same session ID as the previous messages.  Page 85 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] o MUST be sent to the RespURI, if a RespURI was specified. 9.2.2 Authorization The Cred element MUST be included in requests (message or command), which are sent after receiving the 401 or 407 responses if the request is repeated. In addition, it can be sent in the first request from a device if the authentication is mandated through pre-configuration. The content of the Cred element is specified in [DSSYNTAX]. The authentication type is dependent on the challenge (See the previous chapter) or the pre-configuration. 9.2.3 Protocol Layer Authentication When the authentication is considered, the DS Client MUST support the protocol layer authentication by specifing the credentials in the SyncHdr element. The challenge for the authentication is carried within the Status command.  The authentication can happen in both directions, i.e., the DS Client can authenticate itself to the DS Server and vice versa. 9.2.4 Datastore Layer Authentication The DS Client MAY support datastore layer authentication.  The datastore layer authentication is accomplished by using the Cred element in the SyncAlert and Sync commands. Within the Status element, the challenge for the authentication MAY be specified. The authentication can happen in both directions, i.e., the DS Client can authenticate itself to the DS Server and vice versa. 9.2.5 Authentication Examples 9.2.5.1 SHA-256 authentication with a challenge At this example, the DS Client tries to initiate sync with the DS Server without any credentials (Pkg #1). The DS Server challenges the DS Client (Pkg #2) for the protocol layer authentication using the SHA-256 authentication scheme. The DS Client sends Pkg #1 again with the credentials. The DS Server accepts the credentials and the session is authenticated (Pkg #2). Then the DS Server sends the next nonce to the DS Client, which the DS Client will use when the next sync request is started. In the example, commands in SyncBody are not shown although in practice, they would be there. Pkg #1 from Client <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"          Version=\"2.0\">    <SyncHdr SessionID=\"1\" MsgID=\"1\">        <TargetServerURI>http://www.openmobilealliance.org/sync-server</TargetServerURI>        <SourceClientURI>IMEI:493005100592800</SourceClientURI>    </SyncHdr>    <SyncBody>         ......    </SyncBody> </SyncML>  Pkg #2 from Server <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">    <SyncHdr SessionID=\"1\" MsgID=\"2\">        <TargetClientURI>IMEI:493005100592800 </TargetClientURI>        <SourceServerURI>http://www.openmobilealliance.org/sync-server</SourceServerURI>    </SyncHdr>    <SyncBody>        <Status CmdID=\"1\" MsgRef=\"1\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"407\" >           <!-- Credential required-->  Page 86 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]             <Chal> <Meta Type=\"syncml:auth-sha256\" Format=\"b64\" />                 <NextNonce>Tm9uY2U=</NextNonce>             </Chal>        </Status>         ......     </SyncBody> </SyncML>  Pkg #1 (with credentials) from Client <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">    <SyncHdr SessionID=\"1\" MsgID=\"2\">        <TargetServerURI>http://www.openmobilealliance.org/sync-server</TargetServerURI>        <SourceClientURI>IMEI:493005100592800</SourceClientURI>        <Cred AuthName=\"Bruce2\"> <Meta Type=\"syncml:auth-sha256\" Format=\"b64\"/> <Data>BlahBlahBlahBlah==</Data> </Cred> <!-- Base64 coded SHA-256 digest for user \"Bruce2\", shared secret      \"OhBehave\", nonce \"Nonce\" -->     </SyncHdr>     <SyncBody>         ......     </SyncBody> </SyncML>  Pkg #2 from Server <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">   <SyncHdr SessionID=\"1\" MsgID=\"2\">       <TargetClientURI>IMEI:493005100592800 </TargetClientURI>       <SourceServerURI>http://www.openmobilealliance.org/sync-server</SourceServerURI>   </SyncHdr>   <SyncBody>       <Status CmdID=\"1\" MsgRef=\"2\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"212\" >         <!--Authenticated for session-->           <Chal> <Meta Type=\"syncml:auth-sha256\" Format=\"b64\" />               <NextNonce>BlahBlahBlah=</NextNonce>         <!--This nonce is used when the next session is started-->           </Chal>       </Status>         ......   </SyncBody> </SyncML> 9.3     Integrity The OMA DS provides the messages integrity protection by specifying the hashed message authentication code (HMAC) in the underlying transport header. The message authentication code is computed according to the procedure as described in section 7.3.1. Both, the DS Client and the DS Server can challenge the other side for integrity protection. The sender SHALL specify the integrity protection challenge in the underlying transport header.  Page 87 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Once integrity protection has occurred, the hashed message authentication code SHALL be used on every message transferred between the DS Client and DS Server. 9.3.1 How the HMAC is computed The HMAC value SHALL be computed according to the HMAC mechanism specified in [RFC2104]. The HMAC value SHALL be computed as following: Let H = the Hashing function. Let Digest = the output of the Hashing function. Let B64 = the base64 encoding function. Let userid = User Identifier. Let secret = Secrete known by the sender and recipient. Let nonce = Challenge specified by the authenticator Digest = H(B64(H(userid:secret)):nonce:B64(H(message body)))  The DS Client and DS Server SHALL support SHA-256 hashing function. And other hashing functions are not excluded, e.g. SHA-1. 9.3.2 How the HMAC is specified in the OMA DS message The HMAC value SHALL be transported along with the original OMA DS message. This is achieved by inserting the HMAC value into a transport header called x-syncml-hmac.  This mechanism works identically on HTTP, WAP, OBEX and other transport protocols.  The HMAC is computed initially by the sender against the entire message body independent with the message format.  Upon receiving a message, the recipient SHALL use the same procedure to compute its own HMAC value and verify whether they are identical in order to ensure the authenticity of the sender, and also the integrity of the message.  If the ‘userid’ is incorrect or the HMAC values are not identical, then an authentication failure results SHALL be returned to the sender. Once the integrity protection mechanism is used, the NextNonce element SHALL be sent and used for the next HMAC credential check. The header x-syncml-hmac contains multiple parameters, including the HMAC value, the user or server identifier, and an optional indication of which HMAC algorithm is in use.  The value of the x-syncml-hmac header is defined as a comma separated list of attribute-values pairs. The rule ‘#rule’ and the terms ‘token’ and ‘quoted-string’ are used in accordance to the definition in the HTTP 1.1 specified in [RFC2616]. Here is the formal definition: syncml-hmac = #syncml-hmac-param syncml-hmac-param = (algorithm | userid | mac) algorithm = \"algorithm\" \"=\" (\"SHA-256\" | token) userid = \"userid\" \"=\" userid-value mac = \"mac\" \"=\" mac-value userid-value = quoted-string mac-value = base64-string Note that a base64-string is any concatenation of the characters belonging to the base64 Alphabet, as defined in [RFC2045]. The following is an example:  Page 88 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] x-syncml-hmac: algorithm=SHA-256, userid=\"Robert Jordan\", mac=NTI2OTJhMDAwNjYxODkwYmQ3NWUxN2RhN2ZmYmJlMzk 9.4     Confidentiality Confidentiality in OMA DS has two major aspects: the protocol layer encryption and transport layer encryption which can be used either separately or together. 9.4.1 Protocol Layer Encryption OMA DS supports the protocol layer encryption by using the Symmetric Cryptography in which the same key is used for both encryption and decryption. The DS Client generates the symmetric key and transports it to the DS Server under the protection of the Public-Key Cryptography. When the encryption is considered, the DS Client SHALL support the protocol layer encryption by specifies the EncryptedKey element in the SyncHdr element.  9.4.1.1 Symmetric Key Transport During the initialization phase, the DS Client generates the symmetric key and encrypts the key using the DS Server’s public key. The DS Client should obtain this public key beforehand. After receiving the initialization request, the DS Server determining whether this request comprises an encryption indicator, if yes, the DS Server obtains the encrypted key from the EncryptedKey element. Then the DS Server decrypts it using its private key to get the symmetric key and meanwhile initialization operations being performed.  9.4.1.2 Encryption Challenge If there is no encryption indicator in the initialization request, and the DS Server requires encryption, the status code ‘(432) Encryption Required’ MUST be returned to the DS Client.  The DS Server and Client MUST support the RSAES-PKCS1-v1_5 algorithm specified in [RFC2437] as the symmetric key transport algorithm. However, other algorithms outside of this specification are not excluded. If other algorithms are specified and the DS Server doesn’t support them, the status code ‘(429) Key Exchange Algorithm not supported’ MUST be returned to the DS Client. The DS Server and Client MUST support the AES-128-CBC algorithm as the symmetric key algorithm. If other algorithms are specified and the DS Server doesn’t support them, the status code ‘(430) Data Encryption Algorithm not supported’ MUST be returned to the DS Client. If the DS Server doesn’t support the key length, the status code ‘(431) Key length not supported’ MUST be returned to the DS Client. If encryption indicator is not specified, or algorithm is not supported, or key length is not supported, the Status command to the request MUST include a Chal element contains a challenge applicable to the requested source. The DS Client SHOULD repeat the request with a suitable encryption indicator contained in an EncryptedKey element. 9.4.1.3 Data Encryption During the synchronization phase, the DS Client transmits synchronization data encrypted by the symmetric key to the DS Server. The DS Server decrypts the data by the acquired symmetric key before performing synchronization operations, after that, it encrypts its own data with the symmetric key and transmits the encrypted data to the DS Client. Also the DS Client decrypts the data by the symmetric key before performing synchronization operations. During the synchronization phase, both the DS Client and Server MUST use the same symmetric key for encryption and decryption. In this procedure the DS Client and DS Server can use the Encrypted attribute for each sync commands (e.g. Add, Replace) to indicate whether the specific content is encrypted. B64 encoding attribute SHOULD apply prior to encryption.  Page 89 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 9.4.1.4 Certificate The DS Server distributes its public key contained in a certificate used by client to encrypt the symmetric key. Only the server possesses the private key that can decrypt the cryptograph and obtain the original symmetric key.  The provisioning of certificates and the certificates management is specified in [DS_MO]. In practice, the DS Client can obtain the DS Server’s certificate from the Certificate Authority (CA) or the trusted DS Server.  9.4.1.5 Examples 9.4.1.5.1 Encryption with a challenge At this example, the DS Client tries to initiate sync with the DS Server without any encryption indicator (Pkg #1). The DS Server challenges the DS Client (Pkg #2) for the protocol layer encryption. The DS Client sends Pkg #1 again with the encryption indicator. The DS Server accepts the encryption request and the symmetric key is obtained by the DS Server (Pkg #2). In the example, commands in SyncBody are not shown although in practice, they would be there. Pkg #1 from Client <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">    <SyncHdr SessionID=\"1\" MsgID=\"1\">        <TargetServerURI>http://www.openmobilealliance.org/sync-server</TargetServerURI>        <SourceClientURI>IMEI:493005100592800</SourceClientURI>    </SyncHdr>    <SyncBody>       ......    </SyncBody> </SyncML>  Pkg #2 from Server <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">   <SyncHdr SessionID=\"1\" MsgID=\"2\">       <TargetClientURI>IMEI:493005100592800 </TargetClientURI>       <SourceServerURI>http://www.openmobilealliance.org/sync-server</SourceServerURI>   </SyncHdr>   <SyncBody>      <Status CmdID=\"1\" MsgRef=\"1\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"432\" >            <!-- Encryption required-->         <Chal> <Meta Type=\"AES-128-CBC\" Format=\"b64\" Size=\"128\" />          </Chal>      </Status>      ......    </SyncBody> </SyncML>  Pkg #1 (with encrypted key) resent from Client <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">     <SyncHdr SessionID=\"1\" MsgID=\"1\">         <TargetServerURI>http://www.openmobilealliance.org/sync-server</TargetServerURI>         <SourceClientURI>IMEI:493005100592800</SourceClientURI>         <EncryptedKey>  Page 90 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] <Meta Type=\"AES-128-CBC\" Format=\"b64\" Size=\"128\"/>             <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>  </EncryptedKey>      </SyncHdr>      <SyncBody>         ......      </SyncBody> </SyncML>  Pkg #2 from Server <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">     <SyncHdr SessionID=\"1\" MsgID=\"2\">          <TargetClientURI>IMEI:493005100592800 </TargetClientURI>          <SourceServerURI>http://www.openmobilealliance.org/sync-server</SourceServerURI>     </SyncHdr>     <SyncBody>          <Status CmdID=\"1\" MsgRef=\"2\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"200\" />    <!--Encryption request accepted-->             ......     </SyncBody> </SyncML>  9.4.1.5.2 Symmetric key algorithm not supported challenge At this example, the client initiates the synchronization by sending encryption indicator with the Pkg#1, and server determines that it doesn’t support the symmetric key algorithm and includes the encryption challenge into Pkg#2.  Pkg #1 (with encrypted key) from Client <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">     <SyncHdr SessionID=\"1\" MsgID=\"1\">         <TargetServerURI>http://www.openmobilealliance.org/sync-server</TargetServerURI>         <SourceClientURI>IMEI:493005100592800</SourceClientURI>         <EncryptedKey> <Meta Type=\"3DES\" Format=\"b64\" Size=\"128\" />              <Data> ... </Data> </EncryptedKey>     </SyncHdr>     <SyncBody>       ......     </SyncBody> </SyncML>  Pkg #2 (with challenge) from Server <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">     <SyncHdr SessionID=\"1\" MsgID=\"2\">         <TargetClientURI>IMEI:493005100592800 </TargetClientURI>         <SourceServerURI>http://www.openmobilealliance.org/sync-server</SourceServerURI>     </SyncHdr>     <SyncBody>      <Status CmdID=\"1\" MsgRef=\"1\" CmdRef=\"0\" Cmd=\"SyncHdr\" Code=\"429\" >        <!--Data Encryption Algorithm not supported-->  Page 91 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]         <Chal> <Meta Type=\"AES-128-CBC\" Format=\"b64\" Size=\"128\" />          </Chal>       </Status>       ......     </SyncBody> </SyncML>  9.4.1.5.3 Encrypted data transmitting At this example, the client transmits the encrypted data with the Pkg#3, and server includes its encrypted data into Pkg#4.  Pkg #3 (with encrypted data) from Client <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">     <SyncHdr SessionID=\"1\" MsgID=\"2\">         <TargetServerURI>http://www.openmobilealliance.org/sync-server</TargetServerURI>         <SourceClientURI>IMEI:493005100592800</SourceClientURI>     </SyncHdr>     <SyncBody> ......        <Sync CmdID=\"3\" NumberOfChanges=\"10\">            <TargetServerURI>./contacts</TargetServerURI>            <SourceClientURI>./dev-contacts</SourceClientURI>            <Add CmdID=\"4\">                <Item>                  <SourceClientURI>1012</SourceClientURI>                    <Meta Type=\"text/x-vcard\" Format=\"b64\" />                                          <Data Encrypted=\"true\">......</Data><!-- This data is encrypted -->                </Item>            </Add>            <Replace CmdID=\"5\">                <Item>  <SourceClientURI>1012</SourceClientURI>                           <Meta Type=\"text/x-vcard\" Format=\"b64\" />                                       <Data Encrypted=\"true\">......</Data>  <!-- This data is encrypted -->                </Item>            </Replace>          ......       </Sync>       <Final/>   </SyncBody> </SyncML>  Pkg #4 (with encrypted data) from Server <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"         Version=\"2.0\">    <SyncHdr SessionID=\"1\" MsgID=\"2\">        <TargetClientURI>IMEI:493005100592800 </TargetClientURI>        <SourceServerURI>http://www.openmobilealliance.org/sync-server</SourceServerURI>    </SyncHdr>    <SyncBody> ......             <Sync CmdID=\"4\" NumberOfChanges=\"5\">                 <TargetClientURI>./dev-contacts</TargetClientURI>                 <SourceServerURI>./contacts</SourceServerURI>                 <Add CmdID=\"5\">                     <Item>   Page 92 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101]                         <SourceServerURI>10536681</SourceServerURI> <Meta Type=\"text/x-vcard\" Format=\"b64\" />                          <Data Encrypted=\"true\">......</Data>  <!-- This data is encrypted -->                     </Item>                 </Add>                 <Replace CmdID=\"6\">                     <Item>                          <TargetClientURI>1023</TargetClientURI> <Meta Type=\"text/x-vcard\" Format=\"b64\" />                          <Data Encrypted=\"true\">......</Data>  <!-- This data is encrypted -->                     </Item>                 </Replace>                 ......             </Sync>             <Final/>     </SyncBody> </SyncML>  9.4.2 Transport Layer Encryption The use of a transport layer encryption is also allowed.  Transport specific security is documented in the transport binding documents [DSHTTPBINDING], [DSOBEXBINDING] and [DSWSPBINDING].     Page 93 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 10. Examples 10.1   WBXML Example Here is an example of a combined Package #1 and #3 from section 8.3.2Example of Sync without Separate Initialization, in tokenized form (numbers in hexadecimal). This example uses inline strings. The example also assumes that the character encoding is UTF-8. # Ethernet II 0000  00 40 05 32 06 16 00 16 b6 89 63 a4 08 00         .@.2......c...  # IP 000e  45 80                                             E. 0010  03 f8 d1 8a 40 00 6c 06 b5 12 4b df 76 29 c0 a8   ....@.l...K.v).. 0020  01 32                                             .2  # TCP 0022  0e bd 00 50 63 3e ef 26 27 b1 4d cf 50 18         ...Pc>.&'.M.P. 0030  80 c4 00 e2 00 00                                 ......  # HTTP 0036  50 4f 53 54 20 2f 53 79 6e 63                     POST /Sync 0040  4d 4c 20 48 54 54 50 2f 31 2e 31 0d 0a 41 63 63   ML HTTP/1.1..Acc 0050  65 70 74 2d 4c 61 6e 67 75 61 67 65 3a 20 65 6e   ept-Language: en 0060  2d 75 73 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70   -us..Content-Typ 0070  65 3a 20 61 70 70 6c 69 63 61 74 69 6f 6e 2f 76   e: application/v 0080  6e 64 2e 73 79 6e 63 6d 6c 2b 77 62 78 6d 6c 0d   nd.syncml+wbxml. 0090  0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 44 65 76   .User-Agent: Dev 00a0  49 6e 66 2d 45 78 61 6d 70 6c 65 0d 0a 48 6f 73   Inf-Example..Hos 00b0  74 3a 20 64 63 68 61 6d 70 61 67 6e 65 2e 63 6f   t: dchampagne.co 00c0  6d 0d 0a 43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74   m..Content-Lengt 00d0  68 3a 20 36 30 39 0d 0a 43 6f 6e 6e 65 63 74 69   h: 609..Connecti 00e0  6f 6e 3a 20 4b 65 65 70 2d 41 6c 69 76 65 0d 0a   on: Keep-Alive.. 00f0  43 61 63 68 65 2d 43 6f 6e 74 72 6f 6c 3a 20 6e   Cache-Control: n 0100  6f 2d 63 61 63 68 65 0d 0a 0d 0a                  o-cache....  # SyncML 010b  02 00 00 6a 21                                    ...j! 0110  2d 2f 2f 53 59 4e 43 4d 4c 2f 2f 53 63 68 65 6d   -//SYNCML//Schem 0120  61 20 53 79 6e 63 4d 4c 20 32 2e 30 2f 2f 45 4e   a SyncML 2.0//EN 0130  00 ed 60 01 ec 4a 03 34 00 3d 03 31 00 01 64 03   ..`..J.4.=.1..d. 0140  68 74 74 70 3a 2f 2f 77 77 77 2e 73 79 6e 63 6d   http://www.syncm 0150  6c 2e 6f 72 67 2f 73 79 6e 63 2d 73 65 72 76 65   l.org/sync-serve 0160  72 00 01 56 03 49 4d 45 49 3a 34 39 33 30 30 35   r..V.IMEI:493005 0170  31 30 30 35 39 32 38 30 30 00 01 4e 9a 56 03 61   100592800..N.V.a 0180  75 74 68 2d 62 61 73 69 63 00 2a 01 4f 03 51 6e   uth-basic.*.O.Qn 0190  4a 31 59 32 55 79 4f 6b 39 6f 51 6d 56 6f 59 58   J1Y2UyOk9oQmVoYX 01a0  5a 6c 00 01 01 01 6b dc 19 03 31 00 01 87 3a 03   Zl....k...1...:. 01b0  32 33 34 00 3f 03 32 37 36 00 01 64 03 2e 2f 63   234.?.276..d../c 01c0  6f 6e 74 61 63 74 73 2f 6a 61 6d 65 73 5f 62 6f   ontacts/james_bo 01d0  6e 64 00 01 56 03 2e 2f 64 65 76 2d 63 6f 6e 74   nd..V../dev-cont 01e0  61 63 74 73 00 01 9d 22 08 0b 39 01 01 ea 19 03   acts...\"..9..... 01f0  32 00 37 03 38 31 30 30 00 36 03 38 31 00 47 03   2.7.8100.6.81.G. 0200  31 00 01 64 03 2e 2f 63 6f 6e 74 61 63 74 73 2f   1..d../contacts/ 0210  6a 61 6d 65 73 5f 62 6f 6e 64 00 01 56 03 2e 2f   james_bond..V../ 0220  64 65 76 2d 63 6f 6e 74 61 63 74 73 00 01 e0 19   dev-contacts.... 0230  03 33 00 01 9a 5e 01 54 56 03 31 30 31 32 00 01   .3...^.TV.1012.. 0240  4f 03 54 68 65 20 76 43 61 72 64 20 64 61 74 61   O.The vCard data 0250  20 77 6f 75 6c 64 20 62 65 20 70 6c 61 63 65 64    would be placed 0260  20 68 65 72 65 2e 00 01 01 01 01 12 01 01          here.........   Page 94 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] In an expanded and annotated form: Token Stream Description 02 Version number – WBXML v1.2 00 FPI for DTD in string table 00 index into string table for the identifier 6A Charset is UTF-8 21 String table length 2d 2f 2f 53 59 4e 43 4d 4c 2f 2f 53 63 68 65 6d 61 20 53 79 6e 63 4d 4c 20 32 2e 30 2f 2f 45 4e 00 \"-//SYNCML//Schema SyncML 2.0//EN\" ED <SyncML (With Content and Attributes) 6C Version=\"2.0\" 01 > (End of Attributes) EC <SyncHdr 4A SessionID= 03 Inline String Follows 34 00 \"4\" 3D MsgID= 03 Inline String Follows 31 00 \"1\" 01 > (End of Attributes) 64 <TargetServerURI> 03 Inline String Follows 68 74 74 70 3a 2f 2f 77 77 77 2e 73 79 6e 63 6d 6c 2e 6f 72 67 2f 73 79 6e 63 2d 73 65 72 76 65 72 00 \"http://www.syncml.org/sync-server\" 01 </TargetServerURI> 56 <SourceClientURI> 03 Inline String Follows 49 4d 45 49 3a 34 39 33 30 30 35 31 30 30 35 39 32 38 30 30 00 \"IMEI:493005100592800\" 01 </SourceClientURI> 4E <Cred> 9A <Meta 56 Type=\"SyncML:\" 03 Inline String Follows 61 75 74 68 2d 62 61 73 69 63 00                           \"auth-basic\" 2A Format=\"b64\" 01 /> 4F <Data> 03 Inline String Follows 51 6e 4a 31 59 32 55 79 4f 6b 39 6f 51 6d 56 6f 59 58 5a 6c 00 \"QnJ1Y2UyOk9oQmVoYXZl\" 01 </Data> 01 </Cred> 01 </SyncHdr> 6B <SyncBody> DC <SyncAlert 19 CmdID= 03 Inline String Follows 31 00 \"1\" 01 > 87 <Anchor 3A Last= 03 Inline String Follows 32 33 34 00 \"234\" 3F Next= 03 Inline String Follows 32 37 36 00 \"276\" 01 >  Page 95 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 64 <TargetServerURI> 03 Inline String Follows 2e 2f 63 6f 6e 74 61 63 74 73 2f 6a 61 6d 65 73 5f 62 6f 6e 64 \"./contacts/james_bond\" 01 </TargetServerURI> 56 <SourceClientURI> 03 Inline String Follows 2e 2f 64 65 76 2d 63 6f 6e 74 61 63 74 73 00               \"./dev-contacts\" 01 </SourceClientURI> 9d <SyncType 22 Direction=\"twoWay\" 08 Behaviour=\"false\" 0B ChangeLogValidity=\"true\" 39 IDValidity=\"true\" 01 /> 01 </SyncAlert> EA <Sync 19 CmdID= 03 Inline String Follows 32 00 \"2\" 37 FreeMem= 03 Inline String Follows 38 31 30 30 00 \"8100\" 36 FreeID= 03 Inline String Follows 38 31 00 \"81\" 47 NumberOfChanges= 03 Inline String Follows 31 00 \"1\" 01 > 64 <TargetServerURI> 03 Inline String Follows 2e 2f 63 6f 6e 74 61 63 74 73 2f 6a 61 6d 65 73 5f 62 6f 6e 64 \"./contacts/james_bond\" 01 </TargetServerURI> 56 <SourceClientURI> 03 Inline String Follows 2e 2f 64 65 76 2d 63 6f 6e 74 61 63 74 73 00               \"./dev-contacts\" 01 </SourceClientURI> E0 <Replace 19 CmdID= 03 Inline String Follows 31 00 \"3\" 01 > 9A <Meta 5E Type=\"text/x-vcard\" 01 /> 54 <Item> 54 68 65 20 76 43 61 72 64 20 64 61 74 61 20 77 6f 75 6c 64 20 62 65 20 70 6c 61 63 65 64 20 68 65 72 65 2e 00 \"The vCard data would be placed here.\" 01 </Data> 01 </Item> 01 </Replace> 01 </Sync> 12 <Final/> 01 </SyncBody> 01 </SyncML>       2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Appendix A. Static Conformance Requirements (Normative) A.1   Conformance Requirements for OMA DS Client Table 1 – Client Features Item Functionality Reference Status Requirement SCR-DS-CLIENT-001 Support of ‘twoWay’ Direction 5.1 M  SCR-DS-CLIENT-002 Support of ‘fromClient’ Direction 5.1 M  SCR-DS-CLIENT-003 Support of ‘fromServer’ Direction 5.1 M  SCR-DS-CLIENT-004 Support of ‘NoWay’ Direction 5.1 O  SCR-DS-CLIENT-005 Support of ‘Refresh’ Behavior 5.1 O  SCR-DS-CLIENT-006 Support of ‘Preserve’ Behavior 5.1 M  SCR-DS-CLIENT-007 Support of ‘Client Generated Fingerprint’ 5.2 M  SCR-DS-CLIENT-008 Support of ‘Mutually Generated Fingerprint’ 5.2 O  SCR-DS-CLIENT-009 Support for ‘Multiple Messages’ 5.14 M  SCR-DS-CLIENT-010 Support of ‘Large Objects’ 5.15 O  SCR-DS-CLIENT-011 Support for ‘Hierarchical Synchronization’ 5.16 O  SCR-DS-CLIENT-012 Support of ‘Busy Signaling’ 5.18 O  SCR-DS-CLIENT-013 Support for ‘Filtering’ 5.22 O  SCR-DS-CLIENT-014 Support for ‘Session Maitenance’ 6 M  SCR-DS-CLIENT-015 Support for ‘Session End’ 6 M  SCR-DS-CLIENT-016 Support of ’Normal Sync’ 7.2 M  SCR-DS-CLIENT-017 Support of ’Recovery Sync’ 7.2 O  SCR-DS-CLIENT-018 Support for ‘Sync Initialization’ 8 M  SCR-DS-CLIENT-019 Support of ‘Sync Without Separate Initialization’ 8.3 O  SCR-DS-CLIENT-020 Support of ‘Authentication’ 9.2 M  SCR-DS-CLIENT-021 Support for ‘Data Intergrity’ 9.3 O  SCR-DS-CLIENT-022 Support for ‘Data Encryption’ 9.4 O   A.2   Conformance Requirements for OMA DS Server Table 2 – Server Features  Page 97 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Item Functionality Reference Status Requirement SCR-DS-SERVER-001 Support of ‘twoWay’ Direction 5.1 M  SCR-DS-SERVER-002 Support of ‘fromClient’ Direction 5.1 M  SCR-DS-SERVER-003 Support of ‘fromServer’ Direction 5.1 M  SCR-DS-SERVER-004 Support of ‘NoWay’ Direction 5.1 O  SCR-DS-SERVER-005 Support of ‘Refresh’ Behavior 5.1 M  SCR-DS-SERVER-006 Support of ‘Preserve’ Behavior 5.1 M  SCR-DS-SERVER-007 Support of ‘Client Generated Fingerprint’ 5.2 M  SCR-DS-SERVER-008 Support of ‘Mutually Generated Fingerprint’ 5.2 O  SCR-DS-SERVER-009 Support for ‘Multiple Messages’ 5.14 M  SCR-DS-SERVER-010 Support of ‘Large Objects’ 5.15 O  SCR-DS-SERVER-011 Support for ‘Hierarchical Synchronization’ 5.16 O  SCR-DS-SERVER-012 Support of ‘Busy Signaling’ 5.18 O  SCR-DS-SERVER-013 Support for ‘Filtering’ 5.22 O  SCR-DS-SERVER-014 Support for ‘Session Maitenance’ 6 M  SCR-DS-SERVER-015 Support for ‘Session End’ 6 M  SCR-DS-SERVER-016 Support of ’Normal Sync’ 7.2 M  SCR-DS-SERVER-017 Support of ’Recovery Sync’ 7.2 M  SCR-DS-SERVER-018 Support for ‘Sync Initialization’ 8 M  SCR-DS-SERVER-019 Support of ‘Sync Without Separate Initialization’ 8.3 M  SCR-DS-SERVER-020 Support of ‘Authentication’ 9.2 M  SCR-DS-SERVER-021 Support for ‘Data Intergrity’ 9.3 O  SCR-DS-SERVER-022 Support for ‘Data Encryption’ 9.4 M    Page 98 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] Appendix B. Change History (Informative) B.1 Approved Version History Reference Date Description n/a n/a No prior version B.2 Draft Version 2.0 History Document Identifier Date Sections Description Draft Versions OMA-TS-DS_Protocol-V2_0 05 Sep 2006 8,  Updated according to agreed CRs:  OMA-DS-DS_2_0-2006-0024R02-CR_Security_Authentication OMA-DS-DS_2_0-2006-0025R01-CR_Security_Integrity 14 Sep 2006 8 Updated according to agreed CR:  OMA-DS-DS_2_0-2006-0026R02-CR_Security_Confidentiality 19 Oct 2006 All Updated according to agreed CR:  OMA-DS-DS_2_0-2006-0054R01-CR_Update_Protocol_Doc 20 Oct 2006 All Updated according to agreed CR:  OMA-DS-DS_2_0-2006-0057R01-CR_Update_Addressing 09 Nov 2006 5.16 Updated according to agreed CR :  OMA-DS-DS_2_0-2006-0055R02-CR_Busy_Signalling 20 Mar 2007 5.9 Updated according to agreed CR:  OMA-DS-DS_2_0-2006-0066-CR_Datastore_Partial_Sync 25 Apr 2007 All Updated according to agreed CRs: OMA-DS-DS_2_0-2007-0005R01-CR_Hierarchical_Structure_Exchange  OMA-DS-DS_2_0-2007-0011R01-CR_Ref_Protocol 17 Jul 2007 All Updated according to agreed CRs: OMA-DS-DS_2_0-2007-0009R02-CR_Clarify_Example_NoResp  OMA-DS-DS_2_0-2007-0025R01-CR_TS_Device_Information_Exchange OMA-DS-DS_2_0-2007-0028-CR_Security_References 03 Aug 2007 All Updated according to agreed CRs: OMA-DS-DS_2_0-2007-0034-CR_DevInfo_Addressing.doc OMA-DS-DS_2_0-2007-0035-CR_DevInfo_Negotiation_Flow.doc 25 Aug 2007 All Updated according to agreed CRs: OMA-DS-DS_2_0-2007-0042R01-CR_Sync_Mechanism_Negotiation.doc OMA-DS-DS_2_0-2007-0040R01-CR_Fingerprint_Introduction.doc OMA-DS-DS_2_0-2007-0046R02-CR_Protocol_Update.doc 19 Dec 2007 All Updated according to agreed CRs: OMA-DS-DS_2_0-2007-0065R02-CR_Remove_Archive_Search_Lang_in_Protocol.doc 21 Feb 2008 7.4 Updated according to agreed CRs: OMA-DS-DS_2_0-2008-0006R01-CR_Encryption_Example_in_Protocol 17 Apr 2008 5 Updated according to agreed CRs: OMA-DS-DS_2_0-2008-0061R01-CR_Fingerprint_Generation_Method.doc, OMA-DS-DS_2_0-2008-0060R01-CR_Hierarchy_Sync.doc, OMA-DS-DS_2_0-2008-0055R01-CR_External_DevInf_Addressing.doc, OMA-DS-DS_2_0-2008-0025-CR_DevInfo_exchange.doc Editorial formatting  Page 99 (99)  2009 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20090101] 06 Jun 2008 All Updated according to agreed CRs: OMA-DS-DS_2_0-2008-0064-CR-Protocol_Conflict_Resolution_Clarification, OMA-DS-DS_2_0-2008-0065R01-CR_Device_Memory_Management, OMA-DS-DS_2_0-2008-0066R01-CR-Large_Object_Handling, OMA-DS-DS_2_0-2008-0068-CR_Remove_Section_12_In_Protocol, OMA-DS-DS_2_0-2008-0071-CR_Target_Source_Addressing, OMA-DS-DS_2_0-2008-0072-CR_Busy_Signaling, OMA-DS-DS_2_0-2008-0073-CR_Data_Identifier_Mapping, OMA-DS-DS_2_0-2008-0074-CR_Data_Synchronization_Usage 20 Jun 2008 8 Updated according to agreed CRs: OMA-DS-DS_2_0-2008-0075R01-CR_Sync_Initialization. OMA-DS-DS_2_0-2008-0076R01-CR_Sync_Without_Separate_Initialization. 26 Jun 2008 5, 7 Updated according to agreed CRs: OMA-DS-DS_2_0-2008-0077R02-CR_Protocol_Security. OMA-DS-DS_2_0-2008-0078-CR_Protocol_Fundamentals. OMA-DS-DS_2_0-2008-0079-CR_Protocol_Filtering. 2 Sep 2008 All Updated according to agreed CRs: OMA-DS-DS_2_0-2008-0093-CR_Overall_Protocol_Structure OMA-DS-DS_2_0-2008-0094-CR_Overall_Sync_Flow OMA-DS-DS_2_0-2008-0095R02-CR_Change_Log_and_Multiple_Devices OMA-DS-DS_2_0-2008-0096R01-CR_Soft_Delete OMA-DS-DS_2_0-2008-0097-CR_Sync_Anchor OMA-DS-DS_2_0-2008-0100R02-CR_Normal_Sync 06 Oct 2008 All Updated according to agreed CRs: OMA-DS-DS_2_0-2008-0101R03-CR_Client_Initiated_Recovery_Sync OMA-DS-DS_2_0-2008-0102-CR_ChangeLogValidity_Clarification OMA-DS-DS_2_0-2008-0103R02-CR_Server_Initiated_Recovery_Sync OMA-DS-DS_2_0-2008-0104-CR_Specify_NoWay OMA-DS-DS_2_0-2008-0105-CR_Clarification_for_Fingerprints OMA-DS-DS_2_0-2008-0106-CR_Remove_Fingerprint_Container OMA-DS-DS_2_0-2008-0107-CR_Remove_Old_Sync_Flows OMA-DS-DS_2_0-2008-0108-CR_Remove_Old_One_Way_Sync_Flows OMA-DS-DS_2_0-2008-0109R01-CR_Error_Cases 07 Oct 2008 7 Updated according to agreed CR: OMA-DS-DS_2_0-2008-0099R04-CR_Sync_Flow_for_Sync_Process 22 Oct 2008 All Updated according to agreed CRs: OMA-DS-DS_2_0-2008-0110-CR_Editor_Notes_in_7.2.2 OMA-DS-DS_2_0-2008-0111-CR_Suspend_and_Resume OMA-DS-DS_2_0-2008-0112R01-CR_Editor_Notes_in_5.7 OMA-DS-DS_2_0-2008-0113-CR_Editor_Notes_in_5.8 OMA-DS-DS_2_0-2008-0114R01-CR_Editor_Notes_in_5.10 OMA-DS-DS_2_0-2008-0116R02-CR_Editor_Notes_in_9.4 OMA-DS-DS_2_0-2008-0118R01-CR_Protocol_Update 31 Oct 2008 Appendix A Updated according to agreed CRs: OMA-DS-DS_2_0-2008-0130R01-CR_SCR_Update_Protocol 13 Nov 2008 Various Examples Updated according to agreed CR: OMA-DS-DS_2_0-2008-0143R01-CR_Protocol_Version_Attribute 25 Nov 2008 Section 2 Updated according to agreed CR: OMA-DS-DS_2_0-2008-0152-CR_Protocol_References_Editorial Draft Versions OMA-TS-DS_Protocol-V2_0 11 Dec 2008 Section 2.1 Update of the references for binding documents 17 Dec 2008 Section 10, Misc Updated according to agreed CR: OMA-DS-DS_2_0-2008-0142-CR_Protocol_WBXML_Example 30 Jan 2009 All  Editorial clean-up prior to submission to TP for Candidate Approval Candidate Version OMA-TS-DS_Protocol-V2_0 12 Feb 2009 n/a Status changed to Candidate by TP    TP ref # OMA-TP-2009-0074R01-INP_DS_V2_0_ERP_for_Candidate_Approval"},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-DS_Provisioning-V2_0-20090212-C.pdf","file":"OMA-TS-DS_Provisioning-V2_0-20090212-C.pdf","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"This document specifies the OMA DS provisioning. Please refer to [DSCONCEPTS] for further information on the OMA DS organization and history."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-DS_Syntax-V2_0-20090212-C.pdf","file":"OMA-TS-DS_Syntax-V2_0-20090212-C.pdf","status":"Candidate","version":"V2.0","date":"2009-02-12","contentMediaType":"application/pdf","description":"This document specifies the XML syntax and semantics used by OMA DS protocols. The DS Syntax protocol is defined by a set of messages that are conveyed between entities participating in a data synchronization operation. The DS Syntax protocol embodies the concept of a SyncML Package. The SyncML Package performs some set of operations. This conceptual \"package\" permits either a \"batch\" of multiple operations put together in a single SyncML Message or conveyed as separate SyncML Messages, each containing a single operation. Please refer to [DSCONCEPTS] for further information on the OMA DS organization and history. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 8 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  2.  References 2.1     Normative References [DSCONCEPTS] “Data Synchronization Concepts and Definitions”, Open Mobile Alliance, OMA-TS-DS_Concepts-V2_0,                                                          URL:http://www.openmobilealliance.org/ [DSDEVINF] “OMA DS Device Information”, Open Mobile Alliance, OMA-TS-DS_DevInf-V2_0, URL:http://www.openmobilealliance.org/ [DSHISTORY] “OMA DS Standards Change History”, Open Mobile Alliance, OMA-WP-SyncML_ChangeHistory,                                                       URL:http://www.openmobilealliance.org/ [DSHTTPBINDING] “SyncML HTTP Binding Specification”, Open Mobile Alliance, OMA-TS-SyncML_HTTPBinding-V1_2_1,                    URL:http://www.openmobilealliance.org/ [DSNOTI] “OMA DS Notification”, Version 2.0, Open Mobile Alliance.  OMA-TS-DS-Notification-V2_0,                                       URL:http://www.openmobilealliance.org/ [DSPRO] “Data Synchronization Protocol”, Open Mobile Alliance, OMA-TS-DS_Protocol-V2_0, URL:http://www.openmobilealliance.org/ [IMEI] “Digital cellular telecommunications system (Phase 2+) (GSM); Universal Mobile Telecommunications System (UMTS); Numbering, addressing and identification” (3G TS 23.003 Version 3.4.0 Release 1999), URL:http://webapp.etsi.org/action/PU/20000523/ts_123003v030400p.pdf [IOPPROC] “OMA Interoperability Policy and Process”, Open Mobile Alliance,  OMA-IOP-Process-V1_3,                                                URL:http://www.openmobilealliance.org/  [ISO8601] “Data elements and interchange formats – Information interchange – Representation of dates and times ISO 8601-2000”,                                    URL://www.iso.ch/iso/en/ISOOnline.openerpage [RFC1321] “ The MD5 Message-Digest Algorithm ”, R. Rivest, et al., April 1992,  URL:http://www.ietf.org/rfc/rfc1321.txt   [RFC1766] “Tags for the Identification of Languages”,  H. Alvestrand, March 1995, URL:http://www.ietf.org/rfc/rfc1766.txt [RFC2045] “Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies”, N. Freed & N. Borenstein, November 1996,                        URL:http://www.ietf.org/rfc/rfc2045.txt  [RFC2119] “Key words for use in RFCs to Indicate Requirement Levels”, S. Bradner,  March 1997, URL:http://www.ietf.org/rfc/rfc2119.txt [RFC2279] “UTF-8, a transformation format of ISO 10646”,   F. Yergeau,  January 1998, URL:http://www.ietf.org/rfc/rfc2279.txt [RFC2396] “Uniform Resource Identifiers (URI): Generic Syntax”, T. Berners-Lee, et al., August 1998, URL:http://www.ietf.org/rfc/rfc2396.txt [WBXML] “WAP Binary XML Content Format Specification”, WAP Forum, WAP-154-WBXML, URL:http://www.openmobilealliance.org/ [WDP] “Wireless Datagram Protocol Specification”, WAP Forum URL:http://www.openmobilealliance.org/ [WSP] “Wireless Session Protocol specification”, WAP Forum URL:http://www.openmobilealliance.org/ OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 9 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  [WTP] “Wireless Transaction Protocol Specification”, WAP Forum, URL:http://www.openmobilealliance.org/ [XML] “Extensible Markup Language (XML) 1.0”, World Wide Web Consortium Recommendation, URL:http://www.w3.org/TR/REC-xml 2.2     Informative References None.  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 10 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  3.  Terminology and Conventions 3.1     Conventions The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC2119. All sections and appendixes, except “Scope” and “Introduction”, are normative, unless they are explicitly indicated to be informative. Any reference to elements of the Data Synchronization XML Schema is specified in this typeface.  Any reference to attributes of the Data Synchronization XML Schema is specified in this typeface. Schema fragments are shown as: Content Model:  <xs:attribute name=\"Atomic\" type=\"xs:boolean\" default=\"false\"/>  Examples are shown as: Example n: descriptive text <Delete CmdID=\"401\">   ... </Delete>  Most examples may be validated against the schema by incorporating them into the XML fragments of Appendix B. Also note that many of the examples manipulate objects relative to the hierarchy of objects shown in Appendix B. 3.2     Definitions Please refer to the [DSCONCEPTS] document. 3.3     Abbreviations Please refer to the [DSCONCEPTS] document. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 11 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  4.  Introduction OMA Data Synchronization (OMA DS) is a specification for a common data synchronization framework and XML-based format, or representation protocol, for synchronizing data on networked devices. OMA Data Synchronization is designed for use between mobile devices that are intermittently connected to the network and network services that are continuously available on the network. OMA Data Synchronization can also be used for peer-to-peer data synchronization. OMA Data Synchronization is specifically designed to handle the case where the network services and the device store the data they are synchronizing in different formats or use different software systems.  This document specifies the XML syntax and semantics used by the OMA Data Synchronization Protocol. The Data Synchronization Syntax is defined by a set of messages that are conveyed between entities participating in a data synchronization operation. The messages are represented as an XML document. XML is the industry standard for text document mark-up, as defined in [XML]. The Data Synchronization Syntax also can be identified as a MIME content type. MIME is the Internet standard for identifying multipurpose message contents. It provides a useful mechanism for differentiating between different content and document types. The Data Synchronization Syntax supports protocol models that are based on a request/response command structure, as well as those that are based on a \"blind push\" command structure. The Data Synchronization Syntax embodies the concept of a SyncML Package. The SyncML Package performs some set of operations. This conceptual \"package\" permits either a \"batch\" of multiple operations put together in a single SyncML Message or conveyed as separate SyncML Messages, each containing a single operation. SyncML Messages are the body of the MIME entities. 4.1     Version History For a detailed change history of OMA-DS, refer to [DSHISTORY].  Specific Syntax changes include: 4.1.1 Version 1.0.1 CTCAP was moved from the Syntax Specification to Device Information [DSDEVINF], and FreeID and FreeMem were moved to the Meta Specification. 4.1.2 Version 1.1 MoreData and NumberOfChanges were added.  The Specification set was split into Common, DS, and DM. 4.1.3 Version 1.2 Correlator, Field, Filter, FilterType, Move, Record, SourceParent, and TargetParent were added. 4.1.4 Version 2.0 The Meta Specification, including the elements and attributes of Anchor, FieldLevel, Format, FreeID, FreeMem, Last, MaxObjSize, Meta, Next, NextNonce, Size, and Type, were incorporated into the Syntax Specification. Support for Fingerprints was added, including FP, ID, and IDContainer. The explicit SyncAlert element, with its attributes of Behaviour, ChangeLogValidity, Direction, and IDValidity was created instead of using Alert. SourceClientURI, SourceClientParentURI, SourceServerURI, SourceServerParentURI, TargetClientURI, TargetClientParentURI, TargetServerURI, and TargetServerParentURI were created instead of using Source, SourceParent, Target, TargetParent and LocURI.  VerDTD was renamed to Version. The flags and simple values of CmdID, Code, NoStatus, Atomic, AuthName, Cmd, CmdRef, Correlator, SftDel, FieldLevel, FilterType, MsgID, MsgRef, NextNonce, NumberOfChanges, Sequence, and Version were converted from elements to attributes. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 12 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  5.  SyncML 5.1     SyncML Package and Messages In SyncML, the operations are conceptually bound into a SyncML Package. The SyncML Package is just a conceptual frame for one or more SyncML Messages that are REQUIRED to convey a set of protocol semantics.  A SyncML Message is a well-formed XML document and adheres to the Schema, but does not need to be validated. For example, a SyncML message does not need to be validated but the XML MUST adhere to whatever explicitly defined order appears in the Schema.  The document is identified by the SyncML root or document element type. This element type acts as a parent container (i.e., root element type) for the SyncML Message.   The SyncML Message, as specified before, is an individual XML document. The document consists of a header, specified by the SyncHdr element type, and a body, specified by the SyncBody element type. The SyncML header specifies routing and versioning information about the SyncML Message. The SyncML body is a container for one or more SyncML Commands. The SyncML Commands are specified by individual element types. The SyncML Commands act as containers for other element types that describe the specifics of the SyncML command, including any data or meta-information. 5.2     SyncML Commands SyncML defines the following \"request\" commands: - Add. Allows the originator to ask that a data element or data elements supplied by the originator be added to data accessible to the recipient.  - Alert. Allows the originator to notify the recipient. The notification can be used as an application-to-application message or a message intended for display through the recipient's user interface. - Copy. Allows the originator to ask that a data element or data elements accessible to the recipient be copied.  - Delete. Allows the originator to ask that a data element or data elements accessible to the recipient be deleted. A Delete command can include a request for the archiving of the data.  - Get. Allows the originator to ask for a data element or data elements from the recipient. A Get can include the resetting of any meta-information that the recipient maintains about the data element or collection.  - Move. Allows the originator to ask that a data element or data elements accessible to the recipient to be moved. - Put. Allows the original to put a data element or data elements on to the recipient.  - Replace. Allows the originator to ask that a data element or data elements accessible to the recipient be replaced. This command makes a complete replacement of the data element.  - Sync. Allows the originator to specify that the included commands be treated as part of the synchronization of two data collections.  - SyncAlert. Allows the originator to negotiate the sync type with the recipient and also allows the originator to send fingerprints and data item identifiers to the recipient.  SyncML defines the following \"response\" commands: - Status. Indicates the completion status of an operation or that an error occurred while processing a previous request, with an optional updated identifier.  - Results. Used to return the data results of a Get SyncML Command. The SyncML Commands themselves do not fully define the semantics of the SyncML Operation. For example, \"Adding\" a document to an application to a database may have very different semantics from \"Adding\" a transaction request to a queue. The semantics of a SyncML Operation are determined by the type of data that is being operated upon. This means that it is possible for an originator to request an operation of a particular recipient that makes no sense to the recipient. In that case, the recipient MUST return an error response status code.  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 13 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  5.3     XML Usage The SyncML Messages are represented in a mark-up language defined by [XML]. The DS Syntax protocol is an XML application. The DS Syntax Schema defines the XML Schema used to represent a DS Message. The DS Syntax Schema can be found in Section 7, but it is not necessary to read the Schema in order to understand the protocol. SyncML makes use of XML name spaces. Name spaces MUST be declared on the first element type that uses an element type from the name space. Names in XML are case sensitive. By convention in the DS Syntax, the element type and attribute list names are specified using the convention that the first character in each word of the name is in upper case text and remainder of the characters in each word of the names specified in lower case text. For example, SyncML for the Sync Mark-up Language tag or MsgRef for the Message Reference tag. The element types in the DS Syntax Schema are defined within a namespace associated with the URI http://www.openmobilealliance.org/tech/profiles/OMA-DS-DS_2_0-Syntax-Schema-V2_0.xsd or the URN urn:oma:xml:ds:syntax:. The DS Syntax Schema are also identified by the ISO 9070 formal public identifier -//SYNCML//Schema SyncML 2.0//EN. SyncML also makes use of XML standard attributes, such as xml:lang. Any XML standard attribute can be used in a SyncML document. SyncML Messages are specified using well-formed XML. However, the SyncML Messages need not be valid XML. That is, the SyncML Messages do not need to specify the XML declaration, prolog, or schema locations. They only need to specify the body of the XML document. This restriction allows for the SyncML Messages to be specified with greater terseness than well-formed, valid XML documents. The following examples should be considered equivalent: Fully Qualified:  This style is both well-formed and valid (provided a copy of the SyncML schema is available).  This style is recommended for file formats, such as storing device information for later use. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"     xsi:noNamespaceSchemaLocation=\"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"     Version=\"2.0\"> ...  </SyncML>  Minimally Qualified: This style uniquely identifies the namespace as being OMA-DS SyncML, and is well-formed, but not valid.  This style SHOULD be used when communicating over limited bandwidth. <SyncML xmlns='syncml:syncml2.0' Version=\"2.0\"> ... </SyncML>  Unqualified: This style MAY be used where the context is clear through other information. <SyncML Version=\"2.0\"> ... </SyncML>  Namespace Qualified: This style MAY be used where SyncML Information is included inside other XML documents, and the appropriate namespaces are declared.  This style MUST be both well-formed and valid. The choice of namespaces (for elements, and attributes) is arbitrary.  The use of any style like this SHOULD NOT be used for over-the-air communications. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 14 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  <syncml:SyncML syncmlA:Version=\"2.0\"> ... </syncml:SyncML>  One of the main advantages of XML is that it is a widely accepted International recommendation for text document mark-up. It provides for both human readability and machine process ability. In addition, XML allows the originator to capture the structure of a document, not just its content. This is extremely useful for applications such as data synchronization, where not just content, but structure semantics is often exchanged. 5.4     WBXML Usage XML can be viewed as more verbose than alternative binary representations. This is often cited as a reason why it might not be appropriate for low bandwidth network protocols. In most cases, SyncML uses shortened element type and attribute names. This provides a minor reduction in verbosity. Additionally, the SyncML Messages can be encoded in a tokenized, binary format defined by [WBXML], or a standard content compression can be applied, such as HTTP’s “Content-Encoding: gzip”. The use of [WBXML] format or transport layer compression is external to specification of the SyncML protocol and transparent to any SyncML application. The combination of the use of shortened element type names and an alternative binary format makes SyncML competitive, from a compressed format perspective, with alternative, but private, binary representations. For the purposes of OMA-DS, WBXML 1.1, WBXML 1.2 and WBXML 1.3 are functionally equivalent, and all MUST be accepted in implementations that support WBXML.  Effectively, this merely requires the WBXML parser to accept 01, 02 or 03 as the first byte of the document.  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 15 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  6.  Mark-up Language Description The DS Syntax protocol is a document mark-up consisting of XML element and attribute types. This section provides a prose description of this mark-up. The types are defined in terms of their purpose or usage, parent elements, any restrictions on content or use and content model.  Restrictions listed in this document apply to Data Synchronization Protocol.  Examples that illustrate the use of each element type can also be found in this document. Examples in this section make use of XML snippets. They are not intended to be complete XML documents, although most can be validated by incorporating them into the XML fragments of Appendix B. They are only provided to illustrate an example usage of the element type in question. 6.1     Static Conformance Requirements by Type 6.1.1 The Common Use Elements and Attributes The following are common element types and attributes used by numerous other SyncML element types. The following table further elucidates the static conformance requirements for the SyncML data description elements and attributes for devices conforming to this specification. Command Support of Synchronization Server Support of Synchronization Client Sending Receiving  Sending Receiving Anchor MUST MUST MUST MUST Atomic MAY MAY MAY MAY AuthName MAY MAY MAY MAY Behaviour MUST MUST MUST MUST Chal MUST MUST MAY MUST ChangeLogValidity MAY MUST MAY MUST ClientURI MUST MUST MUST MUST Cmd MUST MUST MUST MUST CmdID MUST MUST MUST MUST CmdRef MUST MUST MUST MUST Code MUST MUST MUST MUST Correlator MAY MAY MAY MAY Cred MUST MUST MUST MUST Direction MUST MUST MUST MUST Encrypted MAY MAY MAY MAY EncryptedKey MAY MAY MAY MAY Field MAY MAY MAY MAY FieldLevel MAY MUST MAY MAY OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 16 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Filter MAY MAY MAY MAY FilterType MAY MAY MAY MAY Final MUST MUST MUST MUST Format MUST MUST MUST MUST FP MAY MUST MAY MAY FreeID MAY MUST SHOULD MAY FreeMem MAY MUST SHOULD MAY ID MAY MUST MAY MAY IDContainer MAY MUST MAY MAY IDValidity MAY MUST MAY MUST Last MUST MUST MUST MUST MaxMsgSize MAY MUST MAY MAY MaxObjSize MAY MUST MAY MAY MoreData MUST MUST MAY MAY MsgID MUST MUST MUST MUST MsgRef MUST MUST MUST MUST Next MUST MUST MUST MUST NextNonce MUST MUST MUST MUST NoStatus MAY MUST MAY MUST NumberOfChanges MAY MUST MAY MAY Record MAY MAY MAY MAY RespURI MAY MUST MAY MUST Sequence MAY MUST MAY MAY ServerURI MUST MUST MUST MUST SessionID MUST MUST MUST MUST SftDel MAY MAY MAY MAY Size MAY MUST MAY MUST SourceClientURI MUST MUST MUST MUST SourceClientParentURI MAY MAY MAY MAY SourceServerURI MUST MUST MUST MUST OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 17 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  SourceServerParentURI MAY MAY MAY MAY StatusItem MUST NOT MUST MAY MUST NOT SyncType MUST MUST MUST MUST TargetClientURI MUST MUST MUST MUST TargetClientParentURI MAY MUST NOT MUST NOT MAY TargetServerURI MUST MUST MUST MUST TargetServerParentURI MAY MUST NOT MUST NOT MAY Type MUST MUST MUST MUST Version MUST MUST MUST MUST Table 1: Common Use Elements and Attributes  6.1.2 Message Container Elements The following element types provide the basic container support for the SyncML message. The following table further elucidates the static conformance requirements for the SyncML data description elements for devices conforming to this specification. Command Support of Synchronization Server Support of Synchronization Client Sending Receiving  Sending Receiving SyncML MUST MUST MUST MUST SyncHdr MUST MUST MUST MUST SyncBody MUST MUST MUST MUST Table 2: Message Container Elements  6.1.3 Data Description Elements The following element types are used as container elements for data exchanged in a SyncML Message. The following table further elucidates the static conformance requirements for the SyncML data description elements for devices conforming to this specification. Command Support of Synchronization Server Support of Synchronization Client Sending Receiving  Sending Receiving Data MUST MUST MUST MUST Item MUST MUST MUST MUST Meta MUST MUST MUST MUST OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 18 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Table 3: Data Description Elements  6.1.4 Protocol Management Elements The following table further elucidates the static conformance requirements for the SyncML protocol management elements for devices conforming to this specification.  Command Support of Synchronization Server Support of Synchronization Client Sending Receiving  Sending Receiving Status MUST MUST MUST MUST Table 4: Protocol Management Elements  6.1.5 Protocol Command Elements The following table further elucidates the static conformance requirements for the SyncML protocol command elements for devices conforming to this specification.  Command Support of Synchronization Server Support of Synchronization Client Sending Receiving  Sending Receiving Add MUST MUST SHOULD MUST Alert MUST MUST MUST MUST Copy MAY MUST / MUST* MAY MAY / MUST* Delete MUST MUST MUST MUST Get MUST MUST SHOULD MUST Move MAY MAY / MUST* MAY MAY / MUST* Put MUST MUST MUST MUST Replace MUST MUST MUST MUST Results MUST MUST MUST SHOULD Sync MUST MUST MUST MUST SyncAlert MUST MUST MUST MUST Table 5: Protocol Command Elements * The Copy and Move commands MUST be supported by implementations that support hierarchical sync 6.1.6 Common Types for Elements The following table further elucidates the common used types for the elements definition.  There are no static conformance requirements for these common types. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 19 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Type Used in Elements EmptyType Final, MoreData CommonOperationType Add, Copy, Get, Move, Put Table 6: Common Element Types  6.2     Element, Attribute, and Type Definitions 6.2.1 Add Usage: Specifies the SyncML command to add data to a data collection. Parent Elements: Sync, SyncBody Content Model:  <xs:element name=\"Add\" type=\"CommonOperationType\"/> Restrictions:  The Add command is generally used to convey to the recipient any additions made to the originator’s database. For example, a mobile device will indicate to the network server any additions made to the local calendar database. The originator of the command SHOULD only send features/properties of the data item that are supported by the recipient. The device information document of the recipient can contain this information. One or more Item element types MUST be specified. The Item element type specifies the data item added to the database. The SourceServerURI or SourceClientURI specified within the Item element type uniquely identifies the item, either relative to the corresponding TargetServerURI / TargetClientURI or SourceServerURI / SourceClientURI specified in the parent Sync command, relative to an absolute URI in the SourceServerParentURI, SourceClientParentURI, or TargetClientParentURI of a hierarchical object whose parent element is SyncBody, or by absolute URI with a non-hierarchical object when the parent element is SyncBody.  Note that only certain combinations of these parameters are valid, as shown in Table 7: Add Source/Target Combinations, Table 8: Add Relative/Absolute URI Combinations, and the examples below. When synchronizing hierarchical objects, the Item element for each object MUST include parent information. For this purpose SourceServerParentURI, SourceClientParentURI, or TargetClientParentURI MUST be used by the sending device referring to an existing parent. When synchronizing hierarchical objects when the parent element is SyncBody, these parent elements MUST be absolute URIs, and the SourceServerURI or SourceClientURI specified within the Item element type MUST be relative to the parent element.  When the parent element is a Sync command all URIs MUST be relative URIs.  Refer to Table 7: Add Source/Target Combinations, Table 8: Add Relative/Absolute URI Combinations, and the examples below for valid combinations. The Item elements within an Add command MUST NOT attempt to specify a new identifier on the target, that is, specify either TargetServerURI or TargetClientURI. When sending an Add command to a recipient that does not support Hierarchy, the Parent URI fields MUST NOT be sent, that is, any of SourceServerParentURI, SourceClientParentURI, TargetServerParentURI or TargetClientParentURI. When sending an Add command to a recipient that does not support Hierarchy when the parent element is SyncBody, the SourceServerURI or SourceClientURI specified within the Item element type MUST be absolute URIs.  For all other cases, they MUST be relative URIs. For examples of the use of absolute URIs, see the Copy command. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 20 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  When the client is the recipient, it MAY assign new local identifiers (LUIDs) for the data items specified in this command. However, in such cases the client MUST also notify the server of the new LUID by returning the new LUID in the corresponding StatusItem element.  Source/Target Combinations Without Hierarchy Support With Hierarchy Support Example 1 Example 2 Example 3  Example 4 Example 5 Sender Client Server Client Server Server SourceServerURI - X - X X SourceClientURI X - X - - TargetServerURI - - - - - TargetClientURI - - - - - SourceServerParentURI - - - - X SourceClientParentURI - - X - - TargetServerParentURI - - - - - TargetClientParentURI - - - X - Table 7: Add Source/Target Combinations  URI Combinations Without Hierarchy Support With Hierarchy Support Parent Element *Direct URIs **Parent URIs *Direct URIs **Parent URIs SyncBody Absolute N/A Relative Absolute Sync Relative N/A Relative Relative Table 8: Add Relative/Absolute URI Combinations * Direct URIs refers to SourceServerURI or SourceClientURI. ** Parent URIs refers to SourceServerParentURI, SourceClientParentURI, or TargetClientParentURI. Status Codes:  If the command completed successfully, then the (201) Item added exception condition is created by the command. If the recipient determines that the data item already exists on the recipient’s database, then the (418) Already exists exception condition is created by the command. If the originator’s authentication credentials specify a principal with insufficient rights to complete the command, then the (401) Unauthorized exception condition is created by the command. If no authentication credentials were specified, then (407) Authentication required exception condition is created by the command. A suitable challenge can also be returned. Non-specific errors created by the recipient while attempting to complete the command create the (500) Command failed exception condition. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 21 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  If there is insufficient space on the recipient database for the data item, then the (420) Device full exception condition is created by the command, and the originator SHOULD NOT attempt to add additional data until the recipient has more free space. If the MIME content type or content format for the data item is not supported by the recipient, then the (415) Unsupported MIME content type or content format exception condition is created by the command. Example 1: The client requests the server to add 2 new items of the same type, with credentials that provide write access to the current datastore.  The Type information for all Items’ are provided by the Meta element under the Add command. The items are identified by the client LUID, which includes the fingerprint of the item. <Add CmdID=\"101\">   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>     <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <Meta Format=\"chr\" Type=\"text/vcard\"/>   <Item>     <SourceClientURI FP=\"0123\">1001</SourceClientURI>     <Data>BEGIN:VCARD VERSION:3.0 ... END:VCARD     </Data>   </Item>   <Item>     <SourceClientURI FP=\"1234\">1002</SourceClientURI>     <Data> VERSION:3.0 ... END:VCARD     </Data>   </Item> </Add>  Example 2: The server requests the client to add a new item.  The item is identified by the server’s GUID. The client may choose to assign a LUID to the item, in which case it would indicate that to the server in the corresponding StatusItem element, and the GUID would no longer be used. <Add CmdID=\"102\">   <Item>     <SourceServerURI>ABC012345_1003</SourceServerURI>     <Meta Format=\"chr\" Type=\"...\"/>     <Data>       ...     </Data>   </Item> </Add>  Example 3: The client requests the server to add a new folder item to the root of the hierarchy.  <Add CmdID=\"103\">   <Item>     <SourceClientURI FP=\"2345\">1004</SourceClientURI>     <SourceClientParentURI>./</SourceClientParentURI>     <Meta Format=\"chr\" Type=\"application/vnd.omads-folder+xml\"/>     <Data><![CDATA[       <Folder> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 22 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]          <name>Work</name>         <created>20080401T012345</created>          ...         <role>Inbox</role>       </Folder>]]>     </Data>   </Item> </Add>  Example 4: The server requests the client to add a new folder item to an existing, mapped folder. <Add CmdID=\"104\">   <Item>     <SourceServerURI>ABC012345_1005</SourceServerURI>     <TargetClientParentURI>1004</TargetClientParentURI>     <Meta Format=\"chr\" Type=\"application/vnd.omads-folder+xml\"/>     <Data><![CDATA[       <Folder>         <name>OMA</name>         <created>20080401T123456</created>          ...       </Folder>]]>     </Data>   </Item> </Add>  Example 5: The server requests the client to add a new item to a folder that is not yet mapped by the client (e.g. the folder was added during this session by the server) <Add CmdID=\"105\">   <Meta Format=\"chr\" Type=\"text/x-vcard\"/>   <Item>     <SourceServerURI>ABC012345_1006</SourceServerURI>     <SourceServerParentURI>ABC012345_1005</SourceServerParentURI>     <Data>BEGIN:VCARD VERSION:3.0 FN:Bruce Smith N:Smith;Bruce TEL;WORK;VOICE:+1-919-555-1234 TEL;WORK;FAX:+1-919-555-9876 EMAIL;INTERNET:bruce1@example.com END:VCARD     </Data>   </Item> </Add>  Note: The above examples include all situations that need to be supported if hierarchy is supported.  Examples 1 and 2 are the only examples that need to be supported if hierarchy is not supported.  No other combinations of TargetServerURI / TargetClientURI, SourceServerURI / SourceClientURI, TargetServerParentURI / TargetClientParentURI or SourceServerParentURI / SourceClientParentURI should occur.  For example, the client should never be in the situation of needing to add a data item to a folder that was added by the server, but is not yet mapped (use TargetServerParentURI), since the client could have already sent the new LUID in the corresponding StatusItem element when the folder was added before sending its Add command.  Similarly, the server MUST NOT create LUIDs, and thus should never include a TargetClientURI in an Add command. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 23 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]   6.2.2 Alert Usage: Specifies the specific event. The command provides a mechanism for communicating event information to the recipient, such as requesting for next message, last chunk of a large object not received, terminating a session, etc.  Parent Element: SyncBody Content Model: <xs:element name=\"Alert\" type=\"AlertType\"/> <xs:complexType name=\"AlertType\">   <xs:sequence>     <xs:element ref=\"Cred\" minOccurs=\"0\"/>     <xs:element ref=\"Item\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>   </xs:sequence>   <xs:attribute ref=\"CmdID\" use=\"required\"/>   <xs:attribute ref=\"Code\" use=\"required\"/>   <xs:attribute ref=\"NoStatus\" use=\"optional\"/> </xs:complexType> Restrictions:  The Code attribute specifies the status code corresponding to a specific event for the recipient.  Optionally, one or more Item element types MAY be specified. The Item element type specifies parameters for the Alert command. The TargetServerURI / TargetClientURI and SourceServerURI / SourceClientURI specified within the Item element type MUST be an absolute URI. If the command and the associated action are completed successfully, then the status code '(200) OK' is created by the command. If the command was accepted successfully, but the Alert action has not yet been executed successfully, then the (202) Accepted for processing exception condition is created by the command. A subsequent exception condition can be created to relate the eventual completion status of the associated Alert action. Example: The following is an example for a data sync client to request for next message in the case of multiple messages in a package.  <Alert CmdID=\"1\" Code=\"211\">   <Item>     <TargetServerURI>./Contact/Contacts</TargetServerURI>     <SourceClientURI>./C\\System\\Data\\Contacts.cdb </SourceClientURI>   </Item> </Alert>  6.2.3 Anchor Usage: Specifies the synchronization state information (i.e., sync anchor) for the current and previous synchronization session. Parent Element: SyncAlert, Status Content Model:  <xs:element name=\"Anchor\">   <xs:complexType>     <xs:attribute ref=\"Last\" use=\"optional\"/>     <xs:attribute ref=\"Next\" use=\"required\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 24 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    </xs:complexType> </xs:element> <xs:attribute name=\"Last\" type=\"AnchorType\"/> <xs:attribute name=\"Next\" type=\"AnchorType\"/> <xs:simpleType name=\"AnchorType\">   <xs:union memberTypes=\"xs:dateTime xs:positiveInteger\"/> </xs:simpleType> Restrictions:  The OPTIONAL Last attribute specifies the synchronization anchor for the previous synchronization session. The REQUIRED Next attribute specifies the synchronization anchor for the current synchronization session. The value of Last and Next attributes MUST specify either an UTC based date/time stamp or a monotonically increasing numeric integer. If a date/time stamp, then the text MUST be in the complete representation, basic format defined by ISO8601. All Last or Next values sent in a synchronization session by a particular sender MUST be of the same type, and MUST be used such that a comparison operation on values can determine older from newer. Determination of the ordinal sequence of the version of an existing object in the recipient and the version of the object can be made by comparing the content information of the object with the value on the existing object. Example:  <Anchor Last=\"2000-08-24T13:30:00Z\" Next=\"2000-08-24T22:13:00Z\"/> Note that a comparison operator should find that the value of Next is greater than the value of Last (if present).   6.2.4 Atomic Usage: Specifies that the subordinate commands be executed as a set or not at all. Parent Element: Sync Content Model:  <xs:attribute name=\"Atomic\" type=\"xs:boolean\" default=\"false\"/> Restrictions:  If the command with the Atomic attribute set to ‘true’ completed successfully, then the normal Status for the command should be returned. If an error occurs while performing a command within a Sync command specified with an Atomic attribute, then the (507) Atomic failed exception condition is created by the Sync command. The error status code indicates the failure of the complete command. Separate, individual error status code can also be created that identify specific errors that created the failure. If a client can execute all the atomic commands together (and thus guarantee the result) then a client MAY split the responses up over multiple messages.  If a client cannot execute all the atomic commands together (and thus cannot guarantee the results of commands not executed) and Status responses would go into multiple messages, then the Sync command MUST fail with status code (517) Atomic response too large to fit in message.  Previously executed commands within the Sync command MUST be rolled back. Example:  <Sync CmdID=\"1234\" Atomic=\"true\">   <Add CmdID=\"1235\">     <Cred>       <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 25 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]        <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>     </Cred>     <Item>       <TargetClientURI>./Foo/pen</TargetClientURI>       <Data>Yes</Data>     </Item>   </Add>   <Replace CmdID=\"12346\">     <Cred>       <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>       <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>     </Cred>     <Item>       <TargetClientURI>./Foo/version</TargetClientURI>       <Data>20000401T133000Z</Data>     </Item>   </Replace> </Sync>  6.2.5 AuthName Usage: Specifies the user name for authentication. Parent Element: Cred Content Model:  <xs:attribute name=\"AuthName\" type=\"xs:string\"/> Restrictions:  For Authentication schemes which do not contain an extractable user identifier, the AuthName attribute is used to hold a user specific identifier.  6.2.6 Behaviour Usage: Species the behaviour for the current sync session. Parent Element: SyncType Content Model:  <xs:attribute name=\"Behaviour\">   <xs:simpleType>     <xs:restriction base=\"xs:string\">       <xs:enumeration value=\"Preserve\"/>       <xs:enumeration value=\"Refresh\"/>     </xs:restriction>   </xs:simpleType> </xs:attribute> Restrictions:  The Behaviour attribute specify the behaviour for the current sync session.  The semantics of Direction, Behaviour, IDValidity and ChangeLogValidity are described in [DSPRO].   OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 26 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  6.2.7 Chal Usage: Specifies an authentication challenge. The recipient of the challenge specifies authentication credentials, of the given authentication scheme and encoding, in the next request. Parent Elements: Status, SyncHdr  Content Model:  <xs:element name=\"Chal\" type=\"ChalType\"/> <xs:complexType name=\"ChalType\">   <xs:sequence>     <xs:element ref=\"Meta\"/>     <xs:element ref=\"NextNonce\" minOccurs=\"0\"/>   </xs:sequence> </xs:complexType> Restrictions:  The Meta element’s Type and Format attributes specify the authentication scheme type and credential encoding style, respectively. The optional NextNonce element is only used in SHA-256 authentication scheme to specify the new nonce. The next nonce will be used for authentication when the next sync session is started. The next nonce is provided to make sure the nonce is used only once to avoid an easy eavesdropping of the communication A challenge can be specified against the DS server or datastore. To challenge a DS server, a Chal element is sent in the Status command corresponding to the SyncHdr of the associated SyncML request. To challenge a datastore, the Chal element is sent in the Status command corresponding to the SyncAlert or Sync command associated with the database. When the Chal element is specified in the SyncHdr element, it can be used to update the next nonce to the other side. When the client or server determines to update the next nonce to the other side, the sender can generate the new next nonce and send it in SyncHdr/Chal/NextNonce to the receiver, and the receiver updates the old nonce using the received next nonce. The recipient MUST successfully authenticate the credential information in SyncHdr before accepting the nonce update. If more than one nonce is transmitted during the session, the latest one MUST be used for the next session. If absent and if the status code is (200) Command completed successfully, then the same credentials SHALL be used in the next SyncML request. If absent and if the status code is (212) Authentication accepted, then credentials need not be specified for any subsequent SyncML requests within the current session. The session is authenticated. Example: The following is a SHA-256 authentication challenge.  <Status CmdID=\"1\" CmdRef=\"0\" Code=\"407\" MsgRef=\"1\" Cmd=\"SyncHdr\">   <Chal>     <Meta Format=\"b64\" Type=\"syncml:auth-sha256\"/>     <NextNonce>Tm9uY2U=</NextNonce>   </Chal> </Status>   6.2.8 ChangeLogValidity Usage: Specifies if the change log is valid.  Parent Element: SyncType Content Model:  <xs:attribute name=\"ChangeLogValidity\" type=\"xs:boolean\" /> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 27 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Restrictions:  The ChangeLogValidity attribute specifies if the change log is valid. The semantics of Direction, Behaviour, IDValidity and ChangeLogValidity are described in [DSPRO].   6.2.9 ClientURI Usage: Specifies the SourceClientURI or TargetClientURI referenced by a Status or Results element, or the new Client LUID assigned to the associated ServerURI. Parent Elements: StatusItem, Status, Results Content Model:  <xs:element name=\"ClientURI\" type=\"URIWithFPType\"/> Restrictions:  When specified in the Status element, specifies the client address specified in the command associated with the response status. When specified in the StatusItem element, specifies the client address specified in the specific Item, or the new client identifier for the server address specified in the Item.  When specified in the Results element, specifies the client address specified in the associated Get command. The element MUST be specified in a Status command corresponding to any SyncML command that includes the SourceClientURI or TargetClientURI element. Example:  <Status CmdID=\"4321\" MsgRef=\"1\" CmdRef=\"1234\" Cmd=\"Add\" Code=\"200\">   <ServerURI>ABC012345_1012</ServerURI>   <ClientURI>1012</ClientURI> </Status>  6.2.10    Cmd Usage: Specifies the name of the SyncML command referenced by a Status element. Parent Element: Status Content Model:  <xs:attribute name=\"Cmd\">   <xs:simpleType>     <xs:restriction base=\"xs:string\">       <xs:enumeration value=\"Add\"/>       <xs:enumeration value=\"Alert\"/>       <xs:enumeration value=\"Copy\"/>       <xs:enumeration value=\"Delete\"/>       <xs:enumeration value=\"Get\"/>       <xs:enumeration value=\"Move\"/>       <xs:enumeration value=\"Put\"/>       <xs:enumeration value=\"Replace\"/>       <xs:enumeration value=\"Results\"/>       <xs:enumeration value=\"Status\"/>       <xs:enumeration value=\"Sync\"/>       <xs:enumeration value=\"SyncAlert\"/>       <xs:enumeration value=\"SyncHdr\"/>     </xs:restriction> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 28 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    </xs:simpleType> </xs:attribute> Restrictions:  The value MUST be one of \"Add\", \"Alert\", \"Copy\", \"Delete\", \"Get\", \"Move\", \"Put\", \"Replace\", \"Results\", \"Status\", \"Sync\", \"SyncAlert\" when the CmdRef attribute has a value greater than \"0\"or be \"SyncHdr\" when the CmdRef attribute has a value of \"0\". Example:  <Status CmdID=\"4321\" MsgRef=\"1\" CmdRef=\"1234\" Cmd=\"Add\" >   ... </Status>  6.2.11    CmdID Usage: Specifies a SyncML message-unique command identifier.  This is a positive integer used to uniquely reference the Protocol Management Elements [6.1.4] or Protocol Command Elements [6.1.5] in a message.  Generally this is referenced in the CmdRef attribute of a Results or Status element. Parent Elements: Add, Alert, Copy, Delete, Get, Move, Put, Replace, Results, Status, Sync, SyncAlert Content Model:  <xs:attribute name=\"CmdID\" type=\"xs:positiveInteger\"/> Restrictions:  The value MUST be unique within each SyncML Message. The attribute MUST be present on each of the Protocol Management Elements [6.1.4] or Protocol Command Elements [6.1.5] in a message. Example:  <Add CmdID=\"1234\" >   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>     <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <Item>     <SourceClientURI>./12</SourceClientURI>     <Meta Type=\"text/directory;profile=vCard\"/>     <Data>BEGIN:VCARD VERSION:3.0 FN:Smith;Bruce N:Bruce Smith TEL;TYPE=WORK;VOICE:+1-919-555-1234 END:VCARD     </Data>   </Item> </Add>  6.2.12    CmdRef Usage: Specifies the CmdID referenced by a Results or Status element. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 29 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Parent Elements: Results, Status Content Model:  <xs:attribute name=\"CmdRef\" type=\"xs:nonNegativeInteger\"/> Restrictions:  The CmdRef attribute MUST refer to the identifier of the SyncML command referenced by the Results or Status element. The value “0” refers to the SyncHdr of the corresponding message. Example:  <Status CmdID=\"4321\" MsgRef=\"1\" CmdRef=\"1234\" Cmd=\"Add\" Code=\"401\">   <Chal>     <Meta Format=\"b64\" Type=\"syncml:auth-md5\"/>     <NextNonce>ZG9iZWhhdmUNCg==</NextNonce>   </Chal> </Status>  6.2.13    Code Usage: Specifies a status code or alert code. Parent Elements: Alert, Status Content Model:  <xs:attribute name=\"Code\" type=\"xs:positiveInteger\"/> Restrictions:  This attribute is used to specify a status code or alert code. Example:  <Alert CmdID=\"1234\" Code=\"222\"/>  6.2.14    CommonOperationType Usage: Specifies the complex type for the SyncML commands which have the common operation type.  Parent Elements: Add, Copy, Get, Move, Put Content Model:  <xs:complexType name=\"ComplexOperationType\"/>   <xs:sequence>     <xs:element ref=\"Cred\" minOccurs=\"0\"/>     <xs:element ref=\"Meta\" minOccurs=\"0\"/>     <xs:element ref=\"Item\" maxOccurs=\"unbounded\"/>   </xs:sequence>   <xs:attribute ref=\"CmdID\" use=\"required\"/>   <xs:attribute ref=\"NoStatus\" use=\"optional\"/> </xs:complexType> Example:  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 30 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  <xs:element name=\"Add\" type=\"CommonOperationType\" />  6.2.15    Copy Usage: Specifies the SyncML command to copy data items from one location (data store and/or folder) to another in the recipient's database. Parent Elements: Sync, SyncBody Content Model:  <xs:element name=\"Copy\" type=\"CommonOperationType\"/> Restrictions:  It is implementation dependent whether a physical copy of the item is made in the recipient, or whether a shortcut or pointer is created to the source item in the target location.  The Copy command in this version of the specification is NOT intended to be used to attempt to change the MIME content type of a data item, compress the data item or otherwise transform a target data item.  Both the source and target locations MUST support the MIME content type of the data item. The result of any differences between the supported field lists of different datastores is undefined. One or more Item element types MUST be specified. The Item element type specifies the data item to be copied on the recipient's database. Any Data specified in Item SHOULD be ignored by the recipient. The source data item, and the source and target parent datastores and folders MUST exist.  If specified within a Sync element type to reference items within the current datastore, a TargetServerURI, TargetClientURI, SourceServerURI, or SourceClientURI specified within the Item element type in the Copy command SHOULD be a relative URI, as relative to the corresponding  TargetServerURI / TargetClientURI or SourceServerURI / SourceClientURI specified in the parent Sync command.  If specified within a Sync element type to reference items outside the current datastore, a TargetServerURI, TargetClientURI, SourceServerURI or SourceClientURI specified within the Item element type in the Copy command SHOULD be a relative URI, as relative to the corresponding TargetClientParentURI or SourceClientParentURI, which SHOULD be an absolute URI.  If specified within a SyncBody element type, a TargetServerURI, TargetClientURI, or SourceClientURI specified within the Item element type in the Copy command SHOULD be a relative URI, as relative to the corresponding TargetClientParentURI or SourceClientParentURI, which SHOULD be an absolute URI.  When specified by the client, Item elements of Copy commands MUST only contain client identifiers (SourceClientURI, SourceClientParentURI, TargetClientURI, and TargetClientParentURI).  Note the implication that any item created by the server must be mapped by the client before it can be referenced by the client. When specified by the server, Item elements of Copy commands MUST contain a TargetServerURI and MUST NOT contain a TargetClientURI. TargetServerParentURI and SourceServerParentURI SHOULD only be used within a Sync command, and SHOULD be relative URIs, as relative to the corresponding TargetServerURI / TargetClientURI or SourceServerURI / SourceClientURI specified in the parent Sync command. Note the implication that servers cannot Copy to or from folders outside the current datastore that have not been mapped by the client.  This is to reduce complexity, by avoiding ambiguous parent addresses of the form “./LUID/LUID/GUID/GUID”. The Item element for each object MUST include parent information for both the source and the target location. When the client is the recipient, it MAY assign new local identifiers (LUIDs) for the data items specified in this command. However, in such cases the client MUST also notify the server of the item identifier correlation by returning the new LUID in the corresponding StatusItem element. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 31 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    Source/Target Combinations Valid inside Sync or SyncBody Only Valid in Sync Valid within single or multiple datastores Only Valid within the current datastore (relative Parent URIs) Example 1/2 Example 3/4 Example 5/6  Example 7 Example 8 Example 9 Example 10 Sender Client Server Server Server Server Server Server Use Relative URIs for object identifiers. SourceServerURI - - X - X X X SourceClientURI X X - X - - - TargetServerURI - X X X X X X TargetClientURI X - - - - - - When Inside Sync, use Relative URIs for Parent Identifiers within the same datastore. When Inside SyncBody, or to reference other datastores, use Absolute URIs for the Parent Identifiers. SourceServerParentURI (Relative URI only) - - - - - X X SourceClientParentURI X X X X X - - TargetServerParentURI (Relative URI only) - - - X X - X TargetClientParentURI X X X - - X - Table 9: Copy Source/Target Combinations Status Codes: If the command completed successfully, then the (201) Item added exception condition is created by the command. If the originator's authentication credentials specify a principal with insufficient rights to complete the command, then the (401) Unauthorized exception condition is created by the command. If no authentication credentials were specified, then (407) Authentication required exception condition is created by the command. A suitable challenge can also be returned. If the target data item already exists in the recipient database, then the (418) Already exists exception condition is created by the command. If there is insufficient space in the recipient database for the data item, then the (420) Device full exception condition is created by the command, and the originator SHOULD NOT attempt to add additional data until the recipient has more free space. Non-specific errors created by the recipient while attempting to complete the command create the (500) Command failed exception condition. If an error occurs while the recipient copying the data item within the recipient's data base, then the (510) Data store failure exception condition is created by the command. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 32 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Example 1: The client requests the server to copy an item (LUID 1001) from the top level folder to a different folder (LUID 1013), within the same datastore, assigning it the new LUID 1007, within a Sync command. <Copy CmdID=\"301\">   <Item>     <TargetClientURI>1007</TargetClientURI>     <SourceClientURI>1001</SourceClientURI>     <TargetClientParentURI>1013</TargetClientParentURI>     <SourceClientParentURI>./</SourceClientParentURI>   </Item> </Copy>  Example 2: The client requests the server to copy an item (LUID 1002) from the top level folder of the ./Contacts datastore to a different folder (LUID 1008), within the ./Archive datastore, assigning it the new LUID 1010, outside of a Sync command. <Copy CmdID=\"302\">   <Item>     <TargetClientURI>1010</TargetClientURI>     <SourceClientURI>1002</SourceClientURI>     <TargetClientParentURI>./Archive/1008</TargetClientParentURI>     <SourceClientParentURI>./Contacts</SourceClientParentURI>   </Item> </Copy>  Example 3: The server requests the client to copy an existing, mapped item (LUID 1001) from the top level folder of one datastore to a different existing, mapped folder (LUID 1008) in the ./Archive datastore, assigning it a GUID of ABC012345_1011, inside of a Sync command. <Copy CmdID=\"303\">   <Item>     <TargetServerURI>ABC012345_1011</TargetServerURI>     <SourceClientURI>1001</SourceClientURI>     <TargetClientParentURI>./Archive/1008</TargetClientParentURI>     <SourceClientParentURI>./</SourceClientParentURI>   </Item> </Copy>  Example 4: The server requests the client to copy an existing, mapped item (LUID 1002) from the top level folder of one datastore to a different existing, mapped folder (LUID 1013) in the same datastore, assigning it a GUID of ABC012345_1012, outside of a Sync command. <Copy CmdID=\"304\">   <Item>     <TargetServerURI>ABC012345_1012</TargetServerURI>     <SourceClientURI>1002</SourceClientURI>     <TargetClientParentURI>./Contacts/1004</TargetClientParentURI>     <SourceClientParentURI>./Contacts</SourceClientParentURI>   </Item> </Copy>  Example 5: The server requests the client to copy an existing but unmapped item (GUID ABC012345_1003) from the top level folder of the current datastore to a different existing, mapped folder (LUID 1004) in the same datastore, assigning it a GUID of ABC012345_1013, inside of a Sync command. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 33 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  <Copy CmdID=\"305\">   <Item>     <TargetServerURI>ABC012345_1013</TargetServerURI>     <SourceServerURI>ABC012345_1003</SourceServerURI>     <TargetClientParentURI>1004</TargetClientParentURI>     <SourceClientParentURI>./</SourceClientParentURI>   </Item> </Copy>  Example 6: The server requests the client to copy an existing but unmapped item (GUID ABC012345_1003) from the top level folder of a datastore to a different existing, mapped folder (LUID 1008) in a different datastore, assigning it a GUID of ABC012345_1014, outside of a Sync command. <Copy CmdID=\"306\">   <Item>     <TargetServerURI>ABC012345_1014</TargetServerURI>     <SourceServerURI>ABC012345_1003</SourceServerURI>     <TargetClientParentURI>./Archive/1008</TargetClientParentURI>     <SourceClientParentURI>./Contacts</SourceClientParentURI>   </Item> </Copy>  Example 7: The server requests the client to copy an existing mapped item (LUID 1001) from the top level folder to an existing, unmapped folder (GUID ABC012345_1005), assigning it a GUID of ABC012345_1015, inside of a Sync command. <Copy CmdID=\"307\" >   <Item>     <TargetServerURI>ABC012345_1015</TargetServerURI>     <SourceClientURI>1001</SourceClientURI>     <TargetServerParentURI>ABC012345_1005</TargetServerParentURI>     <SourceClientParentURI>./</SourceClientParentURI>   </Item> </Copy>  Example 8: The server requests the client to copy an existing unmapped item (GUID ABC012345_1003) from the top level folder to an existing, unmapped folder (GUID ABC012345_1005), assigning it a GUID of ABC012345_1016, inside of a Sync command. <Copy CmdID=\"308\">   <Item>     <TargetServerURI>ABC012345_1016</TargetServerURI>     <SourceServerURI> GUID ABC012345_1003</SourceServerURI>     <TargetServerParentURI>ABC012345_1005</TargetServerParentURI>     <SourceClientParentURI>./</SourceClientParentURI>   </Item> </Copy>  Example 9: The server requests the client to copy an existing unmapped item (GUID ABC012345_1006) from an existing unmapped folder (GUID ABC012345_1005) to an existing, mapped folder (LUID 1013), assigning it a GUID of ABC012345_1017, inside of a Sync command. <Copy CmdID=\"309\">   <Item> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 34 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]      <TargetServerURI>ABC012345_1017</TargetServerURI>     <SourceServerURI>GUID ABC012345_1006</SourceServerURI>     <TargetClientParentURI>1013</TargetClientParentURI>     <SourceServerParentURI>GUID ABC012345_1005</SourceServerParentURI>   </Item> </Copy>  Example 10: The server requests the client to copy an existing unmapped item (GUID ABC012345_1006) from an existing unmapped folder (GUID ABC012345_1005) to an the same existing unmapped folder (GUID ABC012345_1006), assigning it a GUID of ABC012345_1018, inside of a Sync command. <Copy CmdID=\"310\">   <Item>     <TargetServerURI>ABC012345_1018</TargetServerURI>     <SourceServerURI>GUID ABC012345_1006</SourceServerURI>     <TargetServerParentURI>GUID_ABC012345_1005</TargetServerParentURI>     <SourceServerParentURI>GUID ABC012345_1005</SourceServerParentURI>   </Item> </Copy>  6.2.16    Correlator  Usage:  Specifies a link between two related SyncAlert commands. Parent Element: SyncAlert Content Model: <xs:attribute name=\"Correlator\" type=\"xs:string\"/> Restrictions:    None  6.2.17    Cred Usage: Specifies an authentication credential for the originator. Parent Elements:  Add, Alert, Copy, Delete, Get, Put, Move, Replace, Status, Sync, SyncAlert, SyncHdr Content Model:  Content Model: <xs:element name=\"Cred\" type=\"CredType\"/> <xs:complexType name=\"CredType\">   <xs:sequence>     <xs:element ref=\"Meta\"/>     <xs:element ref=\"Data\"/>   </xs:sequence>   <xs:attribute ref=\"AuthName\" use=\"optional\"> </xs:complexType> Restrictions:  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 35 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  The Meta Type and Format attributes specify the authentication scheme and credential encoding style, respectively. The value of the Data element specifies the credential.  For authentication schemes which do not contain an extractable user identifier, the AuthName attribute is used to hold a user specific identifier. Credentials SHOULD be processed from the SyncML message level (supplied on the SyncHdr), down to the datastore level (supplied on a SyncAlert or Sync command), down to the individual command.  Credential failure at the message level should stop lower level credential checking until that has been resolved.  The Data Sync Client and Server MUST support the following authentication scheme: Name Authentication Scheme Description SHA-256 syncml:auth-sha256 SHA-256 hash-function based authentication scheme. SHA-256 authentication scheme provides a safe way for prevention of replay attacks to transmit the credential in SHA-256 digest to the recipient. When SHA-256 authentication scheme is used, the value of Meta Type and Format attributes SHALL be ‘syncml:auth-sha256’ and ‘b64’, respectively. The value of Data element is the digest which SHALL be computed as following: Let H = the SHA-256 Hashing function. Let Digest = the output of the SHA-256 Hashing function. Let B64 = the base64 encoding function. Let userid = User Identifier. Let secret = Secrete known by the originator and recipient. Let nonce = Challenge specified by the recipient Digest = H(B64(H(userid:secret)):nonce) If absent, and no other authentication credential was specified in either a parent command or in the SyncHdr element, then no authentication credential is specified. If an authentication credential was specified by a parent command or in the SyncHdr element, then that authentication credential specified there is assumed to be sufficient for the operation specified by the current element. Specifying insufficient authentication credentials will result in a ‘(401) Unauthorized’ exception condition. If the authentication challenge is received for the request, the authentication scheme and encoding of the next request SHALL be applied to it. The DS Client and Server MAY support the following authentication schemes (not the definitive list): Name Authentication Scheme Description SHA-1 syncml:auth-sha1 SHA-1 hash-function based authentication scheme. MD5 syncml:auth-md5 MD5 hash-function based authentication scheme. X509 syncml:auth-x509 The data would be an actual X.509 Certificate. The data SHOULD be sent raw in WBXML, and base64 encoded in XML. Securid syncml:auth-securid The data specific for SecurID authentication would be sent.  The data SHOULD be sent raw in WBXML, and base64 encoded in XML. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 36 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Safeword syncml:auth-safeword The data specific for SafeWord authentication would be sent.  The data SHOULD be sent raw in WBXML, and base64 encoded in XML. Digipass syncml:auth-digipass The data specific for DigiPass authentication would be sent.  The data SHOULD be sent raw in WBXML, and base64 encoded in XML.   Other authentication schemes MAY be specified by prior agreement between the originator and the recipient, which is out of the scope of this document. Example: The following is an example of a SHA-256 authentication scheme: <Cred AuthName=\"Bruce\">   <Meta Format=\"b64\" Type=\"syncml:auth-sha256\"/>   <Data>  --actual data goes here-- </Data> </Cred>   6.2.18    Data Usage: Specifies discrete SyncML data. Parent Elements: Cred, Item Content Model:  <xs:element name=\"Data\" type=\"DataType\"/> <xs:complexType name=\"DataType\">   <xs:simpleContent>     <xs:extension base=\"xs:string\">       <xs:attribute ref=\"Encrypted\" use=\"optional\"/>     </xs:extension>   </xs:simpleContent> </xs:complexType> Restrictions:  The content information can be either parsable character data or mark-up data. If the element type contains any mark-up, then the name space for the element types MUST be declared on the element types in the content information. The optional Encrypted attribute specifies whether or not the content data is encrypted. When specified in a Cred, the element type specifies the authentication credentials. When specified in an Item, the element type specifies the item data. Example 1: The following is an example of an Item with data that does not contain any mark-up. <Item>   <Data>John Smith, +1-919-555-1234</Data> </Item>  Example 1: The following is an example of an Item with data that does contain meta-information mark-up data. <Item>   <Meta Format=\"xml\" Type=\"application/vnd.syncml-devinf+xml\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 37 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    <Data><![CDATA[     <DevInf xmlns='syncml:devinf' Version=\"2.0\">       <DevCap>         <Man>HAL</Man>         <Model>9000</Model>         <OEM>Classified</OEM>         <FwV>1.0Beta</FwV>         <SwV>1.0Beta</SwV>         <HwV>1.0Beta</HwV>         <DevID>HAL 9000</DevID>         <DevType>server</DevType>       </DevCap>       <DataStore>         ..       </DataStore>     </DevInf>]]>   </Data> </Item>  6.2.19    Delete Usage: Specifies the SyncML command to delete data from a data collection. Parent Elements: Sync, SyncBody Content Model:  <xs:element name=\"Delete\" type=\"DeleteType\"/> <xs:complexType name=\"DeleteType\">   <xs:sequence>     <xs:element ref=\"Cred\" minOccurs=\"0\"/>     <xs:element ref=\"Item\" maxOccurs=\"unbounded\"/>   </xs:sequence>   <xs:attribute ref=\"CmdID\" use=\"required\"/>   <xs:attribute ref=\"SftDel\" use=\"optional\"/>   <xs:attribute ref=\"NoStatus\" use=\"optional\"/> </xs:complexType>  Restrictions:  The Delete command is generally used to permanently erase data items from the recipient's database. However, the command can also be used to temporarily remove data items from the recipient's database in order to create room for a subsequent Add command. This is termed a \"soft delete\". One or more Item element types MUST be specified. The Item element type specifies the data item deleted from the database. The TargetClientURI or SourceClientURI specified within the Item element type is a client identifier (LUID), as relative to the corresponding TargetServerURI / TargetClientURI or SourceServerURI / SourceClientURI specified in the parent Sync command. TargetServerURI, SourceServerURI, TargetServerParentURI, TargetClientParentURI, SourceServerParentURI or SourceClientParentURI MUST NOT be specified in a Delete command.  If the client wishes to delete an item that has not yet been mapped, it must first send the new LUID in the corresponding StatusItem element of the item to be deleted.  The Server MUST NOT attempt to delete an item before the client has had an opportunity to send a new LUID in the StatusItem element (E.g. Adding an item, and then immediately deleting the same item by the GUID is prohibited). In applications (e.g., email) where the \"delete\" concept involves \"moving\" a data item from one folder to a special \"Deleted\" folder, this can be achieved either by the Move command, or by using either the Copy command or the Add command to propagate the specified data item to the \"Deleted\" folder, followed by the subsequent Delete of the corresponding item from the original folder. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 38 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  The recipient of a Delete command can delete any subset of the specified data elements. However, if all of the requested data was not deleted, then the (206) Partial content exception condition is created by the command. If a Status command is returned for this exception condition, then the identifiers of the data items not deleted SHOULD be returned also. If the recipient determines that the data item doesn't exists on the recipient's database, then the (211) Item not deleted exception condition is created by the command. If the originator's authentication credentials specify a principal with insufficient rights to complete the command, then the (401) Unauthorized exception condition is created by the command. If no authentication credentials were specified, then (407) Authentication required exception condition is created by the command. A suitable challenge can also be returned. In synchronization protocol cases where the client sends a new LUID for the GUID in a StatusItem element, the server MUST always specify the client identifier for any data items to be deleted. Otherwise, the (412) Incomplete command exception condition is created and no data items will be deleted by the client. The Delete command can be used to delete an interior node and all of its child nodes.  If a Delete is received for a parent node which still contains child items, the child items are also deleted. Non-specific errors created by the recipient while attempting to complete the command create the (500) Command failed exception condition. Example 1: The client requests the server to delete an item, with credentials that provide delete access to the item in the current datastore.  The item is identified by the client LUID. <Delete CmdID=\"401\">   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>     <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <Item><SourceClientURI>1001</SourceClientURI></Item> </Delete>  The following is an example to \"soft delete\" a number of data items to allow room on the device for a subsequent Add or Copy command, not specified in this example. Example 2: The client informs the server that it has Soft Deleted a set of items to free storage on the device. The items are identified by client LUIDs. <Delete CmdID=\"402\" SftDel=\"true\">   <Item><SourceClientURI>1015</SourceClientURI></Item>   <Item><SourceClientURI>1016</SourceClientURI></Item>   <Item><SourceClientURI>1017</SourceClientURI></Item> </Delete>  Example 3: The server requests the client to Soft Delete a set of items to free storage on the device. The items are identified by client LUIDs. <Delete CmdID=\"403\" SftDel=\"true\">   <Item><TargetClientURI>1018</TargetClientURI></Item>   <Item><TargetClientURI>1019</TargetClientURI></Item>   <Item><TargetClientURI>1020</TargetClientURI></Item> </Delete>  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 39 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  6.2.20    Direction Usage: Specifies the sync direction.  Parent Element: SyncType Content Model:  <xs:attribute name=\"Direction\">   <xs:simpleType>     <xs:restriction base=\"xs:string\">       <xs:enumeration value=\"fromClient\"/>       <xs:enumeration value=\"fromServer\"/>       <xs:enumeration value=\"twoWay\"/>       <xs:enumeration value=\"NoWay\"/>     </xs:restriction>   </xs:simpleType> </xs:attribute> Restrictions:  The Direction attribute specify the sync direction.  The semantics of Direction, Behaviour, IDValidity and ChangeLogValidity are described in [DSPRO].     6.2.21    EmptyType Usage: This type definition is used in the Syntax Elements definition. And it is used to specify an empty type for the Element that has no element, attribute or content.  Used for Elements: Final, MoreData Content Model:  <xs:complexType name=\"EmptyType\"/> Example:  <xs:element name=\"Final\" type=\"EmptyType\" />  6.2.22    Encrypted Usage: Specifies whether or not the data is encrypted. Parent Element: Data Content Model:  <xs:attribute name=\"Encrypted\" type=\"xs:boolean\" default=\"false\"/> Restrictions:  This attribute specifies whether or not the content information in the Data element is encrypted using the encrypted symmetry key transmitted in SyncHdr.  Example: The following is an example of an Item with data that does not contain any mark-up. <Item> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 40 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    ...  ...   <Data Encrypted=\"true\">blahblahblah</Data> </Item>  6.2.23    EncryptedKey Usage: Specifies encrypted symmetric key and key information for the originator. Parent Element: SyncHdr Content Model:  <xs:element name=\"EncryptedKey\" type=\"CredType\"/> Restrictions:  The Meta Type and Size attributes specify the algorithm and length of the symmetric key, respectively. The Meta Format attribute specifies the encoding style for the encrypted octet sequence. The default value for this element is b64. The value of the Data element specifies the encrypted symmetric key using the key exchange algorithm.  Example: The following example illustrates how the encrypted symmetric key is transmitted. <SyncHdr>   ...   <EncryptedKey>     <Meta Format=\"b64\" Type=\"AES-128-CBC\" Size=\"128\"/>     <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </EncryptedKey> </SyncHdr>  6.2.24    Field Usage: Specifies a field level filter to be performed on the parent element of the Filter element. Parent Element: Filter Content Model:  <xs:element name=\"Field\" type=\"FieldType\"/> <xs:complexType name=\"FieldType\">   <xs:sequence>     <xs:element ref=\"Item\"/>   </xs:sequence> </xs:complexType> Restrictions:  If the Field element is present, the SyncAlert TargetClientURI/TargetServerURI Meta Type is used to indicate the content type used in the content filtering and MUST be present. The Item Meta element is used to indicate the device info MIME type and MUST be present. The Item Data element MUST contain Property elements. The mark-up characters of the Data element content MUST be properly escaped according to [XML] specification rules or the CDATA sections MUST be used. The Property elements MUST be used to override any Property elements previously received in the CTCap element for the content-type being filtered and MUST apply to the current synchronization session only. If no Field element is present in the Filter element, then all properties SHOULD be filtered using the device info data store CTCap element for the specified SyncAlert element. Example: The following is an example of a Field element used within a Filter element to define the characteristics of the subset of data to be synchronized.  The Field element contains a Property element set to “PHOTO” containing a OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 41 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  MaxSize element set to 0 (zero). This indicates to the server that it  SHOULD NOT send any PHOTO properties since the client has requested that it wishes to receive only 0 bytes of this property for this synchronization request and the value  SHOULD NOT be truncated. <Filter>   ...   <Field>     <Item>       <Meta Type=\"application/vnd.syncml-devinf+xml\"/>       <Data><![CDATA[         <Property>           <PropName>PHOTO</PropName>           <PropInfo>             <MaxSize Truncate=\"false\">0</MaxSize>           </PropInfo>         </Property>       ]]></Data>     </Item>   </Field>   ... </Filter>  6.2.25    FieldLevel Usage: Indicates that the content information in the Data element replaces only part of an item. Parent Element: Replace Content Model:  <xs:attribute name=\"FieldLevel\" type=\"xs:boolean\" default=\"false\"/> Restrictions:  Example:  <Replace CmdID=\"3\" FieldLevel=\"true\">   <Meta Type=\"x-type/x-subtype\"/>   <Item>     <TargetClientURI>244</TargetClientURI>     <Data>       ...     </Data>   </Item> </Replace>  6.2.26    Filter Usage: Specifies a filter action to be performed on the parent element. Parent Element: Get, SyncAlert Content Model:  <xs:element name=\"Filter\" type=\"FilterElementType\"/> <xs:complexType name=\"FilterElementType\"> <xs:sequence>   <xs:element ref=\"Meta\"/>     <xs:element ref=\"Field\" minOccurs=\"0\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 42 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]      <xs:element ref=\"Record\" minOccurs=\"0\"/>   </xs:sequence>   <xs:attribute ref=\"FilterType\" use=\"optional\"/> </xs:complexType> Restrictions:  The Filter element MAY appear in the SyncAlert element. If the Filter element is present, the Meta element’s Type attribute is used to indicate the content type used in the filter query and MUST be present. If the Filter element does not have a Record or a Field element, then the filter request is ignored and synchronization MUST continue without any filtering. Example: The following is an example of a Filter element which 1. Uses the Record element with a Meta element’s Type value to specify the MIME type the filter applies to. 2. Uses the Item element with a Meta element’s Type value of “syncml:filtertype-cgi” to indicate the grammar being used. 3. Uses the Item Data element to constrain the items synchronized to those that fall into the “business” or “personal” group (case insensitive) with the cgi expression “GROUP&iCON;business&OR; GROUP &iCON;personal”. <Filter>   <Meta Type=\"Some/MIMEType\"/>   <Record>     <Item>       <Meta Type=\"syncml:filtertype-cgi\"/>       <Data><![CDATA[GROUP&iCON;business&OR;GROUP&iCON;personal]]></Data>     </Item>   </Record> </Filter>  6.2.27    FilterType Usage: Indicates the type of filtering behaviour that is being requested. If the requested filter type is not supported by the recipient then a Status code 406 (OPTIONAL feature not supported) MUST be returned. The Item element of the Status command SHOULD indicate that the FilterType attribute was the unsupported feature. Parent Element: Filter Content Model:  <xs:attribute name=\"FilterType\" default=\"EXCLUSIVE\"/>   <xs:simpleType>     <xs:restriction base=\"xs:string\">       <xs:enumeration value=\"EXCLUSIVE\"/>       <xs:enumeration value=\"INCLUSIVE\"/>     </xs:restriction>   </xs:simpleType> </xs:attribute> Restrictions:  If present, these keywords MUST be one of the FilterType keywords listed below. If not present, then the FilterType value of “EXCLUSIVE” MUST be assumed. Keywords Description EXCLUSIVE Indicates that the sender is requesting that the set of data items to be synchronized MUST be exactly the set of items OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 43 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  specified by the Filter.  Additional items in the data store MUST not be synchronized and the recipient of the Filter MUST request that additional items be removed from the sender device. INCLUSIVE Indicates that the sender is requesting that the set of data items to be synchronized MUST include the set of items specified by the Filter. Additional items in the datastore that are not specified by the Filter MUST not be synchronized and the recipient of the Filter MUST leave these additional items on the sender device. Table 1: FilterType keywords  Example: The following is an example of a Filter element which uses the EXCLUSIVE FilterType keyword <Filter FilterType=\"EXCLUSIVE\">    <Meta Type=\"Some/MIMEType\"/>   <Record>     <Item>       <Meta Type=\"syncml:filtertype-cgi\"/>       <Data><![CDATA[GROUP&iCON;business&OR;GROUP&iCON;personal]]></Data>     </Item>   </Record> </Filter>  6.2.28    Final Usage: Indicator that the SyncML message is the last message in the current SyncML package. Parent Element: SyncBody Content Model:  <xs:element name=\"Final\" type=\"EmptyType\"/> Restrictions:  The element type MUST only be specified on the last message of the SyncML package. If not present, then more messages follow this SyncML message in the current SyncML package. The OMA DS Protocol specification [DSPRO] specifies the semantics of the different SyncML packages. Example:  <SyncML ... >   <SyncHdr>...blah, blah...</SyncHdr>   <SyncBody>     ...blah, blah...     <Final/>   </SyncBody> </SyncML>  6.2.29    Format Usage: Specifies the encoding format of the content information in the Data element.  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 44 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Parent Element: Meta Content Model: <xs:attribute name=\"Format\" type=\"xs:string\"/> Restrictions:  The value of this attribute SHOULD be one of bin, bool, b64, chr, int, node, null, xml, date, time, or float. If this attribute type is missing, the default value is chr. If the value is bin, then the format of the content is binary data. If the value is bool, then the format of the content is either true or false. If the value is b64, then the format of the content information is binary data that has been character encoded using the Base64 transfer encoding defined by [RFC2045]. If the value is chr, then the format of the content information is clear-text in the character set specified on the transport protocol, the MIME content type header or the XML prolog. If the value is int, then the format of the content information is numeric text representing the integer. If the value is null, then there is no content information. This value is used by some synchronization data models to delete the content, but not the presence of the property. If the value is xml, then the format of the content information is XML structured mark-up data. If the value is date, then the format of the content is in ISO 8601 format with the century being included in the year [ISO8601]. If the value is time, then the format of the content is in ISO 8601 format. If the value is float, then the format of the content is standard concept of real numbers corresponding to a single precision 32 bit floating point type as defined in XML Schema 1.0 as the float primitive type. In case a Meta element containing a Format attribute contains meta-information about a Data object, this Meta element MUST have the same parent as the Data object it refers to. The target object is the one in which the meta-information appears. Example: The following example illustrates how the attribute is used to specify Format meta-information for data in the Item element type.  <Item>   <Meta Format=\"int\" Type=\"text/plain\" />   <Data>1024</Data> </Item>  6.2.30    FP Usage: Fingerprints are values associated with particular data item contents. And fingerprints are compared to detect if particular data items have changed. Parent Elements: SourceClientURI, ID Content Model:  <xs:attribute name=\"FP\" type=\"xs:int \"/> Restrictions:  None. Example:  <Replace CmdID=\"3\">   ... ...   <Item>     <SourceClientURI FP=\"0568\">244</SourceClientURI>     <Data>       ...     </Data>   </Item> </Replace> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 45 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]   6.2.31    FreeID Usage: Specifies the number of free item identifiers available for adding new items to the datastore. Parent Element: Sync Content Model:  <xs:attribute name=\"FreeID\" type=\"xs:unsignedInt\"/> Restrictions:  The content information is a decimal integer number. Example: The following is an example showing 25 free item identifiers FreeID=\"25\"  6.2.32    FreeMem Usage: Specifies the amount of free memory, in bytes, available in the datastore. Parent Element: Sync Content Model:  <xs:attribute name=\"FreeMem\" type=\"xs:long\"/> Restrictions:  The content information is a decimal integer number. Example: The following is an example showing 1022 free bytes FreeMem=\"1022\"  6.2.33    Get Usage: Specifies the SyncML command to retrieve data from the recipient. Parent Element: SyncBody Content Model:  <xs:element name=\"Get\" type=\"GetType\"/> <xs:complexType name=\"GetType\">   <xs:sequence>     <xs:element ref=\"Cred\" minOccurs=\"0\"/>     <xs:element ref=\"Meta\" minOccurs=\"0\"/>     <xs:element ref=\"Item\" maxOccurs=\"unbounded\"/>     <xs:element ref=\"Filter\" minOccurs=\"0\"/>   </xs:sequence>   <xs:attribute ref=\"CmdID\" use=\"required\"/>   <xs:attribute ref=\"NoStatus\" use=\"optional\"/> </xs:complexType> Restrictions:  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 46 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  There is no synchronization state information for data retrieved using the Get command. This command MUST NOT be specified within a Sync command. Data returned from a Get command is returned in a Results element type in a subsequent SyncML message. One or more Item element types MUST be specified. The Item element type specifies the data items to be returned from the recipient. The TargetServerURI / TargetClientURI and SourceServerURI / SourceClientURI specified within the Item element type SHOULD be an absolute URI. The optional Filter element specifies the filter criteria applied to the TargetServerURI/TargetClientURI in each Item element. If the command completed successfully, then the (200) OK exception condition is created by the command. If the command completed successfully but there is no content to return, then the (204) No content exception condition is created by the command. If the command completed successfully but only a portion of the content is being returned, with the remainder being returned in subsequent Results commands, then the (206) Partial content exception condition is created by the command. If the command specifies an ambiguous target with multiple matches, then the (300) Multiple choices exception condition is created by the command. If the originator's authentication credentials specify a principal with insufficient rights to complete the command, then the (401) Unauthorized exception condition is created by the command. If no authentication credentials were specified, then (407) Authentication required exception condition is created by the command. A suitable challenge can also be returned. If the specified data item doesn't exist on the recipient, then the (404) Not found exception condition is created by the command. If the requested data item is too large to be transferred at this time, then the (413) Request entity too large exception condition is created by the command. Non-specific errors created by the recipient while attempting to complete the command create the (500) Command failed exception condition. If the MIME content type or content format for the data item is not supported by the recipient, then the (415) Unsupported MIME content type or content format exception condition is created by the command. Example:  <Get CmdID=\"12345\">   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>     <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <Item>     <TargetClientURI>./telecom/pb</TargetClientURI>     <SourceServerURI>http://www.datasync.com/servlet/</SourceServerURI>     <Meta Type=\"text/x-vCard\"/>   </Item> </Get>  6.2.34    ID Usage: Specifies the identifier of the data item, and optionally specifies the fingerprint of the data item. Parent Element: IDContainer OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 47 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Content Model:  <xs:element name=\"ID\" type=\"IDType\"/> <xs:complexType name=\"IDType\">   <xs:simpleContent>     <xs:extension base=\"xs:string\">       <xs:attribute ref=\"FP\" use=\"optional\"/>     </xs:extension>   </xs:simpleContent> </xs:complexType> Restrictions:  The ID element specifies the identifier of the data item, and the optional FP attribute specifies the fingerprint of the data item. Example:  <ID FP=\"01\">LUID001</ID>  6.2.35    IDContainer Usage: Acts as the placeholder element for one or more ID elements. Parent Element: SyncAlert Content Model:  <xs:element name=\"IDContainer\" type=\"IDContainerType\"/> <xs:complexType name=\"IDContainerType\">   <xs:sequence>     <xs:element ref=\"ID\" maxOccurs=\"unbounded\"/>   </xs:sequence> </xs:complexType> Restrictions:  The IDContainer element is used to specify one or more data item identifiers. By using the IDContainer element in a SyncAlert element, the sender can indicate the data item identifiers that the sender wants to send to the receiver, and the receiver can return back the data item identifiers that the receiver wants the sender to send. Example:  <SyncAlert CmdID=\"3\">   ... ...   <IDContainer>     <ID FP=\"01\">LUID001</ID>     <ID FP=\"02\">LUID002</ID>     <ID FP=\"03\">LUID003</ID>   </IDContainer>   ... </SyncAlert>  6.2.36    IDValidity Usage: Specifies if the data item IDs are valid.  Parent Element: SyncType Content Model:  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 48 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  <xs:attribute name=\"IDValidity\" type=\"xs:boolean\"/> Restrictions:  The IDValidity attribute specifies if the ID is valid. The semantics of Direction, Behaviour, IDValidity and ChangeLogValidity are described in [DSPRO].   6.2.37    Item Usage: Specifies a container for item data.  Parent Elements: Add, Alert, Copy, Delete, Field, Get, Put, Move, Record, Replace, Results, Status  Content Model:  <xs:element name=\"Item\" type=\"ItemType\"/> <xs:complexType name=\"ItemType\">   <xs:sequence>     <xs:choice>       <xs:element ref=\"TargetClientURI\" minOccurs=\"0\"/>       <xs:element ref=\"TargetServerURI\" minOccurs=\"0\"/>     </xs:choice>     <xs:choice>       <xs:element ref=\"SourceClientURI\" minOccurs=\"0\"/>       <xs:element ref=\"SourceServerURI\" minOccurs=\"0\"/>     </xs:choice>     <xs:choice>       <xs:element ref=\"TargetClientParentURI\" minOccurs=\"0\"/>       <xs:element ref=\"TargetServerParentURI\" minOccurs=\"0\"/>     </xs:choice>     <xs:choice>       <xs:element ref=\"SourceClientParentURI\" minOccurs=\"0\"/>       <xs:element ref=\"SourceServerParentURI\" minOccurs=\"0\"/>     </xs:choice>     <xs:element ref=\"Meta\" minOccurs=\"0\"/>     <xs:element ref=\"Data\" minOccurs=\"0\"/>     <xs:element ref=\"MoreData\" minOccurs=\"0\"/>   </xs:sequence> </xs:complexType> Restrictions:  If the source URI for the data is an external entity, then the Data element is absent. In this case, the recipient will need to retrieve the data from the specified network location. The TargetClientURI/TargetServerURI or SourceClientURI/SourceServerURI element types for any of the SyncML commands can be a relative URL. This restriction is not captured by the SyncML Schema. When specified in an Add, Copy, Delete, Get, Put, Replace, or Results command, the element type specifies the data item that is the operand for the command. One or more Item element types MUST be specified in these commands. The Item element type specifies the data item to be operated on the recipient's database. When these commands are specified within a Sync element type, the TargetServerURI/SourceServerURI within the Item element type SHOULD be a global unique identifier (GUID), and the TargetClientURI/SourceClientURI within the Item element type SHOULD be a local unique identifier (LUID), as relative to the corresponding TargetServerURI/SourceServerURI and TargetClientURI/SourceClientURI specified in the parent Sync command. If specified within a SyncBody element type, the TargetClientURI/TargetServerURI and SourceClientURI/SourceServerURI within the Item element type in these commands SHOULD be an absolute URI. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 49 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  When specified in an Alert, the element type specifies the parameters for the alert type. When specified in a Status, the element type specifies additional information about the request status code type. For example, it might specify the component of the request that caused the status condition. Example:  <Add CmdID=\"1\" >   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>     <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <Item>     <SourceClientURI>15</SourceClientURI>     <Meta Type=\"text/directory profile=vCard\"/>     <Data>BEGIN:VCARD VERSION:3.0 FN:Smith;Bruce N:Bruce Smith TEL;TYPE=WORK;VOICE:+1-919-555-1234 END:VCARD     </Data>   </Item> </Add>  6.2.38    Last Usage: Specifies the synchronization state information (i.e., sync anchor) for the previous synchronization session. Parent Element: Anchor Content Model:  <xs:attribute name=\"Last\" type=\"AnchorType\"/> <xs:simpleType name=\"AnchorType\">   <xs:union memberTypes=\"xs:dateTime xs:positiveInteger\"/> </xs:simpleType> Restrictions:  The OPTIONAL Last attribute specifies the synchronization anchor for the previous synchronization session.  The value of the Last attribute MUST specify either an UTC based date/time stamp or a monotonically increasing numeric integer. If a date/time stamp, then the text MUST be in the complete representation, basic format defined by ISO8601. All Last and Next values sent in a synchronization session by a particular sender MUST be of the same type, and MUST be used such that a comparison operation on values can determine older from newer. Determination of the ordinal sequence of the version of an existing object in the recipient and the version of the object can be made by comparing the content information of the object with the value on the existing object. Example:  <Anchor Last=\"2000-08-24T13:30:00Z\" Next=\"2000-08-24T22:13:00Z\"/>  6.2.39    MaxMsgSize Usage: Specifies the maximum byte size of any response message to a given SyncML request. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 50 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Parent Element: SyncHdr Content Model:  <xs:attribute name=\"MaxMsgSize\" type=\"xs:long\"/> Restrictions:  The attribute appears in the SyncHdr of a SyncML request to specify the maximum size of any subsequent response messages. The attribute is usually specified by a SyncML client, but can also be specified by a SyncML server. This attribute value is applicable for the remainder of the synchronization session, unless it is specified again. The attribute value represents the maximum, decimal byte size of any response message. Example:  MaxMsgSize=\"1023\"  6.2.40    MaxObjSize Usage: Specifies the maximum size in bytes of a data object that the device is able to receive. Parent Elements: SyncAlert, Sync Content Model:  <xs:attribute name=\"MaxObjSize\" type=\"xs:unsignedLong\"/> Restrictions:  The attribute appears in a SyncML request to specify the maximum size of the largest object it is capable of receiving in any subsequent response messages. This attribute value is applicable for the remainder of the synchronization session. The attribute value represents the maximum, decimal byte size without leading zeroes of any object. Example: Device that can receive a maximum object of 10K bytes. MaxObjSize=\"10240\"  6.2.41    Meta Usage: Specifies meta-information about the parent element type. Parent Elements: Add, Chal, Copy, Cred, Delete, Get, Filter, Item, Move, Put, Replace, Results, Sync Content Model:  <xs:element name=\"Meta\" type=\"MetaType\"/> <xs:complexType name=\"MetaType\">   <xs:sequence>     <xs:attribute ref=\"Format\" use=\"optional\"/>     <xs:attribute ref=\"Type\" use=\"required\"/>     <xs:attribute ref=\"Size\" use=\"optional\"/>   </xs:sequence> </xs:complexType> Restrictions:  When specified in the Chal element, the Meta specifies meta-information about the authentication scheme requested. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 51 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  When specified in the Cred element, the Meta specifies meta-information about the authentication credential. When specified in the Sync element, the scope for the meta-information includes all the contained commands, unless the meta-information is overridden by a Meta in a contained command. When specified in the Results element, the Meta specifies meta-information about the results set. When specified in the Add, Copy, Delete, Get, and Replace commands, the element type specifies meta-information about the SyncML command. For example, the common MIME content type or content format for all the specified items.  The scope of the Meta information is limited to the command. Example:  <Item>   <Meta Format=\"xml\" Type=\"application/vnd.syncml-devinf+xml\"/>   <Data><![CDATA[     <DevInf xmlns='syncml:devinf' Version=\"2.0\">       <DevCap>         <Man>HAL</Man>         <Model>9000</Model>         <OEM>Classified</OEM>         <FwV>1.0Beta</FwV>         <SwV>1.0Beta</SwV>         <HwV>1.0Beta</HwV>         <DevID>HAL 9000</DevID>         <DevType>server</DevType>       </DevCap>       <DataStore>         ..       </DataStore>     </DevInf>]]>   </Data> </Item>  6.2.42    MoreData Usage: Indicator that a SyncML Data element is incomplete and there will be one or more subsequent chunks. Parent Element: Item Content Model:  <xs:element name=\"MoreData\" type=\"EmptyType\"/> Restrictions:  The element type MUST be specified on all but the last chunk of Data of an item. If not present, then the item is either contained within a single message or is the closing chunk of the Data item.   Example:  <Add CmdID=\"15\" >   <Meta Type=\"text/x-vcard\" Size=\"3000\"/>   <Item>     <SourceClientURI>2</SourceClientURI>     <Data>BEGIN:VCARD VERSION:2.1 FN:Bruce Smith N:Smith;Bruce TEL;WORK;VOICE:+1-919-555-1234 OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 52 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  TEL;WORK;FAX:+1-919-555-9876 NOTE: here starts a huge note field, or icon etc...     </Data>     <MoreData/>   </Item> </Add>  6.2.43    Move Usage: Specifies a SyncML command to support moving data items from one location (data store and/or folder) to another in the recipient's database. Parent Elements: Sync, SyncBody Content Model:  <xs:element name=\"Move\" type=\"CommonOperationType\"/> Restrictions:  The Move command allows for moving items (ex: files, folder, emails, vCards) from their current location to a new location.  The behaviour when the source parent folder and the target parent folder are the same is undefined. The restrictions, valid source/target combinations, possible errors, and example syntax are identical to the Copy command, with the exception that the original item is no longer present after the Move has occurred, and certain modified status codes shown below.  See Copy. Status Code differences from Copy: If the command completed successfully, then the (200) OK exception condition is created by the command, instead of   (201) Item added. If the recipient determines that the data item could not be moved on the recipient’s database, then the (428) Move Failed exception condition is created by the command. Example:  The following is an example of a Move command similar to example 10 from Copy, except with a different set of directories, so as to avoid attempting to move an item to its current position. The server requests the client to move an existing unmapped item (GUID ABC012345_1006) from an existing unmapped folder (GUID ABC012345_1005) to a different existing unmapped folder (GUID ABC012345_TBD, not shown in Appendix B), assigning it a GUID of ABC012345_1019, inside of a Sync command. <Move CmdID=\"410\">   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>     <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <Meta Format=\"chr\" Type=\"text/x-vcard\"/>   <Item>     <TargetServerURI>ABC012345_1018</TargetServerURI>     <SourceServerURI>GUID ABC012345_1006</SourceServerURI>     <TargetServerParentURI>GUID_ABC012345_TBD</TargetServerParentURI>     <SourceServerParentURI>GUID ABC012345_1005</SourceServerParentURI>   </Item> </Move>  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 53 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  6.2.44    MsgID Usage: Specifies a SyncML session-unique identifier for the SyncML Message.  Parent Element: SyncHdr Content Model: <xs:attribute name=\"MsgID\" type=\"xs:positiveInteger\"/> Restrictions:  The message identifier MUST be unique to the device within the SyncML session. The attribute MUST be specified in the SyncHdr. The value is a monotonically increasing numeric value starting at one (1) for the first message from each device (Client or Server) in the SyncML session. The message identifier specified in a SyncML request MUST be the content of the MsgRef element type in the corresponding SyncML Results or response Status. Example: <SyncHdr SessionID=\"1\" MsgID=\"1\">   <TargetServerURI>http://syncml.example.com/</TargetServerURI>   <SourceClientURI>IMEI:001004FF1234567</SourceClientURI> </SyncHdr>  6.2.45    MsgRef Usage: Specifies a reference to a SyncML session-unique identifier referenced by a SyncML Results or response Status. Parent Elements: Results, Status Content Model: <xs:attribute name=\"MsgRef\" type=\"xs:positiveInteger\"/> Restrictions:  The value MUST reference the message identifier of the SyncML message referred to by the Results or response Status. Example: <Status CmdID=\"4321\" MsgRef=\"1\" CmdRef=\"1234\" Cmd=\"Add\" Code=\"200\"/>  6.2.46    Next Usage: Specifies the synchronization state information (i.e., sync anchor) for the current synchronization session. Parent Element: Anchor Content Model:  <xs:attribute name=\"Next\" type=\"AnchorType\"/> <xs:simpleType name=\"AnchorType\">   <xs:union memberTypes=\"xs:dateTime xs:positiveInteger\"/> </xs:simpleType> Restrictions:  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 54 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  The REQUIRED Next attribute specifies the synchronization anchor for the current synchronization session. The value of the Next attribute MUST specify either an UTC based date/time stamp or a monotonically increasing numeric integer. If a date/time stamp, then the text MUST be in the complete representation, basic format defined by ISO8601. All Last and Next values sent in a synchronization session by a particular sender MUST be of the same type, and MUST be used such that a comparison operation on values can determine older from newer. Determination of the ordinal sequence of the version of an existing object in the recipient and the version of the object can be made by comparing the content information of the object with the value on the existing object. Example:  <Anchor Last=\"2000-08-24T13:30:00Z\" Next=\"2000-08-24T22:13:00Z\"/>  6.2.47    NextNonce  Usage: Specifies the nonce string to be used in any subsequent communication. Parent Element: Chal Restrictions:  The nonce string MUST be further re-formatted using the Base64 algorithm. Terminators or length of Nonce String MUST NOT be included in this re-formatting. The Nonce string MUST be treated as opaque data. This element type is used to specify the next nonce string that is to be used in any subsequent SyncML message. For example, a SyncML server specifies this element type to tell the SyncML client to change its nonce to a new value. Nonce strings are used in various authentication schemes, such as “syncml:auth-sha256” and “syncml:auth-md5”. Content Model:  <xs:element name=\"NextNonce\" type=\"xs:string\"/> Example:  <Chal>   <Meta Format=\"b64\" Type=\"syncml:auth-sha256\"/>   <NextNonce>Tm9uY2U=</NextNonce> </Chal>  6.2.48    NoStatus  Usage: Indicates that the originator does not want a response Status sent back in the response message. Parent Elements: Add, Alert, Copy, Delete, Get, Move, Put, Replace, Sync, SyncAlert, SyncHdr Content Model:  <xs:attribute name=\"NoStatus\" type=\"xs:boolean” default=\"false\"/> Restrictions:  When specified as “true”, the recipient MUST NOT return a Status command for the associated SyncML command. If specified on the SyncHdr element type, the recipient MUST NOT return Status commands for any of the commands in the current SyncML message. Example:  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 55 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  <Replace CmdID=\"1\" NoStatus=\"true\">   <Item>     <SourceClientURI>./127</SourceClientURI>     <Meta Type=\"text/directory profile=vCard\"/>     <Data>BEGIN:VCARD VERSION:2.1 FN:Bruce Smith N:Smith;Bruce TEL;TYPE=WORK;VOICE;MSG:+1-919-555-9999 ADR:;;123 Main St.;Anywhere;CA;;US END:VCARD     </Data>   </Item> </Replace>  6.2.49    NumberOfChanges Usage: Indicates the total number of changes (the number of Add, Replace and Delete commands) that are going to be sent from sender to recipient during a synchronization session so that the recipient MAY use this information to calculate progress information. Parent Element: Sync Content Model:  <xs:attribute name=\"NumberOfChanges\" type=\"xs:unsignedInt\"/> Restrictions:  The attribute MUST be specified by the server, but only if the client has indicated that it supports NumberOfChanges. It MAY be specified by the client. If synchronizations are carried out on more than one datastore (e.g. Contacts & Calendar), then NumberOfChanges MUST be specified for each datastore.  Example:  <Sync CmdID=\"5\" NumberOfChanges=\"20\">   ...   <TargetServerURI>contacts</TargetServerURI>   <SourceClientURI>C:\\System\\data\\Contacts.cdb</SourceClientURI>   ... </Sync>  6.2.50    Put Usage: Specifies the SyncML command to transfer data items to a recipient network device or database.  Parent Element: SyncBody Content Model:  <xs:element name=\"Put\" type=\"CommonOperationType\"/> Restrictions:  There is no synchronization state information for data transferred using the Put command. This command MUST NOT be specified within a Sync command. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 56 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  One or more Item element types MUST be specified. The Item element type specifies the data items to be transferred to the recipient. The TargetClientURI/TargetServerURI and SourceClientURI/SourceServerURI specified within the Item element type SHOULD be an absolute URI. If the command completed successfully, then the (200) OK exception condition is created by the command. If the originator's authentication credentials specify a principal with insufficient rights to complete the command, then the (401) Unauthorized exception condition is created by the command. If no authentication credentials were specified, then (407) Authentication required exception condition is created by the command. A suitable challenge can also be returned. If the Put command did not include the size of the data item to be transferred (i.e., in the Meta element’s Size attribute), then the (411) Size required exception condition is created by the command. If the data item to be transferred is too large (e.g., there are restrictions on the size of data items transferred to the recipient), then the (413) Request entity too large exception condition is created by the command. If the Size specified in the Meta element type was too large for the recipient (e.g., the recipient does not have sufficient input buffer for the data), then the (416) Requested size too big exception condition is created by the command. If the MIME content type or content format for the data item is not supported by the recipient, then the (415) Unsupported MIME content type or content format exception condition is created by the command. If the recipient device storage is full, then the (420) Device full exception condition is created by the command, and the originator SHOULD NOT attempt to add additional data until the recipient has more free space. Non-specific errors created by the recipient while attempting to complete the command create the (500) Command failed exception condition. Example: The following is an example of a Put command used to exchange device information. <Put CmdID=\"12345\">   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>     <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <Meta Type=\"application/vnd.syncml-devinf+xml\"/>   <Item>     <SourceClientURI>./devinf20 </SourceClientURI>     <Data><![CDATA[       <DevInf xmlns='syncml:devinf20' Version=\"2.0\"> ... ...       </DevInf>]]>     </Data>   </Item> </Put>  6.2.51    Record Usage: Specifies a record level filter to be performed on the parent element of the Filter element. Parent Element: Filter Content Model:  <xs:element name=\"Record\" type=\"RecordType\"/> <xs:complexType name=\"RecordType\">   <xs:sequence>     <xs:element ref=\"Item\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 57 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    </xs:sequence> </xs:complexType> Restrictions:  The Record element MAY appear in the Filter element for SyncAlert elements. If the Record element is present, the SyncAlert TargetServerURI/TargetClientURI Meta Type is used to indicate the content type used in the filter record query and MUST be present. The Record Item element specifies the filter query itself. The Record Item Meta Type element is used to indicate the filter query grammar. The Record Item Data is used to indicate the filter query itself and MUST be present. Example: The following is an example of a Record element used within a Filter element to define the characteristics of the subset of data to be synchronized. 1. The Meta Type value of “syncml:filtertype-cgi” indicates the grammar being used. 2. The Item Data element constrains the items synchronized to those that fall into the “business” or “personal” group (case insensitive) with the cgi expression “GROUP&iCON;business&OR; GROUP &iCON;personal”.  <Filter>   <Record>     <Item>       <Meta Type=\"syncml:filtertype-cgi\"/>       <Data><![CDATA[GROUP&iCON;business&OR;GROUP&iCON;personal]]></Data>     </Item>   </Record> </Filter>  6.2.52    Replace Usage: Specifies the SyncML command to replace data. Parent Elements: Sync, SyncBody Content Model:  <xs:element name=\"Replace\" type=\"ReplaceType\"/> <xs:complexType name=\"ReplaceType\">   <xs:sequence>     <xs:element ref=\"Cred\" minOccurs=\"0\"/>     <xs:element ref=\"Meta\" minOccurs=\"0\"/>     <xs:element ref=\"Item\" maxOccurs=\"unbounded\"/>   </xs:sequence>   <xs:attribute ref=\"CmdID\" use=\"required\" />   <xs:attribute ref=\"FieldLevel\" use=\"optional\"/>   <xs:attribute ref=\"NoStatus\" use=\"optional\"/> </xs:complexType> Restrictions:  The Replace command is used to replace data on the recipient. The Replace may be either partial (field-level Replace) or full. If the specified data item does not exist on a server, then the command from a client MUST be interpreted as an Add command.  Servers MUST NOT use the Replace command to create new data items on the client.  The Replace command MUST NOT be used to Move data items between folders. The originator of the command SHOULD only send features/properties of the data item that are supported by the recipient. The device information document of the recipient can contain this information. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 58 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  If the Replace is used for partial update (field-level Replace), then the FieldLevel attribute MUST be used. If the FieldLevel attribute is included in the Replace element, and the value is \"true\", then: - The sender MAY include unchanged fields of the item inside the Data element.  - The recipient MUST NOT remove any fields of the item in the database that are not present in the Data element. - The partial item inside the Data MUST still satisfy the validity rules defined for the content type specified in Type attribute. - The item MUST exist on the recipient. The scope of the meta-information is limited to the command, and MUST match that of any existing object. Example 1:  A server sending a field level Replace command to a client. <Replace CmdID=\"901\" FieldLevel=\"true\">   <Meta Type=\"x-type/x-subtype\"/>   <Item>     <TargetClientURI>1002</TargetClientURI>     <Data>       ...     </Data>   </Item> </Replace>  One or more Item element types MUST be specified. The Item element type specifies the data item replaced in the database.  Any TargetClientURI, TargetClientParentURI, SourceClientURI or SourceClientParentURI specified within the Item element type MUST be client LUIDs, as relative to the corresponding TargetServerURI / TargetClientURI or SourceServerURI / SourceClientURI specified in the parent Sync command.  Example 2:  A client sending a Replace command to a server. <Replace CmdID=\"902\">   <Meta Type=\"x-type/x-subtype\"/>   <Item>     <SourceClientURI FP=\"1234\">1002</SourceClientURI>     <Data>       ...     </Data>   </Item> </Replace>  When synchronizing hierarchical objects, the Replace command from a client MUST include parent information. For this purpose a SourceClientParentURI element MUST be used by the client device referring to an existing parent by LUID.  The Replace command from a server MUST NOT include parent information. In the case where an item has been modified and moved, Replace MUST NOT be used to Move the item.   If the Replace command is used by the client for a hierarchical Add operation, then the client MUST add the parent first before adding any children of that parent. For example, if an item B has a parent A, then before adding item B, parent A MUST be added by the client. Example 3: The client sends a hierarchical replace command to the server. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 59 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  <Replace CmdID=\"903\">   <Item>     <SourceClientURI FP=\"2345\">1002</SourceClientURI>     <SourceClientParentURI>1004</SourceClientParentURI>     <Data>      ...     </Data>   </Item> </Replace>  Status Codes: If the command completed successfully, then the (200) OK exception condition is created by the command. However, if the command was interpreted as an Add command and the command completed successfully, then the (201) Item added exception condition is created by this command. If the originator's authentication credentials specify a principal with insufficient rights to complete the command, then the (401) Unauthorized exception condition is created by the command.  If no authentication credentials were specified, then (407) Authentication required exception condition is created by the command. A suitable challenge can also be returned. Non-specific errors created by the recipient while attempting to complete the command create the (500) Command failed exception condition. If there is insufficient space on the recipient database for updating the data item, then the (420) Device full exception condition is created by the command, and the originator SHOULD NOT attempt to add additional data until the recipient has more free space. If the MIME content type or content format for the data item is not supported by the recipient, then the (415) Unsupported media type or format exception condition is created by the command. In case the recipient is unable to process a partial item update (e.g. when the item does not exist on recipient), it MUST return (426) Partial item not accepted. Example 4: The following example specifies a server sending a hierarchical Replace command to the client. The TargetClientURI contains the relative URI of the item that was replaced. The absolute URI of the Source is specified in the parent Sync element type (not shown in the example). <Replace CmdID=\"904\">   <Meta Type=\"...\"/>   <Item>     <TargetClientURI>1002</TargetClientURI>     <Data>      ...     </Data>   </Item> </Replace>  6.2.53    RespURI Usage: Specifies the URI that the recipient MUST use for any response to this message.  Parent Element: SyncHdr Content Model:  <xs:element name=\"RespURI\" type=\"xs:anyURI\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 60 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Restrictions:  The value of this element is the address, in the form of an absolute URI that the recipient MUST use for any response to this message. If the Source is not the same as this value, then the SourceServerURI element MUST also be specified in the SyncHdr element type.  Note that the server and databases are the same entities at this new address.  The recipient of this command SHOULD NOT resend the previous message.  6.2.54    Results Usage: Specifies the SyncML command that is used to return the results of a Get command. Parent Element: SyncBody Content Model:  <xs:element name=\"Results\" type=\"ResultsType\"/> <xs:complexType name=\"ResultsType\">   <xs:sequence>     <xs:element ref=\"Meta\" minOccurs=\"0\"/>     <xs:element ref=\"Item\" maxOccurs=\"unbounded\"/>   </xs:sequence>   <xs:attribute ref=\"CmdID\" use=\"required\"/>   <xs:attribute ref=\"MsgRef\" use=\"required\"/>   <xs:attribute ref=\"CmdRef\" use=\"required\"/> </xs:complexType> Restrictions:  The OPTIONAL MsgRef attribute specifies the MsgID of the associated SyncML request. If the MsgRef is not present in a Results element type, then the MsgRef value of \"1\" MUST be assumed. The CmdRef attribute specifies the CmdID of the associated SyncML request.  One or more Item element types MUST be specified. The Item element type specifies the results. The SourceClientURI/SourceServerURI specified within the Item element type SHOULD be a relative URI, as relative to the corresponding SourceClientURI/SourceServerURI in the Get command. Example: The following is an example of Results returned from a Get command. <Results CmdID=\"4321\" MsgRef=\"1\" CmdRef=\"1\">   <Meta Type=\"text/x-vCard\"/>   <Item>     <SourceClientURI>./1</SourceClientURI>     <Data>BEGIN:VCARD VERSION:2.1 FN:Bruce Smith N:Smith, Bruce TEL;WORK;VOICE:+1-919-555-1234 END:VCARD     </Data>   </Item>   <Item>     <SourceClientURI>./2</SourceClientURI>     <Data>BEGIN:VCARD VERSION:2.1 FN:Ida Blue N:Blue, Ida TEL;WORK;VOICE:+1-919-555-2345 END:VCARD     </Data> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 61 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    </Item>   <Item>     <SourceClientURI>./3</SourceClientURI>     <Data>BEGIN:VCARD VERSION:2.1 Mike McGrath N:McGrath, Mike TEL;WORK;VOICE:+1-919-555-3456 END:VCARD     </Data>   </Item> </Results>  6.2.55    Sequence Usage: Specifies the SyncML attribute to order the processing of a set of SyncML commands. Parent Element: Sync Content Model:  <xs:attribute name=\"Sequence\" type=\"xs:boolean\" default=\"false\"/> Restrictions:  If the command with Sequence attribute completed successfully, then the (200) OK exception condition is created by the command. If the recipient does not support the Sequence attribute, then the (406) Optional feature not supported exception condition is created by the command. Non-specific errors created by the recipient while attempting to complete the command with Sequence attribute create the (500) Command failed exception condition. Example: The following is an incomplete (i.e., Add and Delete commands only include skeleton content) example for a Sequence command containing two Add commands, followed by a Delete command. <Sync Sequence=\"true\" CmdID=\"1234\" >   <Add CmdID=\"1235\" >     ...   </Add>   <Add CmdID=\"1236\" >     ...   </Add>   <Delete CmdID=\"1237\" >     ...   </Delete> </Sync>  6.2.56    ServerURI Usage: Specifies the SourceServerURI or TargetServerURI referenced by a Status or Results element type Parent Elements: StatusItem, Status, Results Content Model:  <xs:element name=\"ServerURI\" type=\"xs:anyURI\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 62 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Restrictions:  When specified in the Status element type, specifies the Server address specified in the command associated with the response status. When specified in the StatusItem element type, specifies the server address specified in the specific Item. When specified in the Results element type, specifies the Server address specified in the associated Get command. The element type MUST be specified in a Status command corresponding to any SyncML command that includes the SourceServerURI or TargetServerURI element type. Example:  <Status CmdID=\"4321\" MsgRef=\"1\" CmdRef=\"1234\" Cmd=\"Add\" Code=\"200\">   <ServerURI>ABC012345_1012</ServerURI>   <ClientURI>1012</ClientURI> </Status>  6.2.57    SessionID Usage: Specifies the identifier of the SyncML session associated with the SyncML Message. Parent Element: SyncHdr Content Model:  <xs:attribute name=\"SessionID\" type=\"xs:unsignedInt\"/> Restrictions:  The value is an opaque string. The element type MUST be specified in the SyncHdr element type in all SyncML Messages. The initiator SHOULD use unique SessionIDs for each session. The maximum length of a SessionID is 4 bytes.  Note for a client having an 8 bit incrementing SessionID counter is enough for practical implementations.  Example:  <SyncML ...>   <SyncHdr SessionID=\"1\" MsgID=\"3\" >    ...   </SyncHdr>   <SyncBody>      ...blah, blah...   </SyncBody> </SyncML>  6.2.58    SftDel Usage: Indicates that the Delete command is a \"Soft Delete\". Parent Element: Delete Content Model:  <xs:attribute name=\"SftDel\" type=\"xs:boolean\" default=\"false\"/> Restrictions:  The data item is deleted from the client data store but not from the set of synchronization data. The \"Soft Delete\" can be specified by an OMA DS server to free up storage resources in the OMA DS client prior to a synchronization operation. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 63 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  If not present, then the semantics of the Delete command are a \"Hard Delete\" of the data item. In addition, the OMA DS client can specify the \"Soft Delete\" to free up storage resources in the OMA DS client prior to a synchronization operation with the OMA DS server.  The OMA DS client MUST maintain the LUID (Local Unique Identifier) associated with the soft-deleted item so that server(s) can re-use the LUID if the item is modified by a server. The OMA DS server MUST NOT delete the map items associated with the \"Soft Deleted\" items. If the OMA DS client does not support the \"Soft Delete\", then, a (406) Optional feature not supported MUST be returned in the Status command. In a two-way synchronization, if the OMA DS client specifies a \"Soft Delete\" for an item that has already been \"Hard Deleted\" on the OMA DS server, then a (423) Soft-delete conflict MUST be returned in the Status command. Example: The server requests the client to Soft Delete a set of items to free storage on the device. The items are identified by client LUIDs. <Delete CmdID=\"403\" SftDel=\"true\">   <Item><TargetClientURI>1018</TargetClientURI></Item>   <Item><TargetClientURI>1019</TargetClientURI></Item>   <Item><TargetClientURI>1020</TargetClientURI></Item> </Delete>  6.2.59    Size Usage: Specifies the byte size of a data object. Parent Element: Meta Content Model: <xs:attribute name=\"Size\" type=\"xs:unsignedLong\"/> Restrictions:  The byte size is specified as the numeric text equivalent of the byte count of the data object. In case a Meta element containing a Size attribute contains meta-information about a Data object, this Meta element MUST have the same parent as the Data object it refers to. Example: The following example illustrates how this attribute is used to specify meta-information about the byte size of the Item element type. <Item>   <TargetClientURI>4</TargetClientURI>   <Meta Format=\"chr\" Type=\"text/plain\" Size=\"10\" />   <Data>John Smith</Data> </Item>  6.2.60    SourceClientURI Usage: Specifies source routing or mapping information by client identifier. Parent Elements: Item, Sync, SyncHdr  Content Model: <xs:element name=\"SourceClientURI\" type=\"URIWithFPType\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 64 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  <xs:complexType name=\"URIWithFPType\">   <xs:simpleContent>     <xs:extension base=\"xs:anyURI\">       <xs:attribute ref=\"FP\" use=\"optional\"/>     </xs:extension>   </xs:simpleContent> </xs:complexType> Restrictions:  When specified in the Item element type, the SourceClientURI element type specifies the client identifier for the item that is the source of the SyncML command.  When specified in the SyncHdr element type, the SourceClientURI element type specifies the source routing information for the client device that originated the SyncML Message.  This MUST be specified by the client of the session, and MUST NOT be specified by the server of the session. If the RespURI element type is also specified within the SyncHdr, then the SourceClientURI element type specifies the source routing information for a proxy originator of the SyncML message. When specified in the Sync element type, the SourceClientURI element type specifies the source routing information of the client datastore originating the data synchronization request. Example: The following is an example of the usage in an Item element type sent from the client. <Replace CmdID=\"4567\" >   <Item>     <TargetServerURI>./bruce1/pnab</TargetServerURI>     <SourceClientURI FP=\"3456\">./contacts</SourceClientURI>     ... ...   </Item> </Replace>  6.2.61    SourceClientParentURI Usage: Specifies the client’s parent information of the current item. This may be in the form of a path or the actual Client unique identifier.  Parent Element: Item Content Model: <xs:element name=\"SourceClientParentURI\" type=\"xs:anyURI\"/> Restrictions:  SourceClientParentURI provides parent information of the child that is the current Item of Sync commands such as Move, Add and Replace. SourceClientParentURI MUST be specified in Add, Replace or Move, if and only if the objects have hierarchical nature, i.e. have a parent and child relation, and the client side ID of the parent is known.  SourceClientParentURI has meaning only when synchronizing objects in a datastore with hierarchical structure. In case the parent container is root then the value of the SourceClientParentURI MUST be indicated by ‘/’, without the quotes. The SourceClientParentURI element represents the client side’s ID of an item.  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 65 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  6.2.62    SourceServerURI Usage: Specifies source routing or mapping information by server identifier. Parent Element: Item, Sync, SyncHdr  Content Model: <xs:element name=\"SourceServerURI\" type=\"xs:anyURI\"/> Restrictions:  When specified in the Item element type, the SourceServerURI element type specifies the server database item that is the source of the SyncML command.  When specified in the SyncHdr element type, the SourceServerURI element type specifies the source routing information for the network device that originated the SyncML Message.  This MUST be specified by the server of the session, and MUST NOT be specified by the client of the session. If the RespURI element type is also specified within the SyncHdr, then the SourceServerURI element type specifies the source routing information for a proxy originator of the SyncML message. When specified in the Sync element type, the SourceServerURI element type specifies the source routing information of the server datastore originating the data synchronization request. Example: The following is an example of the usage in an Item element type sent from the client. <Replace CmdID=\"4567\" >   <Item>     <TargetServerURI>./bruce1/pnab</TargetServerURI>     <SourceClientURI>./contacts</SourceClientURI>     ... ...   </Item> </Replace>  6.2.63    SourceServerParentURI Usage: Specifies the server’s parent information of the current item. This may be in the form of a path or the actual Server unique identifier.  Parent Element: Item Content Model: <xs:element name=\"SourceServerParentURI\" type=\"xs:anyURI\"/> Restrictions:  SourceServerParentURI provides the server’s parent information of the current Item of the Sync commands such as Move, Add and Replace. SourceServerParentURI MUST be specified in Add, Replace or Move, if and only if the objects have hierarchical nature, i.e. have a parent and child relation, and only the server side ID of the parent is known.  SourceServerParentURI has meaning only when synchronizing objects in a datastore with hierarchical structure. In case the parent container is root then the value of the SourceServerParentURI MUST be indicated by ‘/’, without the quotes. The SourceServerParentURI element represents a temporary ID (GUID) of the item that was previously sent by the server to the client and for which the mapping was not yet received by the server. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 66 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  In the case of moving a child on the server that was already synced with the client to a new parent, which hasn’t been synced, the server MUST use SourceServerParentURI. In such situations the new parent has to be added before the Move can be performed. This scenario is further illustrated by the example.   Example: <Add CmdID=\"12345\" >   <Item>     <SourceServerURI>1002345/</SourceServerURI>     <Data>     ...     </Data>   </Item> </Add> <!-- Since this is an add from the server to the client, client will assign an id on its own to the folder added by the server. The mapping of the client’s id with server TempGUID ‘1002345’  MUST be maintained by the client till the end of Package 4 --> <Move CmdID=\"1234\" >   <Meta Type=\"text/plain\"/>   <Item>     <TargetServerURI>110</TargetServerURI>     <SourceServerParentURI>1002345</SourceServerParentURI>   </Item> </Move> <!-- Since server hasn’t received the mapping yet, server will use the same TempGUID ‘1002345’ when addressing the NEW Parent folder in the SourceParent of the Move Command -->  6.2.64    Status Usage: Specifies the request status code for a corresponding SyncML command. Parent Element: SyncBody Content Model:  <xs:element name=\"Status\" type=\"StatusType\"/> <xs:complexType name=\"StatusType\">   <xs:sequence>     <xs:element ref=\"ServerURI\" minOccurs=\"0\"/>     <xs:element ref=\"ClientURI\" minOccurs=\"0\"/>     <xs:element ref=\"Anchor\" minOccurs=\"0\"/>     <xs:element ref=\"Cred\" minOccurs=\"0\"/>     <xs:element ref=\"Chal\" minOccurs=\"0\"/>     <xs:element ref=\"StatusItem\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>     <xs:element ref=\"Item\" minOccurs=\"0\"/>   </xs:sequence>   <xs:attribute ref=\"CmdID\" use=\"required\"/>   <xs:attribute ref=\"MsgRef\" use=\"required\"/>   <xs:attribute ref=\"CmdRef\" use=\"required\"/>   <xs:attribute ref=\"Cmd\" use=\"required\"/>   <xs:attribute ref=\"Code\"/> </xs:complexType>  Restrictions:  A Status command only applies to the command corresponding to the specified CmdRef (i.e., 1:1 correspondence of a command and a Status).  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 67 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  If there were no Item elements specified in the original command, then the Code of the Status command MUST contain the status code for the original command.  In this case, the ServerURI of the Status command MUST contain the contents of the TargetServerURI of the original command, if one was specified.  If there was no TargetServerURI specified in the original command, then the ServerURI of the Status command MUST contain the contents of the SourceServerURI of the original command, if one was specified.  If neither were specified, the ServerURI MUST be omitted.  Additionally, the ClientURI MUST contain the contents of the TargetClientURI of the original command, if one was specified.  If there was no TargetClientURI specified in the original command, then the ClientURI of the Status command MUST contain the contents of the SourceClientURI of the original command, if one was specified.  If neither were specified, the ClientURI MUST be omitted. If there were one or more Item elements specified in the original command, and if the Items’ status Codes were not the same (if there was more than one), or a client wishes to specify a new identifier for an item then there MUST be a corresponding StatusItem returned for each of the Items of the original command.  If this does not apply, StatusItems MAY be returned for each of the Items of the original command. If any StatusItems are returned, there MUST be a StatusItem for each of the Items of the original command. If there were one or more Item elements specified in the original command and StatusItems are not included in the Status command, the Code of the Status command MUST contain the status code for all Item of the original command.  Additionally, the ServerURI and ClientURI MUST be omitted. If StatusItems are included in the Status command, a default status Code MAY be set as the Code of the Status command.  If no default status is specified, each StatusItem MUST include a status Code. Any status Code specified in a StatusItem overrides any default value.  The ServerURI and ClientURI of the Status command MUST be omitted.  Additionally, the ServerURI of the StatusItem MUST contain the contents of the TargetServerURI of the original corresponding Item, if a TargetServerURI was specified.  If there was no TargetServerURI specified in the corresponding Item, then the ServerURI of the Status command MUST contain the contents of the SourceServerURI of the corresponding Item, if one was specified.  If neither were specified, the ServerURI MUST be omitted from that StatusItem.  Additionally, the ClientURI of the StatusItem MUST contain the contents of the TargetClientURI of the corresponding Item, if one was specified.  If there was no TargetClientURI specified in the corresponding Item, then the ClientURI of the Status command MUST contain the contents of the SourceClientURI of the corresponding Item, if one was specified.  If neither were specified, the ClientURI MUST be omitted from the StatusItem.  If the Status command is associated with a command that had other commands inside it (e.g., Sync), then the status value only applies to the corresponding command, and is not related to the status of the commands inside it. Ordering of Status commands in a SyncML response MUST match the order of the commands in the corresponding SyncML request, except for the Status of the SyncHdr. That is, when there are multiple commands in a SyncML request, then the corresponding Status commands MUST appear in the SyncML response in the same order as the associated commands appeared in the SyncML request.  Note that for nested commands, such as an Add command within a Sync command, this means that the Status of the Sync command MUST come before the Status of the Add command. In addition, the Status on the SyncHdr MUST be the first Status element in the SyncBody of the response. Even in the case where the Statuses for the previous request span multiple messages/responses, the Status on SyncHdr MUST be the first Status element followed by any remaining Statuses from previous messages/responses (maintaining order), followed by any remaining Statuses from the most recent message/response. The MsgRef attribute specifies the MsgID of the associated SyncML request.  The CmdRef attribute specifies the CmdID of the associated SyncML request. The attribute MUST be present. If \"0\", the Status command corresponds to a status code for the SyncHdr of the SyncML message referenced by the Status command. The Cmd attribute specifies the name of the SyncML command associated with the SyncML request. The value of this attribute can also be \"SyncHdr\" when the CmdRef attribute has a value of \"0\". OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 68 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  The Chal element type specifies the authentication challenge for the command or the message. If the status code in the Code attribute is (401) Unauthorized or (407) Authentication required, the challenge SHOULD be included. If the status code in the Code attribute is (441) Encrypted symmetry key error or (447) Encryption required, the challenge SHOULD be included. The OPTIONAL Anchor attribute specifies the sync anchor information. The Code attribute specifies the request status code type.  The OPTIONAL and repeatable StatusItem element type contains additional information about the status of individual Items of the original command. The StatusItem element may specify changes to the server's item identifier map table. Map tables are used to correlate small resolution item identifiers with larger resolution item identifiers, or between two differing name spaces of identifiers. The client identifier for a given item is known as a LUID.  The server identifier for a given item is known as a GUID. For example, if a mobile device has 2-byte item identifiers (LUIDs) and a network server has 16-byte item identifiers (GUIDs), a map table is necessary to correlate an equivalent 2-byte and 16-byte identifier. Generally, map tables are maintained by the data synchronization engine on the network server. Item identifier map tables are not necessary when the originator and the recipient databases are exact replicas of each other (i.e., the databases have the same physical schema). If an item identifier map table is needed, it is the responsibility of the recipient/server maintaining the map table to perform item identifier translations when communicating synchronization commands with the client that required the map table. The processing of a Status command that contains StatusItem elements that provide mapping MUST be atomic in nature. This means that the recipient/server MUST process either the entire list of mappings supplied, or none of them. If the operation fails, the recipient/server SHOULD request a recovery sync when appropriate. This specification permits a Status command to be issued against another Status command. This case will probably not normally be encountered. However, there are extreme cases where this feature is necessary. For example, if a server returns a (401) Unauthorized status code with a request for an authentication scheme that is not supported by the client, the client might use a (406) Optional feature unsupported to notify the server that that requested authentication scheme is not supported and negotiate an authentication scheme it does support. SyncML servers and SyncML clients not supporting such a usage case need provide no further response to the SyncML entity issuing the \"Status on a Status\". The OPTIONAL Item element type MAY contain additional information relevant to the original command.  A Status MUST also be returned for the SyncHdr. However, if a client creates a message containing only a successful Status on a SyncHdr, the entire message MUST NOT be sent.  A server MUST send this message. Status codes are listed in Section 10, Response Status Codes. Example:  <SyncBody>   <Status CmdID=\"8765\" MsgRef=\"1\" CmdRef=\"1234\" Cmd=\"Add\" Code=\"401\">     <ServerURI></ServerURI>     <ClientURI>IMEI:001004FF1234567</ClientURI>   </Status> </SyncBody>  6.2.65    StatusItem Usage:   Specifies the Item receiving a status, as well as an optional ID mapping. Parent Element: Status    Content Model:  <xs:element name=\"StatusItem\" type=\"StatusItemType\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 69 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  <xs:complexType name=\"StatusItemType\">   <xs:sequence>     <xs:element ref=\"ServerURI\" minOccurs=\"0\"/>     <xs:element ref=\"ClientURI\" minOccurs=\"0\"/>   </xs:sequence>   <xs:attribute ref=\"Code\" use=\"optional\" /> </xs:complexType> Restrictions:  The ClientURI element type specifies the relative URI for the client’s item identifier (LUID).  This is either an existing identifier, taken from the SourceClientURI or TargetClientURI of the associated Item, or a new client identifier may be specified by the client if one did not previously exist. The ServerURI element type specifies server’s item identifier (GUID) as a relative URI taken from the SourceServerURI or TargetServerURI of the associated Item, if one was specified. Example:  <StatusItem>   <ServerURI>ABC012345_100x</ServerURI>   <ClientURI>100x</ClientURI> </StatusItem>  6.2.66    Sync Usage: Specifies the SyncML command that indicates a data synchronization operation. Parent Element: SyncBody Content Model:  <xs:element name=\"Sync\" type=\"SyncCmdType\"/> <xs:complexType name=\"SyncCmdType\">   <xs:sequence>     <xs:element ref=\"Cred\" minOccurs=\"0\"/>     <xs:choice>       <xs:element ref=\"TargetClientURI\" minOccurs=\"0\"/>       <xs:element ref=\"TargetServerURI\" minOccurs=\"0\"/>     </xs:choice>     <xs:choice>       <xs:element ref=\"SourceClientURI\" minOccurs=\"0\"/>       <xs:element ref=\"SourceServerURI\" minOccurs=\"0\"/>     </xs:choice>     <xs:element ref=\"Meta\" minOccurs=\"0\"/>     <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">       <xs:element ref=\"Add\"/>       <xs:element ref=\"Copy\"/>       <xs:element ref=\"Delete\"/>       <xs:element ref=\"Move\"/>       <xs:element ref=\"Replace\"/>     </xs:choice>   </xs:sequence>   <xs:attribute ref=\"CmdID\" use=\"required\"/>   <xs:attribute ref=\"MaxObjSize\" use=\"optional\"/>   <xs:attribute ref=\"Atomic\" use=\"optional\"/>   <xs:attribute ref=\"Sequence\" use=\"optional\"/>   <xs:attribute ref=\"NumberOfChanges\" use=\"optional\"/>   <xs:attribute ref=\"FreeID\" use=\"optional\"/>   <xs:attribute ref=\"FreeMem\" use=\"optional\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 70 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    <xs:attribute ref=\"NoStatus\" use=\"optional\"/> </xs:complexType> Restrictions:  The TargetClientURI / TargetServerURI element type MUST be used to specify the recipient database to be synchronized. The SourceClientURI / SourceServerURI element type MUST be used to specify the originator database to be synchronized. The optional datastore-specific FreeID and FreeMem attributes in the Sync command MUST be associated with the source datastore specified in the SourceClientURI / SourceServerURI  element of the Sync command. Zero or more Add, Replace, Delete Copy or Move element types MUST be specified. There is no implied order to the processing of these commands unless the Sequence attribute is set. If the command completed successfully, then the (200) OK exception condition is created by the command. If the originator's authentication credentials specify a principal with insufficient rights to complete the command, then the (401) Unauthorized exception condition is created by the command. If no authentication credentials were specified, then (407) Authentication required exception condition is created by the command. A suitable challenge can also be returned. If the originator's authentication credentials specify a principal that has had its rights to issue Sync commands denied, then the (403) Forbidden exception condition is created by this command. However, if the recipient does not want to make this fact public, then the (404) Not found exception condition can be used. If the recipient does not allow Sync commands either on the specified database or on the network device, then the (405) Command not allowed exception condition is created by this command. If the specified database cannot be found on the recipient network device, then the (404) Not found exception condition is created by this command. If the recipient determines that there is a high probability that the client device data is out of sync, then the (508) Refresh required exception condition is created by this command. When this exception condition occurs, the originator of the Sync command SHOULD initiate a slow synchronization with the recipient. Non-specific errors created by the recipient while attempting to complete the command create the (500) Command failed exception condition. Example: The following is an example of a Sync command with authentication credentials and a single Add of a calendar entry. <Sync CmdID=\"1234\">   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>      <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <TargetServerURI>./mail/bruce1</TargetServerURI>   <SourceClientURI>./calendar</SourceClientURI>   <Add CmdID=\"1246\">     <Item>       <SourceClientURI>./12</SourceClientURI>       <Meta Type=\"text/x-vCalendar\"/>       <Data>BEGIN:VCALENDAR VERSION:1.0 BEGIN:VEVENT DTSTART:20000531T160000Z DTEND:20000531T160100Z SUMMARY:Release v0.9 of specs END:VEVENT OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 71 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  END:VCALENDAR       </Data>     </Item>   </Add> </Sync>  6.2.67    SyncAlert Usage: Specifies the parameters for the sync type negotiation. Both the data sync client and server can use this element to alert the other side to initiate a specific data synchronization session.  Parent Element: SyncBody Content Model:  <xs:element name=\"SyncAlert\" type=\"SyncAlertType\"/> <xs:complexType name=\"SyncAlertType\">   <xs:sequence>     <xs:element ref=\"Anchor\"/>     <xs:element ref=\"Cred\" minOccurs=\"0\"/>     <xs:choice>       <xs:element ref=\"TargetClientURI\"/>       <xs:element ref=\"TargetServerURI\"/>     </xs:choice>     <xs:choice>       <xs:element ref=\"SourceClientURI\"/>       <xs:element ref=\"SourceServerURI\"/>     </xs:choice>     <xs:element ref=\"SyncType\"/>     <xs:element ref=\"IDContainer\" minOccurs=\"0\"/>     <xs:element ref=\"Filter\" minOccurs=\"0\"/>   </xs:sequence>   <xs:attribute ref=\"CmdID\" use=\"required\"/>   <xs:attribute ref=\"MaxObjSize\" use=\"optional\"/>   <xs:attribute ref=\"Correlator\" use=\"optional\"/>   <xs:attribute ref=\"NoStatus\" use=\"optional\"/> </xs:complexType> Restrictions:  The SyncType element specifies the parameters for the sync type negotiation. The IDValidity attribute specifies if the ID is valid. The semantics of Direction, Behaviour, IDValidity and ChangeLogValidity are described in [DSPRO].  The TargetClientURI / TargetServerURI and SourceClientURI / SourceServerURI  elements specify the target and source address to be synchronized. The semantics of TargetClientURI / TargetServerURI and SourceClientURI / SourceServerURI are described in [DSPRO]. The optional Filter element specifies the filter criteria. The optional IDContainer element specifies one or more data item identifiers. The Last and Next attributes of the Anchor element specify the synchronization state information for the last and current session, respectively. If multiple target and source addresses need to be synchronized within one session, the Data Sync Client or Server MUST use the SyncAlert command for each target and source pair to negotiate the sync types. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 72 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  If the command and the associated action are completed successfully, then the status code ‘(200) OK’ is created by the command. Example: The following is an example for a data sync client to initiate a normal sync from client to server only.  <SyncAlert CmdID=\"1\">   <Anchor Last=\"234\" Next=\"276\"/>   <Cred>     <Meta Type=\"syncml:auth-sha256\" Format=\"b64\"/>     <Data>...</Data>   </Cred>   <TargetServerURI>/Macy/02</TargetServerURI>   <SourceClientURI>/Macy/02</SourceClientURI>   <SyncType Direction=\"fromClient\" Behaviour=\"Preserve\" IDValidity=\"true\"     ChangeLogValidity=\"true\"/> </SyncAlert>  6.2.68    SyncBody Usage: Specifies the container for the body or contents of the SyncML message. Parent Element: SyncML Content Model: <xs:element name=\"SyncBody\" type=\"SyncBodyType\"/> <xs:complexType name=\"SyncBodyType\">   <xs:sequence>     <xs:choice maxOccurs=\"unbounded\">       <xs:element ref=\"Add\"/>       <xs:element ref=\"Alert\"/>       <xs:element ref=\"Copy\"/>       <xs:element ref=\"Delete\"/>       <xs:element ref=\"Get\"/>       <xs:element ref=\"Move\"/>       <xs:element ref=\"Put\"/>       <xs:element ref=\"Replace\"/>       <xs:element ref=\"Results\"/>       <xs:element ref=\"Status\"/>       <xs:element ref=\"Sync\"/>       <xs:element ref=\"SyncAlert\"/>     </xs:choice>     <xs:element ref=\"Final\" minOccurs=\"0\"/>   </xs:sequence> </xs:complexType> Restrictions:  None. Example: <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"     xsi:noNamespaceSchemaLocation=     \"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"      Version=\"2.0\" >   <SyncHdr SessionID=\"1\" MsgID=\"1\">     <TargetClientURI>IMEI:001004FF1234567</TargetClientURI>    <SourceServerURI>http://www.datasync.org/servlet/syncit</SourceServerURI>     <Cred AuthName=\"Bruce\">       <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 73 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]        <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>     </Cred>   </SyncHdr>   <SyncBody>     <Get CmdID=\"1234\">       <Item>         <TargetClientURI>./devinf20</TargetClientURI>       </Item>     </Get>   </SyncBody> </SyncML>  6.2.69    SyncHdr Usage: Specifies the container for the provisioning, routing information in the SyncML message. Parent Element: SyncML Content Model: <xs:element name=\"SyncHdr\" type=\"SyncHdrType\"/> <xs:complexType name=\"SyncHdrType\">   <xs:sequence>     <xs:choice>       <xs:element ref=\"TargetClientURI\"/>       <xs:element ref=\"TargetServerURI\"/>     </xs:choice>     <xs:choice>       <xs:element ref=\"SourceClientURI\"/>       <xs:element ref=\"SourceServerURI\"/>     </xs:choice>     <xs:element ref=\"RespURI\" minOccurs=\"0\"/>     <xs:element ref=\"Cred\" minOccurs=\"0\"/>     <xs:element ref=\"Chal\" minOccurs=\"0\"/>     <xs:element ref=\"EncryptedKey\" minOccurs=\"0\"/>   </xs:sequence>   <xs:attribute ref=\"SessionID\" use=\"required\"/>   <xs:attribute ref=\"MsgID\" use=\"required\"/>   <xs:attribute ref=\"MaxMsgSize\" use=\"optional\"/>   <xs:attribute ref=\"NoStatus\" use=\"optional\"/> </xs:complexType>  Restrictions:  The OPTIONAL MaxMsgSize attribute is used to convey the maximum byte size of a SyncML response. Example: <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"     xsi:noNamespaceSchemaLocation=     \"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"      Version=\"2.0\" >   <SyncHdr SessionID=\"1\" MsgID=\"1\">     <TargetServerURI>       http://www.datasync.org/servlet/syncit     </TargetServerURI>     <SourceClientURI>IMEI:001004FF1234567</SourceClientURI>   </SyncHdr>   <SyncBody>     ...blah, blah...  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 74 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    </SyncBody> </SyncML>  6.2.70    SyncML Usage: Specifies the container for a SyncML Message. Parent Elements: None. This is the root or document element. Content Model: <xs:element name=\"SyncML\">   <xs:annotation>     <xs:documentation>Root</xs:documentation>   </xs:annotation>   <xs:complexType>     <xs:sequence>       <xs:element ref=\"SyncHdr\"/>       <xs:element ref=\"SyncBody\"/>     </xs:sequence>     <xs:attribute ref=\"Version\" use=\"required\"/>   </xs:complexType> </xs:element>  Restrictions:  Within transports that support MIME content-type identification, this object MUST be identified as application/vnd.syncml+xml (for clear-text, XML representation) or application/vnd.syncml+wbxml (for binary, WBXML representation). Example: <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"     xsi:noNamespaceSchemaLocation=     \"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"      Version=\"2.0\" >   <SyncHdr SessionID=\"1\" MsgID=\"1\">     ...   </SyncHdr>   <SyncBody>     ...blah, blah...   </SyncBody> </SyncML>  6.2.71    SyncType Usage: Specifies the parameters for the sync type negotiation.  Parent Element: SyncAlert Content Model:  <xs:element name=\"SyncType\" type=\"SyncTypeType\"/> <xs:complexType name=\"SyncTypeType\" >   <xs:attribute ref=\"Direction\" use=\"required\" />   <xs:attribute ref=\"Behaviour\" use=\"required\"/>   <xs:attribute ref=\"IDValidity\" use=\"optional\" default=\"true\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 75 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]    <xs:attribute ref=\"ChangeLogValidity\" use=\"optional\" default=\"true\"/> </xs:complexType> Restrictions:  The SyncType element specifies the parameters for the sync type negotiation.  6.2.72    TargetClientURI Usage: Specifies target routing or mapping information by client identifier. Parent Elements: Item, Sync, SyncHdr Content Model:  <xs:element name=\"TargetClientURI\" type=\"xs:anyURI\"/> Restrictions:  When specified in the Item element type, the TargetClientURI element type specifies the server identifier for the item that is the target of the SyncML command.  When specified in the SyncHdr element type, the TargetClientURI element type specifies the target routing information for the client device that is receiving the SyncML Message. This MUST be specified by the server of the session, and MUST NOT be specified by the client of the session. When specified in the Sync element type, the TargetClientURI element type specifies the source routing information of the database receiving the data synchronization request.  6.2.73    TargetClientParentURI Usage Specifies the client’s parent information of the current Item. This may be in the form of a path or the actual Client unique identifier.  Parent Element: Item Content Model:  <xs:element name=\"TargetClientParentURI\" type=\"xs:anyURI\"/> Restrictions: TargetClientParentURI provides parent information of the child that is the current Item of Sync commands such as Add, Move and Replace.  TargetClientParentURI MUST be specified in Add, Replace and Move, if and only if the objects have hierarchical nature, i.e. have a parent and child relation, and the client side ID of the parent is known. TargetClientParentURI has meaning only when synchronizing objects with hierarchical structure. In case the parent container is a root then the value of the TargetClientParentURI MUST be indicated by ‘/’, without the quotes. TargetClientParentURI element always represents a LUID, i.e. the ID of client that was previously sent by the client in a StatusItem element. TargetClientParentURI MUST be sent only by servers. Example: the server requests the client to move the item having the LUID ‘110’. <Move CmdID=\"1234\" >   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/> OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 76 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]      <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <Meta Type=\"text/plain\"/>   <Item>     <TargetClientURI>110</TargetClientURI>     <TargetClientParentURI>1234</TargetClientParentURI>   </Item> </Move>  6.2.74    TargetServerURI Usage: Specifies target routing or mapping information by server identifier. Parent Elements: Item, Sync, SyncHdr Content Model: <xs:element name=\"TargetServerURI\" type=\"xs:anyURI\"/> Restrictions:  When specified in the Item element type, the TargetServerURI element type specifies the server database item that is the target of the SyncML command.  When specified in the SyncHdr element type, the TargetServerURI element type specifies the target routing information for the network device that receives the SyncML Message.  This MUST be specified by the client of the session, and MUST NOT be specified by the server of the session. When specified in the Sync element type, the TargetServerURI element type specifies the source routing information of the server database receiving the data synchronization request.  6.2.75    TargetServerParentURI Usage Specifies the parent information of the current Item. This may be in the form of a path or the actual Server unique identifier.  Parent Element: Item Content Model:  <xs:element name=\"TargetServerParentURI\" type=\"xs:anyURI\"/> Restrictions: TargetServerParentURI provides parent information of the current Item of Sync commands such as Add, Move and Replace. TargetServerParentURI MUST be specified in Add, Replace and Move, if and only if the objects have hierarchical nature, i.e. have a parent and child relation, and the client identifier is not known. TargetServerParentURI has meaning only when synchronizing objects with hierarchical structure. In case the parent container is a root then the value of the TargetServerParentURI MUST be indicated by ‘/’, without the quotes. TargetServerParentURI element always represents a GUID. TargetServerParentURI MUST be sent only by servers. Example: the server requests the client to move the item having the LUID ‘110’. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 77 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  <Move CmdID=\"1234\" >   <Cred>     <Meta Type=\"syncml:auth-md5\" Format=\"b64\"/>     <Data>Zz6EivR3yeaaENcRN6lpAQ==</Data>   </Cred>   <Meta Type=\"text/plain\"/>   <Item>     <TargetClientURI>110</TargetClientURI>     <TargetServerParentURI>1234</TargetServerParentURI>   </Item> </Move>  6.2.76    Type Usage: Specifies the media type of the content information in the Data element. Parent Element: Meta Restrictions:  If this attribute is missing, then the default content-type is text/plain. The content information for this attribute SHOULD BE a registered MIME content-type. Alternatively, a URN can be used to specify the media type. In case a Meta element containing a Type attribute contains meta-information about a Data object, this Meta element MUST have the same parent as the Data object it refers to. Content Model:  <xs:attribute name=\"Type\" type=\"xs:string\"/> Example: The following example illustrates how this attribute is used within a SyncML message to specify meta-information about the media type of the content information in the Item element type.  <Item>   <TargetClientURI>3</TargetClientURI>   <Meta Format=\"chr\" Type=\"text/directory;profile=vCard\" />   <Data>BEGIN:VCARD VERSION:3.0  FN:Jim Smith  N:Smith;Jim  TEL;TYPE=WORK,VOICE,FAX:+1-919-555-1234 EMAIL;TYPE=INTERNET,WORK:Jim_Smith@mail.host.com END:VCARD   </Data> </Item>  6.2.77    Version Usage: Specifies the major and minor version identifier of the DS Syntax protocol specification used to represent the SyncML message. Parent Element: SyncML Content Model:  <xs:attribute name=\"Version\" type=\"xs:string\"/> Restrictions:  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 78 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Each SyncML Message in each SyncML Package sent from an originator to a recipient MUST include the Version attribute in the SyncHdr. Major revisions of the specification create incompatible changes that will generally require a new SyncML parser. Minor revisions involve changes that do not impact basic compatibility of the parser. When the XML document conforms to this revision of the OMA DS Syntax specification the value MUST be 2.0.  Example:  <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"     xsi:noNamespaceSchemaLocation=     \"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\"      Version=\"2.0\">    <SyncHdr SessionID=\"1\" MsgID=\"1\" >     ...   </SyncHdr>   <SyncBody>     ...   </SyncBody> </SyncML>  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 79 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  7.  XML Schema Please refer to the Syntax Schema specification.  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 80 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  8.  WBXML Definition The following tables define the token assignments for the mapping of the SyncML related Schemas and element types into WBXML as defined by [WBXML]. 8.1     Code Space Definitions This version of the SyncML representation protocol specification maps all the SyncML related Schemas into WBXML code spaces. DTD Name WBXML PUBLICID Token (Hex Value) Formal Public Identifier SyncML FD1 -//SYNCML//DTD SyncML 1.0//EN SyncML 1.1 FD3 -//SYNCML//DTD SyncML 1.1//EN SyncML 1.2 0x1201 -//SYNCML//DTD SyncML 1.2//EN SyncML 2.0 0x1205 -//SYNCML//Schema SyncML 2.0//EN Table 10: Code Space Definitions The SyncML Schema is assigned the WBXML document public identifier (i.e., the \"publicid\" WBXML BNF production) associated with the 0x1205 token.   8.2     Code Page Definitions The following code page tokens represent SyncML related public identifiers. This version of the SyncML representation protocol specification utilizes the WBXML code page tokens for identifying schema.  DTD Name WBXML Code Page Token (Hex Value) Formal Public Identifier SyncML 00 -//SYNCML//Schema SyncML 2.0//EN Table 11: Code Page Definitions  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 81 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  8.3     Element Token Definitions The following WBXML token codes represent element types (i.e., tags) from code page x00 (zero), SyncML Schema. Element Type Name WBXML Tag Token (Hex Value) Add 05 Alert 06 Anchor 07 ClientURI 08 Chal 09 EncryptedKey 0A ID 0B IDContainer 0C Copy 0D Cred 0E Data 0F Delete 10 NextNonce 11 Final 12 Get 13 Item 14 ServerURI 15 SourceClientURI 16 SourceClientParentURI 17 SourceServerURI 18 SourceServerParentURI 19 Meta 1A StatusItem 1B SyncAlert 1C SyncType 1D TargetClientURI 1E Put 1F Replace 20 OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 82 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Element Type Name WBXML Tag Token (Hex Value) RespURI 21 Results 22 TargetClientParentURI 23 TargetServerURI 24 TargetServerParentURI 25 Reserved for future use  26 ~ 28 Status 29 Sync 2A SyncBody 2B SyncHdr 2C SyncML 2D Reserved for future use  2E ~ 33 MoreData 34 Field 35 Filter 36 Record 37 Reserved for future use 38 ~ 3A Move 3B Reserved for future use 3C ~ 3F Table 12: Element Token Definitions – Tag Order OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 83 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]   Element Type Name WBXML Tag Token (Hex Value) Add 05 Alert 06 Anchor 07 Chal 09 ClientURI 08 Copy 0D Cred 0E Data 0F Delete 10 EncryptedKey 0A Field 35 Filter 36 Final 12 Get 13 ID 0B IDContainer 0C Item 14 Meta 1A MoreData 34 Move 3B NextNonce 11 Put 1F Record 37 Replace 20 Reserved for future use  26 ~ 28 Reserved for future use  2E ~ 33 Reserved for future use 38 ~ 3A Reserved for future use 3C ~ 3F RespURI 21 OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 84 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Element Type Name WBXML Tag Token (Hex Value) Results 22 ServerURI 15 SourceClientParentURI 17 SourceClientURI 16 SourceServerParentURI 19 SourceServerURI 18 Status 29 StatusItem 1B Sync 2A SyncAlert 1C SyncBody 2B SyncHdr 2C SyncML 2D SyncType 1D TargetClientParentURI 23 TargetClientURI 1E TargetServerParentURI 25 TargetServerURI 24 Table 13: Element Token Definitions - Alphabetical  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 85 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  8.4     Attribute Start Token Definitions The following WBXML token codes represent the start of an attribute (some including value) in code page x00 (zero), SyncML Schema. Attribute Name Attribute Value Prefix WBXML Tag Token (Hex Value) Atomic* false 05 Atomic true 06 AuthName  07 Behaviour Preserve 08 Behaviour Refresh 09 ChangeLogValidity false 0A ChangeLogValidity true 0B Cmd Add 0C Cmd Alert 0D Cmd Copy 0E Cmd Delete 0F Cmd Get 10 Cmd Move 11 Cmd Put 12 Cmd Replace 13 Cmd Results 14 Cmd Status 15 Cmd Sync 16 Cmd SyncAlert 17 Cmd SyncHdr 18 CmdID  19 CmdRef  1A Code  1B Code 200 1C Code 201 1D Correlator  1E Direction fromClient 1F OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 86 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Attribute Name Attribute Value Prefix WBXML Tag Token (Hex Value) Direction fromServer 20 Direction NoWay 21 Direction twoWay 22 Encrypted* false 23 Encrypted true 24 FieldLevel* false 25 FieldLevel true 26 FilterType EXCLUSIVE 27 FilterType INCLUSIVE 28 Format  29 Format b64 2A Format bin 2B Format bool 2C Format chr 2D Format date 2E Format float 2F Format int 30 Format node 31 Format null 32 Format time 33 Format xml 34 FP  35 FreeID  36 FreeMem  37 IDValidity false 38 IDValidity true 39 Last  3A MaxMsgSize  3B MaxObjSize  3C MsgID  3D OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 87 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Attribute Name Attribute Value Prefix WBXML Tag Token (Hex Value) MsgRef  3E Next  3F NoStatus* false 45 NoStatus true 46 NumberOfChanges  47 Sequence* false 48 Sequence true 49 SessionID  4A SftDel* false 4B SftDel true 4C Size  4D Type  4E Type application/ 4F Type application/vnd.omads 50 Type application/vnd.omads-email+xml 51 Type application/vnd.omads-file+xml 52 Type application/vnd.omads-folder+xml 53 Type application/vnd.syncml-devinf+xml 54 Type application/vnd.syncml-devinf+wbxml 55 Type syncml: 56 Type syncml:auth-sha256 57 Type text/ 58 Type text/calendar 59 Type text/directory;profile=vCard 5A Type text/plain 5B Type text/vcard 5C Type text/x-calendar 5D Type text/x-vcard 5E Version  5F OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 88 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Attribute Name Attribute Value Prefix WBXML Tag Token (Hex Value) Version 2.0 60 Type application/vnd.omads-email+wbxml 61 Type application/vnd.omads-file+wbxml 62 Type application/vnd.omads-folder+wbxml 63 Reserved for future use  64 ~ 7F Table 14: Attribute Start Token Definitions – Alphabetical * indicates the default value for the attribute  8.5     Attribute Value Token Definitions The following WBXML token codes represent attribute values in code page x00 (zero), SyncML Schema. Attribute Value WBXML Tag Token (Hex Value) .com/ 85 .edu/ 86 .net/ 87 .org/ 88 http:// 89 http://www. 8A https:// 8B https://www. 8C xml 8D wbxml 8E Reserved for future use 8F ~ BF Reserved for future use C5 ~ FF Table 15: Attribute Value Definitions  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 89 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  9.  Common URI Scheme Types The following is a list of common URI scheme types URI Scheme Type Description FTP File Transfer Protocol HTTP Hypertext Transfer Protocol IMEI International Mobile Equipment Identifier LDAP Lightweight Directory Access Protocol OBEX IrDA Object Exchange Protocol SYNCML SyncML specific, as defined in one of the protocol or format specifications WSP Wireless Session Protocol ESN Electronic Serial Number MEID Mobile Equipment Identity Table 16: Common URI Scheme Types  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 90 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  10. Alert Types The alert types in SyncML are a numeric text value. The types are divided into two classes, User Alert, that are intended to be conveyed to the recipient's user agent, and Application Alert, that are intended to be conveyed to a target application on the recipient. The only valid values are the standard values defined in this specification. Implementations that desire to add to these values SHOULD submit a change request to mailto:technical-comments@openmobilealliance.org Alert Code Value Name Description Alert Codes used for user alerts 100 DISPLAY Show. The Data element type contains content information that SHOULD be processed and displayed through the user agent. 101-150 - Reserved for future SyncML usage. Special Alert Codes 211 END SESSION Specifies a request to end the session. 212 ALERT POLL Specifies a request to poll. 213 ALERT IDLE Specifies a request to idle. 214-220 - Reserved for future SyncML usage. 221 RESULT ALERT Specifies a request for synchronization results. 222 NEXT MESSAGE Specifies a request for the next message in the package. 223 NO END OF DATA End of Data for chunked object not received. 224-250 - Reserved for future SyncML usage. Table 17: Alert Types  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 91 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  11. Response Status Codes The response status codes in SyncML are a numeric text value. The codes are divided into five classes. The only valid values are the standard values defined in this specification. Implementations that desire to add to these values SHOULD submit a change request to mailto:technical-comments@openmobilealliance.org. Status Codes Reason Phrase Informational 1xx 101 In progress. The specified SyncML command is being carried out, but has not yet completed. Successful 2xx 200 OK. The SyncML command completed successfully. 201 Item added. The requested item was added. 202 Accepted for processing. The request to alert a user or application was successfully performed. 203 Non-authoritative response. The request is being responded to by an entity other than the one targeted. The response is only to be returned when the request would have been resulted in a 200 response code from the authoritative target. 204 No content. The request was successfully completed but no data is being returned. The response code is also returned in response to a Get when the target has no content. 205 Reset content. The source SHOULD update their content. The originator of the request is being told that their content SHOULD be synchronized to get an up to date version. 206 Partial content. The response indicates that only part of the command was completed. If the remainder of the command can be completed later, then when completed another appropriate completion request status code SHOULD be created. 207 Conflict resolved with merge. The response indicates that the request created a conflict; which was resolved with a merge of the client and server instances of the data. The response includes both the target and source URLs in the Item of the Status. In addition, a Replace command is returned with the merged data. 208 Conflict resolved with client’s command \"winning\". The response indicates that there was an update conflict; which was resolved by the client command winning.  209 Conflict resolved with duplicate. The response indicates that the request created an update conflict; which was resolved with a duplication of the client’s data being created in the server database. The response includes both the target URI of the duplicate in the Item of the Status. In addition, in the case of a two-way synchronization, an Add command is returned with the duplicate data definition. 210 Reserved for future SyncML usage. 211 Item not deleted. The requested item was not found. It could have been previously deleted. 212 Authentication accepted. No further authentication is needed for the remainder of the synchronization session. This response code can only be used in response to a request in which the credentials were provided. 213 Chunked item accepted and buffered. 214 Operation cancelled. The SyncML command completed successfully, but no more commands will be processed within the session. 215 Not executed. A command was not executed, as a result of user interaction and user chose not to accept the choice. 216 Atomic roll back OK. A command was inside Atomic element and Atomic failed. This command was rolled back successfully. Redirection 3xx 300 Multiple choices. The requested target is one of a number of multiple alternatives requested target. The alternative SHOULD also be returned in the Item element type in the Status. 301 Moved permanently. The requested target has a new URI. The new URI SHOULD also be returned in the Item element type in the Status. 302 Found. The requested target has temporarily moved to a different URI. The original URI SHOULD continue to be used. The URI of the temporary location SHOULD also be returned in the Item element type in the Status. The requestor SHOULD confirm the identity and authority of the temporary URI to act on behalf of the original target URI. 303 See other. The requested target can be found at another URI. The other URI SHOULD be returned in the Item element type in the Status. 304 Not modified. The requested SyncML command was not executed on the target. This is an additional response that can be added to any of the other Redirection response codes. 305 Use proxy. The requested target MUST be accessed through the specified proxy URI. The proxy URI SHOULD also be returned in the Item element type in the Status. Originator Exceptions 4xx OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 92 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  400 Bad request. The requested command could not be performed because of malformed syntax in the command. The malformed command MAY also be returned in the Item element type in the Status. 401 Invalid credentials. The requested command failed because the requestor MUST provide proper authentication. If the property type of authentication was presented in the original request, then the response code indicates that the requested command has been refused for those credentials. 402 Payment needed. The requested command failed because proper payment is needed. This version of SyncML does not standardize the payment mechanism. 403 Forbidden. The requested command failed, but the recipient understood the requested command. Authentication will not help and the request SHOULD NOT be repeated. If the recipient wishes to make public why the request was denied, then a description MAY be specified in the Item element type in the Status. If the recipient does not wish to make public why the request was denied then the response code 404 MAY be used instead. 404 Not found. The requested target was not found. No indication is given as to whether this is a temporary or permanent condition. The response code 410 SHOULD be used when the condition is permanent and the recipient wishes to make this fact public. This response code is also used when the recipient does not want to make public the reason for why a requested command is not allowed or when no other response code is appropriate. 405 Command not allowed. The requested command is not allowed on the target. The recipient SHOULD return the allowed command for the target in the Item element type in the Status. 406 Optional feature not supported. The requested command failed because an OPTIONAL feature in the request was not supported. The unsupported feature SHOULD be specified by the Item element type in the Status. 407 Missing credentials. This response code is similar to 401 except that the response code indicates that the originator MUST first authenticate with the recipient. The recipient SHOULD also return the suitable challenge in the Chal element type in the Status. 408 Request timeout. An expected message was not received within the REQUIRED period of time. The request can be repeated at another time. The RespURI can be used to specify the URI and optionally the date/time after which the originator can repeat the request. See RespURI for details.  409 Conflict. The requested failed because of an update conflict between the client and server versions of the data. Setting of the conflict resolution policy is outside the scope of this version of SyncML. However, identification of conflict resolution performed, if any, is within the scope. 410 Gone. The requested target is no longer on the recipient and no forwarding URI is known. 411 Size REQUIRED. The requested command MUST be accompanied by byte size or length information in the Meta element type. 412 Incomplete command. The requested command failed on the recipient because it was incomplete or incorrectly formed. The recipient SHOULD specify the portion of the command that was incomplete or incorrect in the Item element type in the Status. 413 Request entity too large. The recipient is refusing to perform the requested command because the requested item is larger than the recipient is able or willing to process. If the condition is temporary, the recipient SHOULD also include a Status with the response code 418 and specify a RespURI with the response URI and optionally the date/time that the command SHOULD be repeated. 414 URI too long. The requested command failed because the target URI is too long for what the recipient is able or willing to process. This response code is seldom encountered, but is used when a recipient perceives that an intruder might be attempting to exploit security holes or other defects in order to threaten the recipient. 415 Unsupported media type or format. The unsupported content type or format SHOULD also be identified in the Item element type in the Status. 416 Requested size too big. The request failed because the specified byte size in the request was too big. 417 Retry later. The request failed at this time and the originator SHOULD retry the request later. The recipient SHOULD specify a RespURI with the response URI and the date/time that the command SHOULD be repeated. 418 Already exists. The requested Put or Add command failed because the target already exists. 419 Conflict resolved with server data. The response indicates that the client request created a conflict; which was resolved by the server command winning. The normal information in the Status SHOULD be sufficient for the client to \"undo\" the resolution, if it is desired. 420 Device full. The response indicates that the recipient has no more storage space for the remaining synchronization data. The response includes the remaining number of data that could not be returned to the originator in the Item of the Status. 421 Unknown filtering grammar. The requested command failed on the server because the specified filtering grammar was not known. The client SHOULD re-specify the filtering using a known filtering grammar.  422 Bad CGI Script. The requested command failed on the server because the CGI scripting was incorrectly formed. The client SHOULD re-specify the portion of the command that was incorrect in the Item element type in the Status. 423 Soft-delete conflict. The requested command failed because the \"Soft Deleted\" item was previously \"Hard Deleted\" on the server. 424 Size mismatch. The chunked object was received, but the size of the received object did not match the size declared within the first chunk. OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 93 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  425 Permission Denied. The requested command failed because the sender does not have adequate access control permissions (ACL) on the recipient. 426 Partial item not accepted. Receiver of status code MAY resend the whole item in next package. 427 Item Not empty. Parent cannot be deleted since it contains children. 428 Move Failed 429 Key Exchange Algorithm not supported. The requested command failed because the recipient does not support the Key Exchange Algorithm. The recipient should return the suitable challenge in the Chal element within the Status element. 430 Data Encryption Algorithm not supported. The requested command failed because the recipient does not support the Data Encryption Algorithm. The recipient should return the suitable challenge in the Chal element within the Status element. 431 Key Length not supported. The requested command failed because the recipient does not support the Symmetric Key Length. The recipient should return the suitable challenge in the Chal element within the Status element. 432 Encryption required. The requested command failed because the recipient requires encryption. Recipient Exception 5xx 500 Command failed. The recipient encountered an unexpected condition which prevented it from fulfilling the request 501 Command not implemented. The recipient does not support the command REQUIRED to fulfill the request. This is the appropriate response when the recipient does not recognize the requested command and is not capable of supporting it for any resource. 502 Bad gateway. The recipient, while acting as a gateway or proxy, received an invalid response from the upstream recipient it accessed in attempting to fulfill the request. 503 Service unavailable. The recipient is currently unable to handle the request due to a temporary overloading or maintenance of the recipient. The implication is that this is a temporary condition; which will be alleviated after some delay. The recipient SHOULD specify the URI and date/time after which the originator SHOULD retry in the RespURI in the response. 504 Gateway timeout. The recipient, while acting as a gateway or proxy, did not receive a timely response from the upstream recipient specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary recipient (e.g. DNS) it needed to access in attempting to complete the request. 505 DTD Version not supported. The recipient does not support or refuses to support the specified version of SyncML DTD used in the request SyncML Message. The recipient MUST include the versions it does support in the Item element type in the Status. 506 Processing error. An application error occurred while processing the request. The originator SHOULD retry the request. The RespURI can contain the URI and date/time after which the originator can retry the request. 507 Atomic failed. The error caused all SyncML commands within an Atomic element type to fail. 508 Recovery REQUIRED. An error occurred that necessitates a refresh of the current synchronization state of the client with the server. Client is requested to initiate a recovery sync with the server. 509 Reserved for future use. 510 Data store failure. An error occurred while processing the request. The error is related to a failure in the recipient data store. 511 Server failure. A severe error occurred in the server while processing the request. The originator SHOULD NOT retry the request. 512 Synchronization failed. An application error occurred during the synchronization session. The originator SHOULD restart the synchronization session from the beginning. 513 Protocol Version not supported. The recipient does not support or refuses to support the specified version of the SyncML Synchronization Protocol used in the request SyncML Message. The recipient MUST include the versions it does support in the Item element type in the Status. 514 Operation cancelled. The SyncML command was not completed successfully, since the operation was already cancelled before processing the command. The originator SHOULD repeat the command in the next session. 516 Atomic roll back failed. Command was inside Atomic element and Atomic failed. This command was not rolled back successfully. Server SHOULD take action to try to recover client back into original state. 517 Atomic response too large to fit. The response to an atomic command was too large to fit in a single message. 518 Refuse to continue the session. The requested command failed because the recipient refuses to continue the session. Table 18: Response Status Codes  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 94 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  12. Base Media and Content formats Content MIME Content Type URI Content Format Contact text/x-vcard http://imc.org/pdi/vcard-21.doc vCard 2.1  text/directory;profile=vCard http://www.ietf.org/rfc/rfc2426.txt vCard 3.0  (official)  text/vcard http://www.ietf.org/rfc/rfc2426.txt vCard 3.0  (common usage) Calendar text/x-vcalendar http://www.imc.org/pdi/vcal-10.doc vCalendar 1.0  text/calendar http://www.ietf.org/rfc/rfc2445.txt iCalendar 2.0 Memos text/plain http://www.ietf.org/rfc/rfc2046.txt  Tasks text/x-vcalendar  http://www.imc.org/pdi/vcal-10.doc vCalendar 1.0  text/calendar http://www.ietf.org/rfc/rfc2445.txt iCalendar 2.0 Email message/rfc822 http://www.ietf.org/rfc.html  RFC822 RFC2822 RFC2045 application/vnd.omads-email http://www.openmobilealliance.org/ XML object File application/vnd.omads-file http://www.openmobilealliance.org/ XML object Folder application/vnd.omads-folder http://www.openmobilealliance.org/ XML object  Table 19: Base Media and Content formats  OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 95 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  13. MIME Media Type Registration The following section is the MIME media type registrations for OMA Data Synchronization specific MIME media types. 13.1   application/vnd.syncml+xml To: ietf-types@iana.org Subject: Registration of MIME media type application/vnd.syncml+xml MIME media type name: application MIME subtype name: vnd.syncml+xml REQUIED parameters: None OPTIONAL parameters: charset, synctype, verproto, verdtd. May be specified in any order in the Content-Type MIME header field. Content-Type MIME header. charset Parameter Purpose: Specifies the character set used to represent the SyncML document. The default character set for SyncML representation protocol is UTF-8, as defined in [RFC2279]. Formal Specification: The following ABNF defines the syntax for the parameter. chrset-param = \";\" \"charset\" \"=\" <any IANA registered charset identifier> synctype Parameter Purpose: Specifies the data synchronization protocol used by the SyncML document. If present, the value MUST be the same value as that specified by the \"SyncType\" element type in the SyncML MIME content information. There is no default value. Formal Specification: The following ABNF defines the syntax for the parameter. stype-param = \";\" \"synctype\" \"=\" text verproto Parameter Purpose: Specifies the major/minor revision identifiers for the SyncML synchronization protocol specification for the workflow of messages with SyncML MIME content. If present, MUST be the same value as that specified by the \"VerProto\" element type in the SyncML MIME content information. If not present, the default value \"1.2\" is to be assumed. Formal Specification: The following ABNF defines the syntax for the parameter. verprot-param = \";\" \"verproto\" \"=\" 1*numeric \".\" 1*numeric text = 1*ALPHA OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 96 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  numeric = \"0\" / \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\"/ \"9\" verdtd Parameter Purpose: Specifies the major/minor revision identifiers for the SyncML representation protocol specification that defines the SyncML MIME media type. If present, MUST be the same value as that specified by the \"VerDTD\" element type in the SyncML MIME content information. If not present, the default value \"1.2\" is to be assumed. Formal Specification: The following ABNF defines the syntax for the parameter. verdtd-param = \";\" \"verdtd\" \"=\" 1*numeric \".\" 1*numeric text = 1*ALPHA numeric = \"0\" / \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\"/ \"9\" Encoding considerations: The default character set for the SyncML MIME content type is UTF-8. Transfer of this character set through some MIME systems could require that the content is first character encoded into a 7bit character set with an IETF character encoding mechanism such as Base64, as defined in [RFC2045]  Security considerations:  Authentication: The SyncML MIME content type definition provides for the inclusion of authentication information for the purpose of authenticating the originator and recipient of messages containing the data synchronization content type. The content type definition supports Basic, Base64 userid/password mark-up, MD5 digest challenge and response strings and any other registered authentication credential scheme. Threats: The SyncML MIME content type definition provides for the inclusion of remote execution commands. Administrators for MIME implementations that support this content type SHOULD take every standard precaution to assure the activation of the originator of SyncML content, as well as take every standard precaution to confirm the validity of the included remote execution command prior to allowing the command to be executed on the targeted recipient's system. Interoperability considerations: Implementations that have support for the mandatory features of this content type will greatly increase the chances of interoperating with other implementations supporting this content type. Conformance to this content type requires an implementation to support every mandatory feature. Published specification: URL:http://www.openmobilealliance.org/tech/docs Applications, which use this media type: This MIME content type is intended for common use by networked data synchronization applications. Additional information: Magic number(s): None File extension(s): XSM Macintosh File Type Code(s): XSML OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 97 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  Person & email address to contact for further information: admins@syncml.org Intended usage: COMMON Author/Change controller: mailto:technical-comments@openmobilealliance.org 13.2   application/vnd.syncml+wbxml To: ietf-types@iana.org Subject: Registration of MIME media type application/vnd.syncml+wbxml MIME media type name: application MIME subtype name: vnd.syncml+wbxml REQUIRED parameters: None OPTIONAL parameters: charset, synctype, verproto, verdtd. May be specified in any order in the Content-Type MIME header field. Content-Type MIME header. charset Parameter Purpose: Specifies the character set used to represent the SyncML document. The default character set for SyncML representation protocol is UTF-8, as defined [RFC2279]. Formal Specification: The following ABNF defines the syntax for the parameter. chrset-param = \";\" \"charset\" \"=\" <any IANA registered charset identifier> synctype Parameter Purpose: Specifies the data synchronization protocol used by the SyncML document. If present, the value MUST be the same value as that specified by the \"SyncType\" element type in the SyncML MIME content information. There is no default value. Formal Specification: The following ABNF defines the syntax for the parameter. stype-param = \";\" \"synctype\" \"=\" text verproto Parameter Purpose: Specifies the major/minor revision identifiers for the SyncML synchronization protocol specification for the workflow of messages with SyncML MIME content. If present, MUST be the same value as that specified by the \"VerProto\" element type in the SyncML MIME content information. If not present, the default value \"1.2\" is to be assumed. Formal Specification: The following ABNF defines the syntax for the parameter. verprot-param = \";\" \"verproto\" \"=\" 1*numeric \".\" 1*numeric OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 98 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  text = 1*ALPHA numeric = \"0\" / \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\"/ \"9\" verdtd Parameter Purpose: Specifies the major/minor revision identifiers for the SyncML representation protocol specification that defines the SyncML MIME media type. If present, MUST be the same value as that specified by the \"VerDTD\" element type in the SyncML MIME content information. If not present, the default value \"1.2\" is to be assumed. Formal Specification: The following ABNF defines the syntax for the parameter. verdtd-param = \";\" \"verdtd\" \"=\" 1*numeric \".\" 1*numeric text = 1*ALPHA numeric = \"0\" / \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\"/ \"9\" Encoding considerations: The default character set for the SyncML MIME content type is UTF-8. Transfer of this character set through some MIME systems could require that the content is first character encoded into a 7bit character set with an IETF character encoding mechanism such as Base64, as defined in [RFC2045]. Security considerations:  Authentication: The SyncML MIME content type definition provides for the inclusion of authentication information for the purpose of authenticating the originator and recipient of messages containing the data synchronization content type. The content type definition supports Basic, Base64 userid/password mark-up, MD5 digest challenge and response strings and any other registered authentication credential scheme. Threats: The SyncML MIME content type definition provides for the inclusion of remote execution commands. Administrators for MIME implementations that support this content type SHOULD take every standard precaution to assure the authentication of the originator of SyncML content, as well as take every standard precaution to confirm the validity of the included remote execution command prior to allowing the command to be executed on the targeted recipient's system. Interoperability considerations: Implementations that have support for the mandatory features of this content type will greatly increase the chances of interoperating with other implementations supporting this content type. Conformance to this content type requires an implementation to support every mandatory feature. Published specification: http://www.syncml.org/docs/syncml_sync_represent_v111_20021002.pdf Applications, which use this media type: This MIME content type is intended for common use by networked data synchronization applications. Additional information: Magic number(s): None OMA-TS-DS_Syntax-V2_0-20090212-C.doc Page 99 (111 )    2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]  File extension(s): BSM Macintosh File Type Code(s): BSML Person & email address to contact for further information: admins@syncml.org Intended usage: COMMON Author/Change controller:  mailto:technical-comments@openmobilealliance.org  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Appendix A. [SYNTAX] Static Conformance Requirements  (Normative) The SCR tables in this Appendix form a profile of the Static Conformance Requirements.  Static conformance requirements (SCR) specify the features that are OPTIONAL and MANDATORY within implementations conforming to this specification. Further static conformance requirements for the usage of this specification are specified in [DSPRO]. A.1   Client Features A.1.1 Security  Item Function Ref. Status Requirement DS-Syntax-SEC-C-001 Support Basic and SHA-256 6.2.17 M  DS-Syntax-SEC-C-002 Support optional authentication types 6.2.17 O  Table 20: Client Features - Security A.1.2 XML Usage Item Function Ref. Status Requirement DS-Syntax-XML-C-001 Support namespace usage 5.3 M  Table 21: Client Features - XML Usage A.1.3 MIME Usage Item Function Ref. Status Requirement DS-Syntax-MIME-C-001 Support MIME content types DSPRO M  Table 22: Client Features - MIME Usage A.1.4 Identifiers Item Function Ref. Status Requirement DS-Syntax-IDS-C-001 Support URI, URN, textual names DSPRO M  Table 23: Client Features - Identifiers A.1.5 Common Use Elements Item Function Ref. Status Requirement DS-Syntax-CUE-C-001 Support Anchor 6.2.3 M  DS-Syntax-CUE-C-002 Support Atomic 6.2.4 O  DS-Syntax-CUE-C-003 Support AuthName 6.2.5 O  DS-Syntax-CUE-C-004 Support Behaviour 6.2.6 M  DS-Syntax-CUE-C-005 Support Chal 6.2.7 M DS-Syntax-DDE-C-003 DS-Syntax-CUE-C-006 Support ChangeLogValidity 6.2.8 M  DS-Syntax-CUE-C-007 Support ClientURI 6.2.9 M  DS-Syntax-CUE-C-008 Support Cmd 6.2.10 M  DS-Syntax-CUE-C-009 Support CmdID 6.2.11 M  DS-Syntax-CUE-C-010 Support CmdRef 6.2.12 M  DS-Syntax-CUE-C-011 Support Code 6.2.13 M  DS-Syntax-CUE-C-012 Support Correlator 6.2.16 O  DS-Syntax-CUE-C-013 Support Cred 6.2.17 M  DS-Syntax-CUE-C-014 Support Direction 6.2.20 M  DS-Syntax-CUE-C-015 Support Encrypted 6.2.22 O  DS-Syntax-CUE-C-016 Support EncryptedKey 6.2.23 O  OMA-TS-DS-Syntax-V2_0-20090212-C Page 101  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Item Function Ref. Status Requirement DS-Syntax-CUE-C-017 Support Field 6.2.24 O  DS-Syntax-CUE-C-018 Support FieldLevel 6.2.25 O  DS-Syntax-CUE-C-019 Support Filter 6.2.26 O DS-Syntax-DDE-C-003 DS-Syntax-CUE-C-020 Support Filter Type 6.2.27 O  DS-Syntax-CUE-C-021 Support Final 6.2.28 M  DS-Syntax-CUE-C-022 Support Format 6.2.29 O  DS-Syntax-CUE-C-023 Support FP 6.2.30 M  DS-Syntax-CUE-C-024 Support FreeID 6.2.31 O  DS-Syntax-CUE-C-025 Support FreeMem 6.2.32 O  DS-Syntax-CUE-C-026 Support ID 6.2.34 O  DS-Syntax-CUE-C-027 Support IDContainer 6.2.35 O  DS-Syntax-CUE-C-028 Support IDValidity 6.2.36 M  DS-Syntax-CUE-C-029 Support Last 6.2.38 M  DS-Syntax-CUE-C-030 Support MaxMsgSize 6.2.39 O  DS-Syntax-CUE-C-031 Support MaxObjSize 6.2.40 O  DS-Syntax-CUE-C-032 Support MoreData 6.2.42 O  DS-Syntax-CUE-C-033 Support MsgID 6.2.44 M  DS-Syntax-CUE-C-034 Support MsgRef 6.2.45 M  DS-Syntax-CUE-C-035 Support Next 6.2.46 M  DS-Syntax-CUE-C-036 Support NextNonce 6.2.47 M  DS-Syntax-CUE-C-037 Support NoStatus 6.2.48 M  DS-Syntax-CUE-C-038 Support NumberOfChanges 6.2.49 O  DS-Syntax-CUE-C-039 Support Record 6.2.51 O  DS-Syntax-CUE-C-040 Support RespURI 6.2.53 O  DS-Syntax-CUE-C-041 Support Sequence 6.2.55 O  DS-Syntax-CUE-C-042 Support ServerURI 6.2.56 M  DS-Syntax-CUE-C-043 Support SessionID 6.2.57 M  DS-Syntax-CUE-C-044 Support SftDel 6.2.58 O  DS-Syntax-CUE-C-045 Support Size 6.2.59 M  DS-Syntax-CUE-C-046 Support SourceClientURI 6.2.60 M  DS-Syntax-CUE-C-047 Support SourceClientParentURI 6.2.61 O  DS-Syntax-CUE-C-048 Support SourceServerURI 6.2.62 M  DS-Syntax-CUE-C-049 Support SourceServerParentURI 6.2.63 O  DS-Syntax-CUE-C-050 Support StatusItem 6.2.65 O  DS-Syntax-CUE-C-051 Support SyncType 6.2.71 M  DS-Syntax-CUE-C-052 Support TargetClientURI 6.2.72 M  DS-Syntax-CUE-C-053 Support TargetClientParentURI 6.2.73 O  DS-Syntax-CUE-C-054 Support TargetServerURI 6.2.74 M  DS-Syntax-CUE-C-055 Support TargetServerParentURI 6.2.75 O  DS-Syntax-CUE-C-056 Support Type 6.2.76 M  DS-Syntax-CUE-C-057 Support Version 6.2.77 M  Table 24: Client Features - Common Use Elements A.1.6  Message Container Elements Item Function Ref. Status Requirement DS-Syntax-MCE-C-001 Support SyncML 6.2.70 M DS-Syntax-MCE-C-002 AND  DS-Syntax-MCE-C-003 DS-Syntax-MCE-C-002 Support SyncHdr 6.2.69 M  DS-Syntax-MCE-C-003 Support SyncBody 6.2.68 M  Table 25: Client Features - Message Container Elements A.1.7 Data Description Elements Item Function Ref. Status Requirement OMA-TS-DS-Syntax-V2_0-20090212-C Page 102  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Item Function Ref. Status Requirement DS-Syntax-DDE-C-001 Support Data 6.2.18 M  DS-Syntax-DDE-C-002 Support Item 6.2.37 M  DS-Syntax-DDE-C-003 Support Meta 6.2.41 M       Table 26: Client Features - Data Description Elements A.1.8  Protocol Management Elements Item Function Ref. Status Requirement DS-Syntax-PME-C-001 Support Status 6.2.64 M  Table 27: Client Features - Protocol Management Elements  A.1.9 Protocol Command Elements Item Function Ref. Status Requirement DS-Syntax-PCE-C-001 Support Add 6.2.1 M  DS-Syntax-PCE-C-002 Support Alert 6.2.2 M  DS-Syntax-PCE-C-003 Support Copy 6.2.15 O / M Mandatory if Hierarchical Sync is supported  DS-Syntax-PCE-C-004 Support Delete 6.2.19 M  DS-Syntax-PCE-C-005 Support SyncAlert 6.2.67 M  DS-Syntax-PCE-C-006 Support Get 6.2.33 M  DS-Syntax-PCE-C-007 Support Move 6.2.43 O / M Mandatory if Hierarchical Sync is supported  DS-Syntax-PCE-C-008 Support Put 6.2.50 M  DS-Syntax-PCE-C-009 Support Replace 6.2.52 M  DS-Syntax-PCE-C-010 Support Results 6.2.54 O  DS-Syntax-PCE-C-011 Support Sync 6.2.65 M  Table 28: Client Features - Protocol Command Elements A.2   Server Features A.2.1 Security  Item Function Ref. Status Requirement DS-Syntax-SEC-S-001 Support Basic and SHA-256 6.2.17 M  DS-Syntax-SEC-S-002 Support optional authentication types 6.2.17 O  Table 29: Server Features - Security A.2.2 XML Usage Item Function Ref. Status Requirement DS-Syntax-XML-S-001 Support namespace usage 5.3 M  Table 30: Server Features - XML Usage A.2.3  MIME Usage Item Function Ref. Status Requirement DS-Syntax-MIME-S-001 Support MIME content types DSPRO M  OMA-TS-DS-Syntax-V2_0-20090212-C Page 103  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Table 31: Server Features - MIME Usage A.2.4  Identifiers Item Function Ref. Status Requirement DS-Syntax-IDS-S-001 Support URI, URN, textual names DSPRO M  Table 32: Server Features - Identifiers A.2.5  Common Use Elements Item Function Ref. Status Requirement DS-Syntax-CUE-S-001 Support Anchor 6.2.3 M  DS-Syntax-CUE-S-002 Support Atomic 6.2.4 O  DS-Syntax-CUE-S-003 Support AuthName 6.2.5 O  DS-Syntax-CUE-S-004 Support Behaviour 6.2.6 M  DS-Syntax-CUE-S-005 Support Chal 6.2.7 M DS-Syntax-DDE-C-003 DS-Syntax-CUE-S-006 Support ChangeLogValidity 6.2.8 M  DS-Syntax-CUE-S-007 Support ClientURI 6.2.9 M  DS-Syntax-CUE-S-008 Support Cmd 6.2.10 M  DS-Syntax-CUE-S-009 Support CmdID 6.2.11 M  DS-Syntax-CUE-S-010 Support CmdRef 6.2.12 M  DS-Syntax-CUE-S-011 Support Code 6.2.13 M  DS-Syntax-CUE-S-012 Support Correlator 6.2.16 O  DS-Syntax-CUE-S-013 Support Cred 6.2.17 M  DS-Syntax-CUE-S-014 Support Direction 6.2.20 M  DS-Syntax-CUE-S-015 Support Encrypted 6.2.22 O  DS-Syntax-CUE-S-016 Support EncryptedKey 6.2.23 O  DS-Syntax-CUE-S-017 Support Field 6.2.24 O  DS-Syntax-CUE-S-018 Support FieldLevel 6.2.25 O  DS-Syntax-CUE-S-019 Support Filter 6.2.26 O DS-Syntax-DDE-C-003 DS-Syntax-CUE-S-020 Support Filter Type 6.2.27 O  DS-Syntax-CUE-S-021 Support Final 6.2.28 M  DS-Syntax-CUE-S-022 Support Format 6.2.29 O  DS-Syntax-CUE-S-023 Support FP 6.2.30 M  DS-Syntax-CUE-S-024 Support FreeID 6.2.31 O  DS-Syntax-CUE-S-025 Support FreeMem 6.2.32 O  DS-Syntax-CUE-S-026 Support ID 6.2.34 O  DS-Syntax-CUE-S-027 Support IDContainer 6.2.35 O  DS-Syntax-CUE-S-028 Support IDValidity 6.2.36 M  DS-Syntax-CUE-S-029 Support Last 6.2.38 M  DS-Syntax-CUE-S-030 Support MaxMsgSize 6.2.39 O  DS-Syntax-CUE-S-031 Support MaxObjSize 6.2.40 O  DS-Syntax-CUE-S-032 Support MoreData   6.2.42 M  DS-Syntax-CUE-S-033 Support MsgID 6.2.44 M  DS-Syntax-CUE-S-034 Support MsgRef 6.2.45 M  DS-Syntax-CUE-S-035 Support Next 6.2.46 M  DS-Syntax-CUE-S-036 Support NextNonce 6.2.47 M  DS-Syntax-CUE-S-037 Support NoStatus 6.2.48 M  DS-Syntax-CUE-S-038 Support NumberOfChanges 6.2.49 M  DS-Syntax-CUE-S-039 Support Record 6.2.51 O  DS-Syntax-CUE-S-040 Support RespURI 6.2.53 M  DS-Syntax-CUE-S-041 Support Sequence 6.2.55 O  DS-Syntax-CUE-S-042 Support ServerURI 6.2.56 M  DS-Syntax-CUE-S-043 Support SessionID 6.2.57 M  DS-Syntax-CUE-S-044 Support SftDel 6.2.58 O  DS-Syntax-CUE-S-045 Support Size 6.2.59 M  OMA-TS-DS-Syntax-V2_0-20090212-C Page 104  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Item Function Ref. Status Requirement DS-Syntax-CUE-S-046 Support SourceClientURI 6.2.60 M  DS-Syntax-CUE-S-047 Support SourceClientParentURI 6.2.61 O  DS-Syntax-CUE-S-048 Support SourceServerURI 6.2.62 M  DS-Syntax-CUE-S-049 Support SourceServerParentURI 6.2.63 O  DS-Syntax-CUE-S-050 Support StatusItem 6.2.65 O  DS-Syntax-CUE-S-051 Support SyncType 6.2.71 M  DS-Syntax-CUE-S-052 Support TargetClientURI 6.2.72 M  DS-Syntax-CUE-S-053 Support TargetClientParentURI 6.2.73 O  DS-Syntax-CUE-S-054 Support TargetServerURI 6.2.74 M  DS-Syntax-CUE-S-055 Support TargetServerParentURI 6.2.75 O  DS-Syntax-CUE-S-056 Support Type 6.2.76 M  DS-Syntax-CUE-S-057 Support Version 6.2.77 M   Table 33: Server Features - Common Use Elements A.2.6  Message Container Elements Item Function Ref. Status Requirement DS-Syntax-MCE-S-001 Support SyncML 6.2.70 M  DS-Syntax-MCE-S-002 Support SyncHdr 6.2.69 M  DS-Syntax-MCE-S-003 Support SyncBody 6.2.68 M  Table 34: Server Features - Message Container Elements  A.2.7 Data Description Elements Item Function Ref. Status Requirement DS-Syntax-DDE-S-001 Support Data 6.2.18 M  DS-Syntax-DDE-S-002 Support Item 6.2.37 M  DS-Syntax-DDE-S-003 Support Meta 6.2.41 M       Table 35: Server Features - Data Description Elements A.2.8 Protocol Management Elements Item Function Ref. Status Requirement DS-Syntax-PME-S-001 Support Status 6.2.64 M  Table 36: Server Features - Protocol Management Elements A.2.9 Protocol Command Elements Item Function Ref. Status Requirement DS-Syntax-PCE-S-001 Support Add 6.2.1 M  DS-Syntax-PCE-S-002 Support Alert 6.2.2 M  DS-Syntax-PCE-S-003 Support Copy 6.2.15 O / M Mandatory if Hierarchical Sync is supported  DS-Syntax-PCE-S-004 Support Delete 6.2.19 O  DS-Syntax-PCE-S-005 Support Get 6.2.33 O  DS-Syntax-PCE-S-006 Support Move 6.2.43 O / M Mandatory if Hierarchical Sync is supported DS-Syntax-PCE-S-007 Support Put 6.2.50 M  DS-Syntax-PCE-S-008 Support Replace 6.2.52 M  DS-Syntax-PCE-S-009 Support Results 6.2.54 M  OMA-TS-DS-Syntax-V2_0-20090212-C Page 105  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Item Function Ref. Status Requirement DS-Syntax-PCE-S-010 Support SyncAlert 6.2.55 M  DS-Syntax-PCE-S-011 Support Sync 6.2.65 M  Table 37: Server Features - Protocol Command Elements  OMA-TS-DS-Syntax-V2_0-20090212-C Page 106  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Appendix B. Example Validation Aids (Informative)  Many of the examples of this document may be validated against the schema.  Since the examples are generally incomplete, they need to be incorporated into an appropriate framework for this to work.  Some of the frameworks used, and the examples that can validate with them are shown below. B.1   Example Data Hierarchy  Figure 1 contains an example hierarchy of objects.  This collection is either the starting point or the ending point for many of the examples.    Client Absolute AddressIMEI:001004FF1234567Data  Figure 1 - Example of Hierarchy  OMA-TS-DS-Syntax-V2_0-20090212-C Page 107  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] DataClient Absolute AddressIMEI:001004FF1234567 Figure 2 - Example of Modified Hierarchy Figure 2 shows the hierarchy as modified during the Copy and Move commands.  B.2   Inside Sync Element Examples Examples for the following commands may be validated with this framework:  Add, Del  <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SyncML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"   xsi:noNamespaceSchemaLocation=   \"OMA-SUP-XSD_DS_Syntax_Schema-V2_0.xsd\" Version=\"2.0\">    <SyncHdr MsgID=\"1\" SessionID=\"100\">     <TargetServerURI>ServerURIGoesHere</TargetServerURI>     <SourceClientURI>ClientIdentifierGoesHere</SourceClientURI>   </SyncHdr>   <SyncBody> OMA-TS-DS-Syntax-V2_0-20090212-C Page 108  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205]     <Sync CmdID=\"1\">       <!-- Insert Example Below Here -->        <!-- Insert Example Above Here -->     </Sync>   </SyncBody> </SyncML>   OMA-TS-DS-Syntax-V2_0-20090212-C Page 109  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Appendix C. Change History (Informative) C.1   Approved Version History Reference Date Description n/a n/a No prior version C.2   Draft/Candidate Version 2.0 History Document Identifier Date Sections Description Draft Version OMA-TS-DS_Syntax-V2_0 05 Sep 2006 8 Updated according to agreed CR:  OMA-DS-DS_2_0-2006-0030R02 20 Mar 2007 6 Updated according to agreed CR: OMA-DS-DS_2_0-2006-0063 21 Mar 2007 All Clean up word generated errors 25 Apr 2007 All Updated according to agreed CR: OMA-DS-DS_2_0-2007-0008R01 26 Apr 2007 All Added table and figure titles & numbers 01 Jun All Updated according to agreed CR:  OMA-DS-DS_2_0-2006-0023R04 8 Oct 2007 6, 7, 8,  A, B Updated according to agreed CR:  OMA-DS-DS_2_0-2007-0004-CR_Clarify_NoResp.doc 29 Oct 2007 All Updated according to agreed CRs:  OMA-DS-DS_2_0-2007-0066-CR_To_clarify_the_use_of_Cmd_in_Syntax_Document OMA-DS-DS_2_0-2007-0067R01-CR_Remove_Atomic_Exec_Sequence_in_Syntax 26 Nov 2007 6 Updated according to agreed CRs:  OMA-DS-DS_2_0-2007-0068-CR_Alert_SyncAlert_Schema OMA-DS-DS_2_0-2007-0070-CR_MetaInfo_Schema OMA-DS-DS_2_0-2007-0073-CR_NextNonce_Schema OMA-DS-DS_2_0-2007-0074-CR_Anchor_Schema 2 Dec 2007 6,6.1.15 (new) 6.1.16 (new)  Updated according to agreed CRs:  OMA-DS-DS_2_0-2007-0072R01-CR_MaxMsgSize_MaxObjSize_Schema OMA-DS-DS_2_0-2007-0078-CR_Remove_Archive_Lang_In_Syntax 20 Dec 2007  All Updated according to agreed CRs:  OMA-DS-DS_2_0-2007-0069R02-CR_Cred_Chal_Schema OMA-DS-DS_2_0-2007-0077R01-CR_FieldLevel_Schema OMA-DS-DS_2_0-2007-0081-CR_IDContainer_Schema OMA-DS-DS_2_0-2007-0082-CR_Add_Fingerprint_Attribute_to_LocURI OMA-DS-DS_2_0-2007-0086R01-CR_Overall_Cleanup_Syntax 29 Jan 2008 6, New 6.1.6 New 6.1.30, New 6.1.33, New 6.3.1.1  Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0001-CR_Type_for_SftDel_NoStatus OMA-DS-DS_2_0-2008-0002-CR_Syntax_for_AlertOMA-DS-DS_2_0-2008-0003-CR_Syntax_for_Chal OMA-DS-DS_2_0-2008-0004-CR_Syntax_for_Source_TargetOMA-DS-DS_2_0-2008-0005-CR_Syntax_for_Encryption OMA-DS-DS_2_0-2008-0007-CR_Syntax_for_NumberOfChanges OMA-DS-DS_2_0-2008-0008-CR_Syntax_for_VerSchema_VerProto OMA-DS-DS_2_0-2008-0009-CR_Syntax_for_FilterType OMA-DS-DS_2_0-2008-0011-CR_Syntax_for_Meta 06 Feb 2008 Footer, TOC, Numerous Updated according to agreed CR: OMA-DS-DS_2_0-2008-0016-CR_Syntax_Editorial_Cleanup OMA-TS-DS-Syntax-V2_0-20090212-C Page 110  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Document Identifier Date Sections Description 18 Feb 2008 Table 2, 6, 8 A., B Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0019-CR_Remove_LocName OMA-DS-DS_2_0-2008-0020-CR_Syntax_Version_Element 28 Feb 2008 Reorder sections Updated according to agreed CR: OMA-DS-DS_2_0-2008-0017R02-CR_Syntax_Editorial_Reorder – reordering only. 03 Mar 2008 Cred, NextNonce, SyncBody, Global changes Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0022-CR_Add_Cred_AuthName OMA-DS-DS_2_0-2008-0017R02-CR_Syntax_Editorial_Reoarder 10 Mar 2008 CmdID related Updated according to agreed CR: OMA-DS-DS_2_0-2008-0033-CR_Syntax_CmdID_updates 21 Mar 2008 Source/Target Updated according to agreed CR: OMA-DS-DS_2_0-2008-0015R01-CR_Source_Target_Revision 22 Mar 2008 Map command, examples Updated according to agreed CR: OMA-DS-DS_2_0-2008-0035R01-CR_Map_Syntax 23 Mar 2008 Atomic, Sequence, use and examples Updated according to agreed CR: OMA-DS-DS_2_0-2008-0040-CR_Syntax_Atomic_Sequence_Updates 24 Mar 2008 Alerts, SyncAlert, SyncHdr Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0039-CR_Alert_Types,  OMA-DS-DS_2_0-2008-0041-CR_SyncAlert_SyncHdr_Syntax 31 Mar 2008 AuthName Updated according to agreed CR: OMA-DS-DS_2_0-2008-0042-CR_AuthName_Syntax 16 Apr 2008 All Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0036R02-CR_Add_Syntax OMA-DS-DS_2_0-2008-0052R01-CR_Delete_Syntax OMA-DS-DS_2_0-2008-0058-CR_Syntax_Editorial_Examples OMA-DS-DS_2_0-2008-0059-CR_Syntax_Editorial_Examples OMA-DS-DS_2_0-2008-0044R03-CR_DeviceFull_Handling OMA-DS-DS_2_0-2008-0050R03-CR_Syntax_Update 30 Jun 2008 Section 6.1  Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0053R02-CR_Replace_Syntax  OMA-DS-DS_2_0-2008-0063-CR_Syntax_Delete_Non_Empty_Folder OMA-DS-DS_2_0-2008-0067-CR_Add_Syntax OMA-DS-DS_2_0-2008-0069R01-CR_FreeID_FreeMem_Syntax OMA-DS-DS_2_0-2008-0080R01-CR_Syntax_Anchor_in_Status 17 Jul 2008 Table of Figures, Add, Copy,  Move, Appendix C Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0082R02-CR_Syntax_Appendix_Object_Tree OMA-DS-DS_2_0-2008-0081R01-CR_Copy_Syntax OMA-DS-DS_2_0-2008-0083-CR_Move_Syntax 16 Aug 2008 Tables 6, 35, 39, 45, Status, SourceRef / ClientURI, TargetRef / ServerURI, MapItem / StatusItem, Map Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0086R01-CR_Copy_Move_SCR OMA-DS-DS_2_0-2008-0085R01-CR_Status_Syntax 22 Oct 2008 All Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0117R01-CR_Editor_Notes_in_11 OMA-DS-DS_2_0-2008-0119-CR_Remove_Two_Sections_in_Syntax OMA-DS-DS_2_0-2008-0120-CR_Editor_Notes_in_6.2.2 OMA-DS-DS_2_0-2008-0121-CR_Editor_Notes_in_6.2.2 OMA-DS-DS_2_0-2008-0122R01-CR_Editor_Notes_in_6.2.17 OMA-DS-DS_2_0-2008-0128R03-CR_Syntax_Update 31 Oct 2008 Appendix A Updated according to agreed CR:  OMA-DS-DS_2_0-2008-0131-CR_SCR_Update_Syntax OMA-TS-DS-Syntax-V2_0-20090212-C Page 111  (111)  2008 Open Mobile Alliance Ltd.  All Rights Reserved. Used with the permission of the Open Mobile Alliance Ltd. under the terms as stated in this document. [OMA-Template-Spec-20040205] Document Identifier Date Sections Description 11 Nov 2008 Section 8, 56Appendix B Updated according to agreed CRs:  OMA-DS-DS_2_0-2008-0141R02-CR_Syntax_Editorial_and_bugfixes OMA-DS-DS_2_0-2008-0140R01-CR_Syntax_Parent_Element_Fix  OMA-DS-DS_2_0-2008-0138R02-CR_WBXML_Syntax 14 Nov 2008 8 Editorial Update 18 Nov 2008 8, Copy, Move, Put Updated according to agreed CR:  OMA-DS-DS_2_0-2008-0144-CR_WBXML_CommonOp Editorial 25 Nov 2008 Section 2, 8 Updated according to agreed CR:  OMA-DS-DS_2_0-2008-0151-CR_Syntax_References_Editorial Draft Versions OMA-TS-DS_Syntax-V2_0 11 Dec 2008 All Editorial Update 17 Dec 2008 Add, Attribute Start Tokens, misc Updated according to agreed CR:  OMA-DS-DS_2_0-2008-0159-CR_CONR_Syntax_Updates 03 Feb 2009 4.1.4 Updated according to agreed CR: OMA-DS-DS_2_0-2009-0003-CR_Reference_Fix Editorial clean-up of  2.1 and Appendix C Candidate Version OMA-TS-DS_Syntax-V2_0 12 Feb 2009 n/a Status changed to Candidate by TP    TP ref # OMA-TP-2009-0074R01-INP_DS_V2_0_ERP_for_Candidate_Approval"},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-SyncML_HTTPBinding-V1_2_1-20070611-A.pdf","file":"OMA-TS-SyncML_HTTPBinding-V1_2_1-20070611-A.pdf","status":"Approved","version":"V1.2.1","date":"2007-06-11","contentMediaType":"application/pdf","description":"The SyncML Initiative, Ltd. was a not-for-profit corporation formed by a group of companies who co-operated to produce an open specification for data synchronization and device management. Prior to SyncML, data synchronization and device management had been based on a set of different, proprietary protocols, each functioning only with a very limited number of devices, systems and data types. These non-interoperable technologies have complicated the tasks of users, manufacturers, service providers, and developers. Further, a proliferation of different, proprietary data synchronization and device management protocols has placed barriers to the extended use of mobile devices, has restricted data access and delivery and limited the mobility of the users. SyncML is a specification that contains the following main components: • An XML-based representation protocol • A synchronization protocol and a device management protocol • Transport bindings for the protocol The data representation specifies an XML DTD that allows the representation of all the information required to perform synchronization or device management, including data, metadata and commands. The synchronization and device management protocols specify how SyncML messages conforming to the DTD are exchanged in order to allow a SyncML client and server to exchange additions, deletes, updates and other status information.  There are also DTDs which define the representation of information about the device such as memory capacity, and the representation of various types of meta information such as security credentials. Although the SyncML specification defines transport bindings that specify how to use a particular transport to exchange messages and responses, the SyncML representation, synchronization and device management protocols are transport -independent. Each SyncML package is completely self-contained, and could in principle be carried by any transport. The initial bindings specified are HTTP, WSP and OBEX, but there is no reason why SyncML could not be implemented using email or message queues, to list only two alternatives. Because SyncML messages are self-contained, multiple transports may be used without either the server or client devices having to be aware of the network topology. Thus, a short-range OBEX connection could be used for local connectivity, with the messages being passed on via HTTP to an Internet-hosted synchronization server. To reduce the data size, a binary coding of SyncML based on the WAP Forum's WBXML is defined. Messages may also be passed in clear text if required. In this and other ways SyncML addresses the bandwidth and resource limitations imposed by mobile devices. SyncML is both data type and data store independent. SyncML can carry any data type which can be represented as a MIME object. To promote interoperability between different implementations of SyncML, the specification includes the representation formats used for common PIM data."},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-SyncML_OBEXBinding-V1_2-20070221-A.pdf","file":"OMA-TS-SyncML_OBEXBinding-V1_2-20070221-A.pdf","status":"Approved","version":"V1.2","date":"2007-02-21","contentMediaType":"application/pdf","description":"The SyncML Initiative, Ltd. was a not-for-profit corporation formed by a group of companies who co-operated to produce an open specification for data synchronization and device management. Prior to SyncML, data synchronization and device management had been based on a set of different, proprietary protocols, each functioning only with a very limited number of devices, systems and data types. These non-interoperable technologies have complicated the tasks of users, manufacturers, service providers, and developers. Further, a proliferation of different, proprietary data synchronization and device management protocols has placed barriers to the extended use of mobile devices, has restricted data access and delivery and limited the mobility of the users. SyncML is a specification that contains the following main components: • An XML-based representation protocol • A synchronization protocol and a device management protocol • Transport bindings for the protocol The data representation specifies an XML DTD that allows the representation of all the information required to perform synchronization or device management, including data, metadata and commands. The synchronization and device management protocols specify how SyncML messages conforming to the DTD are exchanged in order to allow a SyncML client and server to exchange additions, deletes, updates and other status information.  There are also DTDs which define the representation of information about the device such as memory capacity, and the representation of various types of meta information such as security credentials. Although the SyncML specification defines transport bindings that specify how to use a particular transport to exchange messages and responses, the SyncML representation, synchronization and device management protocols are transport-independent. Each SyncML package is completely self-contained, and could in principle be carried by any transport. The initial bindings specified are HTTP, WSP and OBEX, but there is no reason why SyncML could not be implemented using email or message queues, to list only two alternatives. Because SyncML messages are self-contained, multiple transports may be used without either the server or client devices having to be aware of the network topology. Thus, a short-range OBEX connection could be used for local connectivity, with the messages being passed on via HTTP to an Internet-hosted synchronization server. To reduce the data size, a binary coding of SyncML based on the WAP Forum's WBXML is defined. Messages may also be passed in clear text if required. In this and other ways SyncML addresses the bandwidth and resource limitations imposed by mobile devices. SyncML is both data type and data store independent. SyncML can carry any data type which can be represented as a MIME object. To promote interoperability between different implementations of SyncML, the specification includes the representation formats used for common PIM data. This document describes how to use SyncML over OBEX. The document uses the primitives and methods defined in the OBEX specification V1.2 as defined in [OBEX]"},{"url":"http://www.openmobilealliance.org/release/DS/V2_0-20090212-C/OMA-TS-SyncML_WSPBinding-V1_2-20070221-A.pdf","file":"OMA-TS-SyncML_WSPBinding-V1_2-20070221-A.pdf","status":"Approved","version":"V1.2","date":"2007-02-21","contentMediaType":"application/pdf","description":"The SyncML Initiative, Ltd. was a not-for-profit corporation formed by a group of companies who co-operated to produce an open specification for data synchronization and device management. Prior to SyncML, data synchronization and device management had been based on a set of different, proprietary protocols, each functioning only with a very limited number of devices, systems and data types. These non-interoperable technologies have complicated the tasks of users, manufacturers, service providers, and developers. Further, a proliferation of different, proprietary data synchronization and device management protocols has placed barriers to the extended use of mobile devices, has restricted data access and delivery and limited the mobility of the users. SyncML Components SyncML is a specification that contains the following main components: • An XML-based representation protocol • A synchronization protocol and a device management protocol • Transport bindings for the protocol The data representation specifies an XML DTD that allows the representation of all the information required to perform synchronization or device management, including data, metadata and commands. The synchronization and device management protocols specify how SyncML messages conforming to the DTD are exchanged in order to allow a SyncML client and server to exchange additions, deletes, updates and other status information.  There are also DTDs which define the representation of information about the device such as memory capacity, and the representation of various types of meta information such as security credentials. Although the SyncML specification defines transport bindings that specify how to use a particular transport to exchange messages and responses, the SyncML representation, synchronization and device management protocols are transport-independent. Each SyncML package is completely self-contained, and could in principle be carried by any transport. The initial bindings specified are HTTP, WSP and OBEX, but there is no reason why SyncML could not be implemented using email or message queues, to list only two alternatives. Because SyncML messages are self-contained, multiple transports may be used without either the server or client devices having to be aware of the network topology. Thus, a short-range OBEX connection could be used for local connectivity, with the messages being passed on via HTTP to an Internet-hosted synchronization server. To reduce the data size, a binary coding of SyncML based on the WAP Forum's WBXML is defined. Messages may also be passed in clear text if required. In this and other ways SyncML addresses the bandwidth and resource limitations imposed by mobile devices. SyncML is both data type and data store independent. SyncML can carry any data type which can be represented as a MIME object. To promote interoperability between different implementations of SyncML, the specification includes the representation formats used for common PIM data. This document is limited to the functionality description for the SyncML WSP bindings"}]}}